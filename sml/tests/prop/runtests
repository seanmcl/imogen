#!/bin/bash

source ../common.sh
# set -x

status=0
TIMEFORMAT="    %R seconds"

function basic {
    echo "Running basic tests"
    cmd=$1; shift
    echo "  Command: $cmd"
    dir=$IMOGEN_HOME/tests/prop/basic
    problems=$(cd $dir; ls *.imo | xargs -I{} basename {} .imo)
    if (( $# > 0 )); then
        problems=$@
    fi
    for p in $problems; do
        emit "$p"
        if ! eval "$cmd -proof $dir/$p.imo &> /dev/null"; then
            echo " failed"
            status=1
        fi
    done
    emit "\r"
}

function iltp_quick {
    echo "Running iltp quick tests"
    cmd=$1; shift
    echo "  Command: $cmd"
    quick="
LCL181+1 LCL230+1 SYN001+1 SYN040+1 SYN041+1 SYN044+1 SYN045+1 SYN046+1 SYN047+1
SYN387+1 SYN388+1 SYN389+1 SYN390+1 SYN391+1 SYN392+1 SYN393+1 SYN416+1 SYN915+1
SYN916+1 SYN977+1 SYN978+1 SYJ101+1 SYJ102+1 SYJ103+1 SYJ104+1 SYJ105+1.002
SYJ105+1.003 SYJ105+1.004 SYJ106+1 SYJ107+1.001 SYJ107+1.002 SYJ107+1.003
SYJ107+1.004 SYJ201+1.001 SYJ201+1.002 SYJ202+1.001 SYJ202+1.002 SYJ202+1.003
SYJ202+1.004 SYJ203+1.001 SYJ203+1.002 SYJ203+1.003 SYJ203+1.004 SYJ203+1.005
SYJ203+1.006 SYJ203+1.007 SYJ203+1.008 SYJ203+1.009 SYJ203+1.010 SYJ203+1.011
SYJ203+1.012 SYJ203+1.013 SYJ203+1.014 SYJ203+1.015 SYJ203+1.016 SYJ203+1.017
SYJ203+1.018 SYJ203+1.019 SYJ203+1.020 SYJ204+1.001 SYJ204+1.002 SYJ204+1.003
SYJ204+1.004 SYJ204+1.005 SYJ204+1.006 SYJ204+1.007 SYJ204+1.008 SYJ204+1.009
SYJ204+1.010 SYJ204+1.011 SYJ204+1.012 SYJ204+1.013 SYJ204+1.014 SYJ204+1.015
SYJ204+1.016 SYJ204+1.017 SYJ204+1.018 SYJ204+1.019 SYJ204+1.020 SYJ205+1.001
SYJ205+1.002 SYJ205+1.003 SYJ205+1.004 SYJ205+1.005 SYJ205+1.006 SYJ205+1.007
SYJ205+1.008 SYJ205+1.009 SYJ205+1.010 SYJ205+1.011 SYJ205+1.012 SYJ205+1.013
SYJ205+1.014 SYJ205+1.015 SYJ205+1.016 SYJ205+1.017 SYJ205+1.018 SYJ205+1.019
SYJ205+1.020 SYJ206+1.001 SYJ206+1.002 SYJ206+1.003 SYJ206+1.004 SYJ206+1.005
SYJ207+1.001 SYJ207+1.002 SYJ207+1.003 SYJ208+1.001 SYJ208+1.002 SYJ208+1.003
SYJ208+1.004 SYJ208+1.005 SYJ209+1.001 SYJ209+1.002 SYJ209+1.003 SYJ209+1.004
SYJ209+1.005 SYJ209+1.006 SYJ209+1.007 SYJ209+1.008 SYJ209+1.009 SYJ209+1.010
SYJ209+1.011 SYJ209+1.012 SYJ209+1.013 SYJ209+1.014 SYJ209+1.015 SYJ209+1.016
SYJ209+1.017 SYJ209+1.018 SYJ209+1.019 SYJ209+1.020 SYJ210+1.001 SYJ210+1.002
SYJ210+1.003 SYJ210+1.004 SYJ210+1.005 SYJ210+1.006 SYJ210+1.007 SYJ210+1.008
SYJ210+1.009 SYJ210+1.010 SYJ210+1.011 SYJ210+1.012 SYJ210+1.013 SYJ210+1.014
SYJ210+1.015 SYJ210+1.016 SYJ210+1.017 SYJ210+1.018 SYJ210+1.019 SYJ210+1.020
SYJ211+1.001 SYJ211+1.002 SYJ211+1.003 SYJ211+1.004 SYJ211+1.005 SYJ211+1.006
SYJ211+1.007 SYJ211+1.008 SYJ211+1.009 SYJ211+1.010 SYJ211+1.011 SYJ211+1.012
SYJ211+1.013 SYJ211+1.014 SYJ211+1.015 SYJ211+1.016 SYJ211+1.017 SYJ211+1.018
SYJ211+1.019 SYJ211+1.020 SYJ212+1.001 SYJ212+1.002 SYJ212+1.003 SYJ212+1.004
SYJ212+1.005 SYJ212+1.006 SYJ212+1.007 SYJ212+1.008 SYJ212+1.009 SYJ212+1.010
SYJ212+1.011 SYJ212+1.012 SYJ212+1.013 SYJ212+1.014 SYJ212+1.015 SYJ212+1.016
SYJ212+1.017 SYJ212+1.018 SYJ212+1.019 SYJ212+1.020
"
    dir=$IMOGEN_HOME/tests/prop/iltp
    for p in $quick; do
        emit "$p"
        if ! eval "$cmd $dir/$p.imo &> /dev/null"; then
            echo " failed"
            status=1
        fi
    done
    emit "\r"
}

function iltp {
    echo "Running iltp tests"
    cmd=$1; shift
    echo "  Command: $cmd"
    dir=$IMOGEN_HOME/tests/prop/iltp
    args="-no-assertions -h optimize"
    if (( $# > 0 )); then
        prob=$1; shift
        ptime $cmd $dir/$prob.imo $args $@
    else
        # do them all
        # skip SYJ202+1.009-020
        files=$(cd $dir; ls *.imo | grep -E -v "SYJ202\+1.0(1|2|09)")
        for file in $files; do
            printf "  %-20s " $file
            ptime $cmd $dir/$file $args $@
        done
    fi
}

function random {
    echo "Running random tests"
    dir=$IMOGEN_HOME/tests/prop/random
    cmd=$1; shift
    sep=10
    printf "  %-${sep}s: %s\n" "Command" "$cmd"
    function random1 {
        file=$1; shift
        printf "  %-${sep}s: %s\n" "File" $(basename $file)
        if [ ! -e $file ]; then
            echo "Error: no such file $file"
            exit 1
        fi
        start=0
        ctr=0
        while read line; do
            if (( ctr >= start )); then
                emit "$ctr : $line"
                prob="echo \"$line\" | $cmd $@ &> /dev/null"
                if ! eval "$prob"; then
                    echo " failed"
                    status=1
                fi
            fi
            ctr=$(( ctr + 1 ))
        done < $file
        emit "\r"
    }

    if (( $# > 0 )); then
        num=$1; shift
        file="rand_$num.int"
        random1 $dir/$file $@
    else
        files=$(cd $dir; ls *.int)
        for file in $files; do
            time random1 $dir/$file
        done
    fi
}

function usage {
    echo "Usage: runtests Args"
    echo "       Args       ::= Prover? Cmd?"
    echo "       Prover     ::= cascade | partial"
    echo "       Cmd        ::= basic | iltp IltpArgs? | iltp-quick | random RandomArgs?"
    echo "       IlptArgs   ::= SYJ201+1 | ..."
    echo "       RandomArgs ::= Size ImogenArgs"
}

prover="both"
if (( $# > 0 )); then
    case $1 in
        "cascade"|"partial")
            prover="$1"; shift
            ;;
    esac
fi

cascade_cmd="imogen prop cascade"
partial_cmd="imogen prop prove"

function run_prover {
    class=$1; shift
    case $prover in
        "cascade")
            $class "$cascade_cmd" $@
            ;;
        "partial")
            $class "$partial_cmd" $@
            ;;
        "both")
            $class "$partial_cmd" $@
            $class "$cascade_cmd" $@
            ;;
        *)
            echo "Unknown prover $prover"
            usage
            exit 1
            ;;
    esac
}

if (( $# > 0 )); then
    sub=$1; shift
    case $sub in
        "help"|"-help")
            usage
            ;;
        "basic")
            run_prover basic $@
            ;;
        "iltp-quick")
            run_prover iltp_quick $@
            ;;
        "iltp")
            run_prover iltp $@
            ;;
        "random")
            run_prover random $@
            ;;
        *)
            echo "Unknown problem class: $1"
            usage
            exit 1
            ;;
    esac
else
    run_prover basic
    run_prover iltp_quick
    run_prover random
fi

exit $status
