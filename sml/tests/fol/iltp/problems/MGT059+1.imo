% File     : MGT059+1 : ILTP v1.1.2
% Domain   : Management (Organisation Theory)
% Problem  : Hazard of mortality is constant during periods of immunity
% Version  : [Han98] axioms.
% English  : An organization's hazard of mortality is constant during periods
%            in which it has immunity.
% Refs     : [Kam00] Kamps (2000), Email to G. Sutcliffe
%            [CH00]  Carroll & Hannan (2000), The Demography of Corporation
%            [Han98] Hannan (1998), Rethinking Age Dependence in Organizati
% Source   : [Kam00]
% Names    : ASSUMPTION 2 [Han98]
% Status   : Theorem
% Rating   : 0.00 v2.4.0
%
% Status (intuit.) : Theorem
% Rating (intuit.) : 0.75 v1.0.0
%
% Syntax   : Number of formulae    :    8 (   0 unit)
%            Number of atoms       :   36 (   9 equality)
%            Maximal formula depth :   12 (   6 average)
%            Number of connectives :   34 (   6 ~  ;   4  |;  12  &)
%                                         (   3 <=>;   9 =>;   0 <=)
%                                         (   0 <~>;   0 ~|;   0 ~&)
%            Number of predicates  :    9 (   0 propositional; 1-2 arity)
%            Number of functors    :    6 (   5 constant; 0-2 arity)
%            Number of variables   :   18 (   0 singleton;  18 !;   0 ?)
%            Maximal term depth    :    2 (   1 average)
% Comments : See MGT042+1.p for the mnemonic names.
%------------------------------------------------------------------------------

 

% reflexivity, axiom.
(( forall X. ( X = X ) ))

  =>

% symmetry, axiom.
(( forall X Y. ( ( X = Y ) => ( Y = X ) ) ))

  =>

% transitivity, axiom.
(( forall X Y Z. ( ( ( X = Y ) & ( Y = Z ) ) => ( X = Z ) ) ))

  =>

% hazard_of_mortality_substitution_1, axiom.
(( forall A B C. ( ( A = B ) => ( hazard_of_mortality(A, C) = hazard_of_mortality(B, C) ) ) ))

  =>

% hazard_of_mortality_substitution_2, axiom.
(( forall A B C. ( ( A = B ) => ( hazard_of_mortality(C, A) = hazard_of_mortality(C, B) ) ) ))

  =>

% greater_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & greater(A, C) ) => greater(B, C) ) ))

  =>

% greater_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & greater(C, A) ) => greater(C, B) ) ))

  =>

% greater_or_equal_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & greater_or_equal(A, C) ) => greater_or_equal(B, C) ) ))

  =>

% greater_or_equal_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & greater_or_equal(C, A) ) => greater_or_equal(C, B) ) ))

  =>

% has_immunity_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & has_immunity(A, C) ) => has_immunity(B, C) ) ))

  =>

% has_immunity_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & has_immunity(C, A) ) => has_immunity(C, B) ) ))

  =>

% is_aligned_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & is_aligned(A, C) ) => is_aligned(B, C) ) ))

  =>

% is_aligned_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & is_aligned(C, A) ) => is_aligned(C, B) ) ))

  =>

% organization_substitution_1, axiom.
(( forall A B. ( ( ( A = B ) & organization(A) ) => organization(B) ) ))

  =>

% positional_advantage_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & positional_advantage(A, C) ) => positional_advantage(B, C) ) ))

  =>

% positional_advantage_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & positional_advantage(C, A) ) => positional_advantage(C, B) ) ))

  =>

% smaller_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & smaller(A, C) ) => smaller(B, C) ) ))

  =>

% smaller_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & smaller(C, A) ) => smaller(C, B) ) ))

  =>

% smaller_or_equal_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & smaller_or_equal(A, C) ) => smaller_or_equal(B, C) ) ))

  =>

% smaller_or_equal_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & smaller_or_equal(C, A) ) => smaller_or_equal(C, B) ) ))

  =>

% definition_smaller_or_equal, axiom.
(( forall X Y. ( smaller_or_equal(X, Y) <=> ( smaller(X, Y) | ( X = Y ) ) ) ))

  =>

% definition_greater_or_equal, axiom.
(( forall X Y. ( greater_or_equal(X, Y) <=> ( greater(X, Y) | ( X = Y ) ) ) ))

  =>

% definition_smaller, axiom.
(( forall X Y. ( smaller(X, Y) <=> greater(Y, X) ) ))

  =>

% meaning_postulate_greater_strict, axiom.
(( forall X Y. ( ~ ( greater(X, Y) & greater(Y, X) ) ) ))

  =>

% meaning_postulate_greater_transitive, axiom.
(( forall X Y Z. ( ( greater(X, Y) & greater(Y, Z) ) => greater(X, Z) ) ))

  =>

% meaning_postulate_greater_comparable, axiom.
(( forall X Y. ( smaller(X, Y) | ( ( X = Y ) | greater(X, Y) ) ) ))

  =>

% assumption_17, axiom.
(( forall X T. ( organization(X) => ( ( has_immunity(X, T) => ( hazard_of_mortality(X, T) = very_low ) ) & ( ( ~ has_immunity(X, T) ) => ( ( ( is_aligned(X, T) & positional_advantage(X, T) ) => ( hazard_of_mortality(X, T) = low ) ) & ( ( ( ( ~ is_aligned(X, T) ) & positional_advantage(X, T) ) => ( hazard_of_mortality(X, T) = mod1 ) ) & ( ( ( is_aligned(X, T) & ( ~ positional_advantage(X, T) ) ) => ( hazard_of_mortality(X, T) = mod2 ) ) & ( ( ( ~ is_aligned(X, T) ) & ( ~ positional_advantage(X, T) ) ) => ( hazard_of_mortality(X, T) = high ) ) ) ) ) ) ) ) ))

  =>

% assumption_2, conjecture.
(( forall X T0 T. ( ( organization(X) & ( has_immunity(X, T0) & has_immunity(X, T) ) ) => ( hazard_of_mortality(X, T0) = hazard_of_mortality(X, T) ) ) ))

 

%------------------------------------------------------------------------------
