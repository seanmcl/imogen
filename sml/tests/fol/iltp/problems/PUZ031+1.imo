% File     : PUZ031+1 : ILTP v1.1.2
% Domain   : Puzzles
% Problem  : Schubert's Steamroller
% Version  : Especial.
% English  : Wolves, foxes, birds, caterpillars, and snails are animals, and
%            there are some of each of them. Also there are some grains, and
%            grains are plants. Every animal either likes to eat all plants
%            or all animals much smaller than itself that like to eat some
%            plants. Caterpillars and snails are much smaller than birds,
%            which are much smaller than foxes, which in turn are much
%            smaller than wolves. Wolves do not like to eat foxes or grains,
%            while birds like to eat caterpillars but not snails.
%            Caterpillars and snails like to eat some plants. Therefore
%            there is an animal that likes to eat a grain eating animal.
% Refs     : [Pel86] Pelletier (1986), Seventy-five Problems for Testing Au
%          : [Hah94] Haehnle (1994), Email to G. Sutcliffe
% Source   : [Hah94]
% Names    : Pelletier 47 [Pel86]
% Status   : Theorem
% Rating   : 0.22 v3.1.0, 0.00 v2.5.0, 0.33 v2.4.0, 0.33 v2.2.1, 0.00 v2.1.0
%
% Status (intuit.) : Theorem
% Rating (intuit.) : 0.75 v1.0.0
%
% Syntax   : Number of formulae    :   21 (   6 unit)
%            Number of atoms       :   55 (   0 equality)
%            Maximal formula depth :   10 (   4 average)
%            Number of connectives :   36 (   2 ~  ;   4  |;  14  &)
%                                         (   0 <=>;  16 =>;   0 <=)
%                                         (   0 <~>;   0 ~|;   0 ~&)
%            Number of predicates  :   10 (   0 propositional; 1-2 arity)
%            Number of functors    :    0 (   0 constant; --- arity)
%            Number of variables   :   33 (   0 singleton;  22 !;  11 ?)
%            Maximal term depth    :    1 (   1 average)
% Comments : This problem is named after Len Schubert.
%------------------------------------------------------------------------------

 

% pel47_1_1, axiom.
(( forall X. ( wolf(X) => animal(X) ) ))

  =>

% pel47_1_2, axiom.
(( exists X1. wolf(X1) ))

  =>

% pel47_2_1, axiom.
(( forall X. ( fox(X) => animal(X) ) ))

  =>

% pel47_2_2, axiom.
(( exists X1. fox(X1) ))

  =>

% pel47_3_1, axiom.
(( forall X. ( bird(X) => animal(X) ) ))

  =>

% pel47_3_2, axiom.
(( exists X1. bird(X1) ))

  =>

% pel47_4_1, axiom.
(( forall X. ( caterpillar(X) => animal(X) ) ))

  =>

% pel47_4_2, axiom.
(( exists X1. caterpillar(X1) ))

  =>

% pel47_5_1, axiom.
(( forall X. ( snail(X) => animal(X) ) ))

  =>

% pel47_5_2, axiom.
(( exists X1. snail(X1) ))

  =>

% pel47_6_1, axiom.
(( exists X. grain(X) ))

  =>

% pel47_6_2, axiom.
(( forall X1. ( grain(X1) => plant(X1) ) ))

  =>

% pel47_7, axiom.
(( forall X. ( animal(X) => ( ( forall Y. ( plant(Y) => eats(X, Y) ) ) | ( forall Y1. ( ( animal(Y1) & ( much_smaller(Y1, X) & ( exists Z. ( plant(Z) & eats(Y1, Z) ) ) ) ) => eats(X, Y1) ) ) ) ) ))

  =>

% pel47_8, axiom.
(( forall X Y. ( ( bird(Y) & ( snail(X) | caterpillar(X) ) ) => much_smaller(X, Y) ) ))

  =>

% pel47_9, axiom.
(( forall X Y. ( ( bird(X) & fox(Y) ) => much_smaller(X, Y) ) ))

  =>

% pel47_10, axiom.
(( forall X Y. ( ( fox(X) & wolf(Y) ) => much_smaller(X, Y) ) ))

  =>

% pel47_11, axiom.
(( forall X Y. ( ( wolf(X) & ( fox(Y) | grain(Y) ) ) => ( ~ eats(X, Y) ) ) ))

  =>

% pel47_12, axiom.
(( forall X Y. ( ( bird(X) & caterpillar(Y) ) => eats(X, Y) ) ))

  =>

% pel47_13, axiom.
(( forall X Y. ( ( bird(X) & snail(Y) ) => ( ~ eats(X, Y) ) ) ))

  =>

% pel47_14, axiom.
(( forall X. ( ( caterpillar(X) | snail(X) ) => ( exists Y. ( plant(Y) & eats(X, Y) ) ) ) ))

  =>

% pel47, conjecture.
(( exists X Y. ( animal(X) & ( animal(Y) & ( exists Z. ( grain(Z) & ( eats(Y, Z) & eats(X, Y) ) ) ) ) ) ))

 

%------------------------------------------------------------------------------
