% File     : SYN550+1 : ILTP v1.1.2
% Domain   : Syntactic (Translated)
% Problem  : dia box p <=> dia box dia box p
% Version  : Especial.
% English  : 
% Refs     : [Wei94] Weidenbach (1994), Email to G. Sutcliffe
%          : [Che80] Chellas (1980), Modal Logic
% Source   : [Wei94]
% Names    : 
% Status   : Theorem
% Rating   : 0.44 v3.1.0, 0.67 v2.7.0, 0.33 v2.6.0, 0.00 v2.5.0, 0.33 v2.4.0, 0.33 v2.2.1
%
% Status (intuit.) : Theorem
% Rating (intuit.) : 0.75 v1.0.0
%
% Syntax   : Number of formulae    :    3 (   1 unit)
%            Number of atoms       :   12 (   0 equality)
%            Maximal formula depth :   10 (   6 average)
%            Number of connectives :    9 (   0 ~  ;   0  |;   4  &)
%                                         (   1 <=>;   4 =>;   0 <=)
%                                         (   0 <~>;   0 ~|;   0 ~&)
%            Number of predicates  :    2 (   0 propositional; 1-2 arity)
%            Number of functors    :    1 (   1 constant; 0-0 arity)
%            Number of variables   :   10 (   0 singleton;   7 !;   3 ?)
%            Maximal term depth    :    1 (   1 average)
% Comments : These are modal logic problems translated to FOF. The problems 
%            can be easily solved by theorem proving methods for modal logic, 
%            but their (naive) translation into first-order logic results in 
%            hard first-order problems. The first-order translation of the 
%            box, diamond operators is:
%                [box P]x  :=  (all y R(x,y) -> [P]y)
%                [dia P]x  :=  (exists R(x,y) & [P]y)
%                [P]x  :=  P(x)  if P is an atom
%            where we start with some initial context 'o' (the initial world),
%            i.e. we translate a formula P into [P]o. [Wei94]
%------------------------------------------------------------------------------

 

% reflexivity_of_reachable, axiom.
(( forall X. reachable(X, X) ))

  =>

% transitivity_of_reachable, axiom.
(( forall X Y Z. ( ( reachable(X, Y) & reachable(Y, Z) ) => reachable(X, Z) ) ))

  =>

% prove_this, conjecture.
(( ( exists X. ( reachable(initial_world, X) & ( forall Y. ( reachable(X, Y) => p(Y) ) ) ) ) <=> ( exists X. ( reachable(initial_world, X) & ( forall Y. ( reachable(X, Y) => ( exists Z. ( reachable(Y, Z) & ( forall W. ( reachable(Z, W) => p(W) ) ) ) ) ) ) ) ) ))

 

%------------------------------------------------------------------------------
