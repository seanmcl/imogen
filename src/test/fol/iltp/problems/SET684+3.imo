% File     : SET684+3 : ILTP v1.1.2
% Domain   : Set Theory (Relations)
% Problem  : <x,z> in P(DtoE) o R(EtoF) iff ?y in E:<x,y> in P & <y,z> in R
% Version  : [Wor89] axioms : Reduced > Incomplete.
% English  : Let P be a relation from D to E, R a relation from E to F, x an 
%            element of D, and z in F. Then <x,z> is in P composed with R if 
%            and only if there exists an element y in E such that <x,y> is in 
%            P and <y,z> is in R.
% Refs     : [ILF] The ILF Group (1998), The ILF System: A Tool for the Int
%          : [Wor89] Woronowicz (1989), Relations Defined on Sets
% Source   : [ILF]
% Names    : RELSET_1 (51) [Wor89]
% Status   : Theorem
% Rating   : 0.64 v3.1.0, 0.78 v2.7.0, 0.83 v2.6.0, 0.86 v2.5.0, 1.00 v2.4.0, 0.75 v2.3.0, 0.67 v2.2.1
%
% Status (intuit.) : Open
% Rating (intuit.) : 1.00 v1.0.0
%
% Syntax   : Number of formulae    :   30 (   2 unit)
%            Number of atoms       :  134 (   9 equality)
%            Maximal formula depth :   19 (   7 average)
%            Number of connectives :  111 (   7 ~  ;   0  |;  16  &)
%                                         (  11 <=>;  77 =>;   0 <=)
%                                         (   0 <~>;   0 ~|;   0 ~&)
%            Number of predicates  :    5 (   0 propositional; 1-2 arity)
%            Number of functors    :   12 (   2 constant; 0-5 arity)
%            Number of variables   :   82 (   0 singleton;  74 !;   8 ?)
%            Maximal term depth    :    3 (   1 average)
% Comments :
%------------------------------------------------------------------------------

 

% reflexivity, axiom.
(( forall X. ( X = X ) ))

  =>

% symmetry, axiom.
(( forall X Y. ( ( X = Y ) => ( Y = X ) ) ))

  =>

% transitivity, axiom.
(( forall X Y Z. ( ( ( X = Y ) & ( Y = Z ) ) => ( X = Z ) ) ))

  =>

% compose_substitution_1, axiom.
(( forall A B C. ( ( A = B ) => ( compose(A, C) = compose(B, C) ) ) ))

  =>

% compose_substitution_2, axiom.
(( forall A B C. ( ( A = B ) => ( compose(C, A) = compose(C, B) ) ) ))

  =>

% compose5_substitution_1, axiom.
(( forall A B C D E F. ( ( A = B ) => ( compose5(A, C, D, E, F) = compose5(B, C, D, E, F) ) ) ))

  =>

% compose5_substitution_2, axiom.
(( forall A B C D E F. ( ( A = B ) => ( compose5(C, A, D, E, F) = compose5(C, B, D, E, F) ) ) ))

  =>

% compose5_substitution_3, axiom.
(( forall A B C D E F. ( ( A = B ) => ( compose5(C, D, A, E, F) = compose5(C, D, B, E, F) ) ) ))

  =>

% compose5_substitution_4, axiom.
(( forall A B C D E F. ( ( A = B ) => ( compose5(C, D, E, A, F) = compose5(C, D, E, B, F) ) ) ))

  =>

% compose5_substitution_5, axiom.
(( forall A B C D E F. ( ( A = B ) => ( compose5(C, D, E, F, A) = compose5(C, D, E, F, B) ) ) ))

  =>

% cross_product_substitution_1, axiom.
(( forall A B C. ( ( A = B ) => ( cross_product(A, C) = cross_product(B, C) ) ) ))

  =>

% cross_product_substitution_2, axiom.
(( forall A B C. ( ( A = B ) => ( cross_product(C, A) = cross_product(C, B) ) ) ))

  =>

% member_type_substitution_1, axiom.
(( forall A B. ( ( A = B ) => ( member_type(A) = member_type(B) ) ) ))

  =>

% ordered_pair_substitution_1, axiom.
(( forall A B C. ( ( A = B ) => ( ordered_pair(A, C) = ordered_pair(B, C) ) ) ))

  =>

% ordered_pair_substitution_2, axiom.
(( forall A B C. ( ( A = B ) => ( ordered_pair(C, A) = ordered_pair(C, B) ) ) ))

  =>

% power_set_substitution_1, axiom.
(( forall A B. ( ( A = B ) => ( power_set(A) = power_set(B) ) ) ))

  =>

% relation_type_substitution_1, axiom.
(( forall A B C. ( ( A = B ) => ( relation_type(A, C) = relation_type(B, C) ) ) ))

  =>

% relation_type_substitution_2, axiom.
(( forall A B C. ( ( A = B ) => ( relation_type(C, A) = relation_type(C, B) ) ) ))

  =>

% singleton_substitution_1, axiom.
(( forall A B. ( ( A = B ) => ( singleton(A) = singleton(B) ) ) ))

  =>

% subset_type_substitution_1, axiom.
(( forall A B. ( ( A = B ) => ( subset_type(A) = subset_type(B) ) ) ))

  =>

% unordered_pair_substitution_1, axiom.
(( forall A B C. ( ( A = B ) => ( unordered_pair(A, C) = unordered_pair(B, C) ) ) ))

  =>

% unordered_pair_substitution_2, axiom.
(( forall A B C. ( ( A = B ) => ( unordered_pair(C, A) = unordered_pair(C, B) ) ) ))

  =>

% empty_substitution_1, axiom.
(( forall A B. ( ( ( A = B ) & empty(A) ) => empty(B) ) ))

  =>

% ilf_type_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & ilf_type(A, C) ) => ilf_type(B, C) ) ))

  =>

% ilf_type_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & ilf_type(C, A) ) => ilf_type(C, B) ) ))

  =>

% member_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & member(A, C) ) => member(B, C) ) ))

  =>

% member_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & member(C, A) ) => member(C, B) ) ))

  =>

% relation_like_substitution_1, axiom.
(( forall A B. ( ( ( A = B ) & relation_like(A) ) => relation_like(B) ) ))

  =>

% p1, axiom.
(( forall B. ( ilf_type(B, set_type) => ( forall C. ( ilf_type(C, set_type) => ( forall D. ( ilf_type(D, binary_relation_type) => ( forall E. ( ilf_type(E, binary_relation_type) => ( member(ordered_pair(B, C), compose(D, E)) <=> ( exists F. ( ilf_type(F, set_type) & ( member(ordered_pair(B, F), D) & member(ordered_pair(F, C), E) ) ) ) ) ) ) ) ) ) ) ) ))

  =>

% p2, axiom.
(( forall B. ( ilf_type(B, set_type) => ( forall C. ( ilf_type(C, set_type) => ( forall D. ( ilf_type(D, set_type) => ( forall E. ( ilf_type(E, set_type) => ( forall F. ( ilf_type(F, relation_type(B, C)) => ( member(ordered_pair(D, E), F) => ( member(D, B) & member(E, C) ) ) ) ) ) ) ) ) ) ) ) ))

  =>

% p3, axiom.
(( forall B. ( ilf_type(B, set_type) => ( forall C. ( ilf_type(C, set_type) => ( forall D. ( ilf_type(D, set_type) => ( forall E. ( ilf_type(E, set_type) => ( forall F. ( ilf_type(F, set_type) => ( ( F = ordered_pair(D, E) ) <=> ( F = unordered_pair(unordered_pair(D, E), singleton(D)) ) ) ) ) ) ) ) ) ) ) ) ))

  =>

% p4, axiom.
(( forall B. ( ilf_type(B, set_type) => ( forall C. ( ilf_type(C, set_type) => ilf_type(ordered_pair(B, C), set_type) ) ) ) ))

  =>

% p5, axiom.
(( forall B. ( ilf_type(B, set_type) => ( forall C. ( ilf_type(C, set_type) => ( ( forall D. ( ilf_type(D, subset_type(cross_product(B, C))) => ilf_type(D, relation_type(B, C)) ) ) & ( forall E. ( ilf_type(E, relation_type(B, C)) => ilf_type(E, subset_type(cross_product(B, C))) ) ) ) ) ) ) ))

  =>

% p6, axiom.
(( forall B. ( ilf_type(B, set_type) => ( forall C. ( ilf_type(C, set_type) => ( exists D. ilf_type(D, relation_type(C, B)) ) ) ) ) ))

  =>

% p7, axiom.
(( forall B. ( ilf_type(B, set_type) => ( forall C. ( ( ( ~ empty(C) ) & ilf_type(C, set_type) ) => ( ilf_type(B, member_type(C)) <=> member(B, C) ) ) ) ) ))

  =>

% p8, axiom.
(( forall B. ( ( ( ~ empty(B) ) & ilf_type(B, set_type) ) => ( exists C. ilf_type(C, member_type(B)) ) ) ))

  =>

% p9, axiom.
(( forall B. ( ilf_type(B, set_type) => ( empty(B) <=> ( forall C. ( ilf_type(C, set_type) => ( ~ member(C, B) ) ) ) ) ) ))

  =>

% p10, axiom.
(( forall B. ( ilf_type(B, set_type) => ilf_type(singleton(B), set_type) ) ))

  =>

% p11, axiom.
(( forall B. ( ilf_type(B, set_type) => ( forall C. ( ilf_type(C, set_type) => ilf_type(cross_product(B, C), set_type) ) ) ) ))

  =>

% p12, axiom.
(( forall B. ( ilf_type(B, set_type) => ( forall C. ( ilf_type(C, set_type) => ilf_type(unordered_pair(B, C), set_type) ) ) ) ))

  =>

% p13, axiom.
(( forall B. ( ilf_type(B, set_type) => ( forall C. ( ilf_type(C, set_type) => ( unordered_pair(B, C) = unordered_pair(C, B) ) ) ) ) ))

  =>

% p14, axiom.
(( forall B. ( ilf_type(B, binary_relation_type) => ( forall C. ( ilf_type(C, binary_relation_type) => ilf_type(compose(B, C), binary_relation_type) ) ) ) ))

  =>

% p15, axiom.
(( forall B. ( ilf_type(B, set_type) => ( ilf_type(B, binary_relation_type) <=> ( relation_like(B) & ilf_type(B, set_type) ) ) ) ))

  =>

% p16, axiom.
(( exists B. ilf_type(B, binary_relation_type) ))

  =>

% p17, axiom.
(( forall B. ( ilf_type(B, set_type) => ( forall C. ( ilf_type(C, set_type) => ( ilf_type(C, subset_type(B)) <=> ilf_type(C, member_type(power_set(B))) ) ) ) ) ))

  =>

% p18, axiom.
(( forall B. ( ilf_type(B, set_type) => ( exists C. ilf_type(C, subset_type(B)) ) ) ))

  =>

% p19, axiom.
(( forall B. ( ilf_type(B, set_type) => ( forall C. ( ilf_type(C, set_type) => ( ( B = C ) <=> ( forall D. ( ilf_type(D, set_type) => ( member(D, B) <=> member(D, C) ) ) ) ) ) ) ) ))

  =>

% p20, axiom.
(( forall B. ( ilf_type(B, binary_relation_type) => ( forall C. ( ilf_type(C, binary_relation_type) => ( ( B = C ) => ( C = B ) ) ) ) ) ))

  =>

% p21, axiom.
(( forall B. ( ilf_type(B, binary_relation_type) => ( B = B ) ) ))

  =>

% p22, axiom.
(( forall B. ( ilf_type(B, set_type) => ( forall C. ( ilf_type(C, set_type) => ( member(B, power_set(C)) <=> ( forall D. ( ilf_type(D, set_type) => ( member(D, B) => member(D, C) ) ) ) ) ) ) ) ))

  =>

% p23, axiom.
(( forall B. ( ilf_type(B, set_type) => ( ( ~ empty(power_set(B)) ) & ilf_type(power_set(B), set_type) ) ) ))

  =>

% p24, axiom.
(( forall B. ( ilf_type(B, set_type) => ( relation_like(B) <=> ( forall C. ( ilf_type(C, set_type) => ( member(C, B) => ( exists D. ( ilf_type(D, set_type) & ( exists E. ( ilf_type(E, set_type) & ( C = ordered_pair(D, E) ) ) ) ) ) ) ) ) ) ) ))

  =>

% p25, axiom.
(( forall B. ( ( empty(B) & ilf_type(B, set_type) ) => relation_like(B) ) ))

  =>

% p26, axiom.
(( forall B. ( ilf_type(B, set_type) => ( forall C. ( ilf_type(C, set_type) => ( forall D. ( ilf_type(D, subset_type(cross_product(B, C))) => relation_like(D) ) ) ) ) ) ))

  =>

% p27, axiom.
(( forall B. ( ilf_type(B, set_type) => ( forall C. ( ilf_type(C, set_type) => ( forall D. ( ilf_type(D, set_type) => ( forall E. ( ilf_type(E, relation_type(B, C)) => ( forall F. ( ilf_type(F, relation_type(C, D)) => ( compose5(B, C, D, E, F) = compose(E, F) ) ) ) ) ) ) ) ) ) ) ))

  =>

% p28, axiom.
(( forall B. ( ilf_type(B, set_type) => ( forall C. ( ilf_type(C, set_type) => ( forall D. ( ilf_type(D, set_type) => ( forall E. ( ilf_type(E, relation_type(B, C)) => ( forall F. ( ilf_type(F, relation_type(C, D)) => ilf_type(compose5(B, C, D, E, F), relation_type(B, D)) ) ) ) ) ) ) ) ) ) ))

  =>

% p29, axiom.
(( forall B. ilf_type(B, set_type) ))

  =>

% prove_relset_1_51, conjecture.
(( forall B. ( ( ( ~ empty(B) ) & ilf_type(B, set_type) ) => ( forall C. ( ( ( ~ empty(C) ) & ilf_type(C, set_type) ) => ( forall D. ( ( ( ~ empty(D) ) & ilf_type(D, set_type) ) => ( forall E. ( ilf_type(E, relation_type(B, C)) => ( forall F. ( ilf_type(F, relation_type(C, D)) => ( forall G. ( ilf_type(G, member_type(B)) => ( forall H. ( ilf_type(H, member_type(D)) => ( member(ordered_pair(G, H), compose5(B, C, D, E, F)) <=> ( exists I. ( ilf_type(I, member_type(C)) & ( member(ordered_pair(G, I), E) & member(ordered_pair(I, H), F) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ))

 

%------------------------------------------------------------------------------
