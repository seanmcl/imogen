% File     : KRS133+1 : ILTP v1.1.2
% Domain   : Knowledge Representation (Semantic Web)
% Problem  : How to express mutual disjointness between classes
% Version  : Especial.
% English  : The construct used here shows how to express mutual disjointness 
%            between classes with  O(N) triples.
% Refs     : [Bec03] Bechhofer (2003), Email to G. Sutcliffe
%          : [TR+04] Tsarkov et al. (2004), Using Vampire to Reason with OW
% Source   : [Bec03]
% Names    : positive_I5.21-Manifest002 [Bec03]
% Status   : Theorem
% Rating   : 0.78 v3.1.0
%
% Status (intuit.) : Open
% Rating (intuit.) : 1.00 v1.1.0
%
% Syntax   : Number of formulae    :  125 (  78 unit)
%            Number of atoms       :  328 (  86 equality)
%            Maximal formula depth :   71 (   3 average)
%            Number of connectives :  339 ( 136 ~  ;   0  |; 156  &)
%                                         (   2 <=>;  45 =>;   0 <=)
%                                         (   0 <~>;   0 ~|;   0 ~&)
%            Number of predicates  :   19 (   0 propositional; 1-2 arity)
%            Number of functors    :   12 (  12 constant; 0-0 arity)
%            Number of variables   :  138 (   0 singleton; 137 !;   1 ?)
%            Maximal term depth    :    1 (   1 average)
% Comments : Sean Bechhofer says there are some errors in the encoding of
%            datatypes, so this problem may not be perfect. At least it's
%            still representative of the type of reasoning required for OWL.
%------------------------------------------------------------------------------

 

% reflexivity, axiom.
(( forall X. ( X = X ) ))

  =>

% symmetry, axiom.
(( forall X Y. ( ( X = Y ) => ( Y = X ) ) ))

  =>

% transitivity, axiom.
(( forall X Y Z. ( ( ( X = Y ) & ( Y = Z ) ) => ( X = Z ) ) ))

  =>

% cAgamidae_substitution_1, axiom.
(( forall A B. ( ( ( A = B ) & cAgamidae(A) ) => cAgamidae(B) ) ))

  =>

% cAmphisbaenidae_substitution_1, axiom.
(( forall A B. ( ( ( A = B ) & cAmphisbaenidae(A) ) => cAmphisbaenidae(B) ) ))

  =>

% cAnomalepidae_substitution_1, axiom.
(( forall A B. ( ( ( A = B ) & cAnomalepidae(A) ) => cAnomalepidae(B) ) ))

  =>

% cBipedidae_substitution_1, axiom.
(( forall A B. ( ( ( A = B ) & cBipedidae(A) ) => cBipedidae(B) ) ))

  =>

% cCordylidae_substitution_1, axiom.
(( forall A B. ( ( ( A = B ) & cCordylidae(A) ) => cCordylidae(B) ) ))

  =>

% cCrocodylidae_substitution_1, axiom.
(( forall A B. ( ( ( A = B ) & cCrocodylidae(A) ) => cCrocodylidae(B) ) ))

  =>

% cEmydidae_substitution_1, axiom.
(( forall A B. ( ( ( A = B ) & cEmydidae(A) ) => cEmydidae(B) ) ))

  =>

% cGekkonidae_substitution_1, axiom.
(( forall A B. ( ( ( A = B ) & cGekkonidae(A) ) => cGekkonidae(B) ) ))

  =>

% cLeptotyphlopidae_substitution_1, axiom.
(( forall A B. ( ( ( A = B ) & cLeptotyphlopidae(A) ) => cLeptotyphlopidae(B) ) ))

  =>

% cLoxocemidae_substitution_1, axiom.
(( forall A B. ( ( ( A = B ) & cLoxocemidae(A) ) => cLoxocemidae(B) ) ))

  =>

% cReptile_substitution_1, axiom.
(( forall A B. ( ( ( A = B ) & cReptile(A) ) => cReptile(B) ) ))

  =>

% cSphenodontidae_substitution_1, axiom.
(( forall A B. ( ( ( A = B ) & cSphenodontidae(A) ) => cSphenodontidae(B) ) ))

  =>

% cXantusiidae_substitution_1, axiom.
(( forall A B. ( ( ( A = B ) & cXantusiidae(A) ) => cXantusiidae(B) ) ))

  =>

% cowlNothing_substitution_1, axiom.
(( forall A B. ( ( ( A = B ) & cowlNothing(A) ) => cowlNothing(B) ) ))

  =>

% cowlThing_substitution_1, axiom.
(( forall A B. ( ( ( A = B ) & cowlThing(A) ) => cowlThing(B) ) ))

  =>

% rfamily_name_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & rfamily_name(A, C) ) => rfamily_name(B, C) ) ))

  =>

% rfamily_name_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & rfamily_name(C, A) ) => rfamily_name(C, B) ) ))

  =>

% xsd_integer_substitution_1, axiom.
(( forall A B. ( ( ( A = B ) & xsd_integer(A) ) => xsd_integer(B) ) ))

  =>

% xsd_string_substitution_1, axiom.
(( forall A B. ( ( ( A = B ) & xsd_string(A) ) => xsd_string(B) ) ))

  =>

% axiom_0, axiom.
(( forall X. ( cowlThing(X) & ( ~ cowlNothing(X) ) ) ))

  =>

% axiom_1, axiom.
(( forall X. ( xsd_string(X) <=> ( ~ xsd_integer(X) ) ) ))

  =>

% axiom_2, axiom.
(xsd_string(xsd_string_0))

  =>

% axiom_3, axiom.
(( forall X. ( cAgamidae(X) => rfamily_name(X, xsd_string_0) ) ))

  =>

% axiom_4, axiom.
(( forall X. ( cAgamidae(X) => cReptile(X) ) ))

  =>

% axiom_5, axiom.
(xsd_string(xsd_string_1))

  =>

% axiom_6, axiom.
(( forall X. ( cAmphisbaenidae(X) => rfamily_name(X, xsd_string_1) ) ))

  =>

% axiom_7, axiom.
(( forall X. ( cAmphisbaenidae(X) => cReptile(X) ) ))

  =>

% axiom_8, axiom.
(xsd_string(xsd_string_2))

  =>

% axiom_9, axiom.
(( forall X. ( cAnomalepidae(X) => rfamily_name(X, xsd_string_2) ) ))

  =>

% axiom_10, axiom.
(( forall X. ( cAnomalepidae(X) => cReptile(X) ) ))

  =>

% axiom_11, axiom.
(xsd_string(xsd_string_3))

  =>

% axiom_12, axiom.
(( forall X. ( cBipedidae(X) => rfamily_name(X, xsd_string_3) ) ))

  =>

% axiom_13, axiom.
(( forall X. ( cBipedidae(X) => cReptile(X) ) ))

  =>

% axiom_14, axiom.
(xsd_string(xsd_string_4))

  =>

% axiom_15, axiom.
(( forall X. ( cCordylidae(X) => rfamily_name(X, xsd_string_4) ) ))

  =>

% axiom_16, axiom.
(( forall X. ( cCordylidae(X) => cReptile(X) ) ))

  =>

% axiom_17, axiom.
(xsd_string(xsd_string_5))

  =>

% axiom_18, axiom.
(( forall X. ( cCrocodylidae(X) => rfamily_name(X, xsd_string_5) ) ))

  =>

% axiom_19, axiom.
(( forall X. ( cCrocodylidae(X) => cReptile(X) ) ))

  =>

% axiom_20, axiom.
(xsd_string(xsd_string_6))

  =>

% axiom_21, axiom.
(( forall X. ( cEmydidae(X) => rfamily_name(X, xsd_string_6) ) ))

  =>

% axiom_22, axiom.
(( forall X. ( cEmydidae(X) => cReptile(X) ) ))

  =>

% axiom_23, axiom.
(xsd_string(xsd_string_7))

  =>

% axiom_24, axiom.
(( forall X. ( cGekkonidae(X) => rfamily_name(X, xsd_string_7) ) ))

  =>

% axiom_25, axiom.
(( forall X. ( cGekkonidae(X) => cReptile(X) ) ))

  =>

% axiom_26, axiom.
(xsd_string(xsd_string_8))

  =>

% axiom_27, axiom.
(( forall X. ( cLeptotyphlopidae(X) => rfamily_name(X, xsd_string_8) ) ))

  =>

% axiom_28, axiom.
(( forall X. ( cLeptotyphlopidae(X) => cReptile(X) ) ))

  =>

% axiom_29, axiom.
(xsd_string(xsd_string_9))

  =>

% axiom_30, axiom.
(( forall X. ( cLoxocemidae(X) => rfamily_name(X, xsd_string_9) ) ))

  =>

% axiom_31, axiom.
(( forall X. ( cLoxocemidae(X) => cReptile(X) ) ))

  =>

% axiom_32, axiom.
(( forall X. ( cReptile(X) => ( ( exists Y0. rfamily_name(X, Y0) ) & ( forall Y0 Y1. ( ( rfamily_name(X, Y0) & rfamily_name(X, Y1) ) => ( Y0 = Y1 ) ) ) ) ) ))

  =>

% axiom_33, axiom.
(xsd_string(xsd_string_10))

  =>

% axiom_34, axiom.
(( forall X. ( cSphenodontidae(X) => rfamily_name(X, xsd_string_10) ) ))

  =>

% axiom_35, axiom.
(( forall X. ( cSphenodontidae(X) => cReptile(X) ) ))

  =>

% axiom_36, axiom.
(xsd_string(xsd_string_11))

  =>

% axiom_37, axiom.
(( forall X. ( cXantusiidae(X) => rfamily_name(X, xsd_string_11) ) ))

  =>

% axiom_38, axiom.
(( forall X. ( cXantusiidae(X) => cReptile(X) ) ))

  =>

% axiom_39, axiom.
(( ~ ( xsd_string_0 = xsd_string_1 ) ))

  =>

% axiom_40, axiom.
(( ~ ( xsd_string_0 = xsd_string_2 ) ))

  =>

% axiom_41, axiom.
(( ~ ( xsd_string_0 = xsd_string_3 ) ))

  =>

% axiom_42, axiom.
(( ~ ( xsd_string_0 = xsd_string_4 ) ))

  =>

% axiom_43, axiom.
(( ~ ( xsd_string_0 = xsd_string_5 ) ))

  =>

% axiom_44, axiom.
(( ~ ( xsd_string_0 = xsd_string_6 ) ))

  =>

% axiom_45, axiom.
(( ~ ( xsd_string_0 = xsd_string_7 ) ))

  =>

% axiom_46, axiom.
(( ~ ( xsd_string_0 = xsd_string_8 ) ))

  =>

% axiom_47, axiom.
(( ~ ( xsd_string_0 = xsd_string_9 ) ))

  =>

% axiom_48, axiom.
(( ~ ( xsd_string_0 = xsd_string_10 ) ))

  =>

% axiom_49, axiom.
(( ~ ( xsd_string_0 = xsd_string_11 ) ))

  =>

% axiom_50, axiom.
(( ~ ( xsd_string_1 = xsd_string_2 ) ))

  =>

% axiom_51, axiom.
(( ~ ( xsd_string_1 = xsd_string_3 ) ))

  =>

% axiom_52, axiom.
(( ~ ( xsd_string_1 = xsd_string_4 ) ))

  =>

% axiom_53, axiom.
(( ~ ( xsd_string_1 = xsd_string_5 ) ))

  =>

% axiom_54, axiom.
(( ~ ( xsd_string_1 = xsd_string_6 ) ))

  =>

% axiom_55, axiom.
(( ~ ( xsd_string_1 = xsd_string_7 ) ))

  =>

% axiom_56, axiom.
(( ~ ( xsd_string_1 = xsd_string_8 ) ))

  =>

% axiom_57, axiom.
(( ~ ( xsd_string_1 = xsd_string_9 ) ))

  =>

% axiom_58, axiom.
(( ~ ( xsd_string_1 = xsd_string_10 ) ))

  =>

% axiom_59, axiom.
(( ~ ( xsd_string_1 = xsd_string_11 ) ))

  =>

% axiom_60, axiom.
(( ~ ( xsd_string_2 = xsd_string_3 ) ))

  =>

% axiom_61, axiom.
(( ~ ( xsd_string_2 = xsd_string_4 ) ))

  =>

% axiom_62, axiom.
(( ~ ( xsd_string_2 = xsd_string_5 ) ))

  =>

% axiom_63, axiom.
(( ~ ( xsd_string_2 = xsd_string_6 ) ))

  =>

% axiom_64, axiom.
(( ~ ( xsd_string_2 = xsd_string_7 ) ))

  =>

% axiom_65, axiom.
(( ~ ( xsd_string_2 = xsd_string_8 ) ))

  =>

% axiom_66, axiom.
(( ~ ( xsd_string_2 = xsd_string_9 ) ))

  =>

% axiom_67, axiom.
(( ~ ( xsd_string_2 = xsd_string_10 ) ))

  =>

% axiom_68, axiom.
(( ~ ( xsd_string_2 = xsd_string_11 ) ))

  =>

% axiom_69, axiom.
(( ~ ( xsd_string_3 = xsd_string_4 ) ))

  =>

% axiom_70, axiom.
(( ~ ( xsd_string_3 = xsd_string_5 ) ))

  =>

% axiom_71, axiom.
(( ~ ( xsd_string_3 = xsd_string_6 ) ))

  =>

% axiom_72, axiom.
(( ~ ( xsd_string_3 = xsd_string_7 ) ))

  =>

% axiom_73, axiom.
(( ~ ( xsd_string_3 = xsd_string_8 ) ))

  =>

% axiom_74, axiom.
(( ~ ( xsd_string_3 = xsd_string_9 ) ))

  =>

% axiom_75, axiom.
(( ~ ( xsd_string_3 = xsd_string_10 ) ))

  =>

% axiom_76, axiom.
(( ~ ( xsd_string_3 = xsd_string_11 ) ))

  =>

% axiom_77, axiom.
(( ~ ( xsd_string_4 = xsd_string_5 ) ))

  =>

% axiom_78, axiom.
(( ~ ( xsd_string_4 = xsd_string_6 ) ))

  =>

% axiom_79, axiom.
(( ~ ( xsd_string_4 = xsd_string_7 ) ))

  =>

% axiom_80, axiom.
(( ~ ( xsd_string_4 = xsd_string_8 ) ))

  =>

% axiom_81, axiom.
(( ~ ( xsd_string_4 = xsd_string_9 ) ))

  =>

% axiom_82, axiom.
(( ~ ( xsd_string_4 = xsd_string_10 ) ))

  =>

% axiom_83, axiom.
(( ~ ( xsd_string_4 = xsd_string_11 ) ))

  =>

% axiom_84, axiom.
(( ~ ( xsd_string_5 = xsd_string_6 ) ))

  =>

% axiom_85, axiom.
(( ~ ( xsd_string_5 = xsd_string_7 ) ))

  =>

% axiom_86, axiom.
(( ~ ( xsd_string_5 = xsd_string_8 ) ))

  =>

% axiom_87, axiom.
(( ~ ( xsd_string_5 = xsd_string_9 ) ))

  =>

% axiom_88, axiom.
(( ~ ( xsd_string_5 = xsd_string_10 ) ))

  =>

% axiom_89, axiom.
(( ~ ( xsd_string_5 = xsd_string_11 ) ))

  =>

% axiom_90, axiom.
(( ~ ( xsd_string_6 = xsd_string_7 ) ))

  =>

% axiom_91, axiom.
(( ~ ( xsd_string_6 = xsd_string_8 ) ))

  =>

% axiom_92, axiom.
(( ~ ( xsd_string_6 = xsd_string_9 ) ))

  =>

% axiom_93, axiom.
(( ~ ( xsd_string_6 = xsd_string_10 ) ))

  =>

% axiom_94, axiom.
(( ~ ( xsd_string_6 = xsd_string_11 ) ))

  =>

% axiom_95, axiom.
(( ~ ( xsd_string_7 = xsd_string_8 ) ))

  =>

% axiom_96, axiom.
(( ~ ( xsd_string_7 = xsd_string_9 ) ))

  =>

% axiom_97, axiom.
(( ~ ( xsd_string_7 = xsd_string_10 ) ))

  =>

% axiom_98, axiom.
(( ~ ( xsd_string_7 = xsd_string_11 ) ))

  =>

% axiom_99, axiom.
(( ~ ( xsd_string_8 = xsd_string_9 ) ))

  =>

% axiom_100, axiom.
(( ~ ( xsd_string_8 = xsd_string_10 ) ))

  =>

% axiom_101, axiom.
(( ~ ( xsd_string_8 = xsd_string_11 ) ))

  =>

% axiom_102, axiom.
(( ~ ( xsd_string_9 = xsd_string_10 ) ))

  =>

% axiom_103, axiom.
(( ~ ( xsd_string_9 = xsd_string_11 ) ))

  =>

% axiom_104, axiom.
(( ~ ( xsd_string_10 = xsd_string_11 ) ))

  =>

% the_axiom, conjecture.
(( ( forall X. ( cowlThing(X) & ( ~ cowlNothing(X) ) ) ) & ( ( forall X. ( xsd_string(X) <=> ( ~ xsd_integer(X) ) ) ) & ( ( forall X. ( ~ ( cLeptotyphlopidae(X) & cBipedidae(X) ) ) ) & ( ( forall X. ( ~ ( cBipedidae(X) & cAnomalepidae(X) ) ) ) & ( ( forall X. ( ~ ( cLeptotyphlopidae(X) & cGekkonidae(X) ) ) ) & ( ( forall X. ( ~ ( cAmphisbaenidae(X) & cSphenodontidae(X) ) ) ) & ( ( forall X. ( ~ ( cBipedidae(X) & cCrocodylidae(X) ) ) ) & ( ( forall X. ( ~ ( cBipedidae(X) & cGekkonidae(X) ) ) ) & ( ( forall X. ( ~ ( cBipedidae(X) & cSphenodontidae(X) ) ) ) & ( ( forall X. ( ~ ( cGekkonidae(X) & cCrocodylidae(X) ) ) ) & ( ( forall X. ( ~ ( cGekkonidae(X) & cSphenodontidae(X) ) ) ) & ( ( forall X. ( ~ ( cAgamidae(X) & cSphenodontidae(X) ) ) ) & ( ( forall X. ( ~ ( cAnomalepidae(X) & cCrocodylidae(X) ) ) ) & ( ( forall X. ( ~ ( cCrocodylidae(X) & cEmydidae(X) ) ) ) & ( ( forall X. ( ~ ( cAmphisbaenidae(X) & cLoxocemidae(X) ) ) ) & ( ( forall X. ( ~ ( cLeptotyphlopidae(X) & cAgamidae(X) ) ) ) & ( ( forall X. ( ~ ( cAmphisbaenidae(X) & cCrocodylidae(X) ) ) ) & ( ( forall X. ( ~ ( cCrocodylidae(X) & cLoxocemidae(X) ) ) ) & ( ( forall X. ( ~ ( cXantusiidae(X) & cCrocodylidae(X) ) ) ) & ( ( forall X. ( ~ ( cBipedidae(X) & cEmydidae(X) ) ) ) & ( ( forall X. ( ~ ( cAmphisbaenidae(X) & cEmydidae(X) ) ) ) & ( ( forall X. ( ~ ( cAgamidae(X) & cCrocodylidae(X) ) ) ) & ( ( forall X. ( ~ ( cXantusiidae(X) & cLoxocemidae(X) ) ) ) & ( ( forall X. ( ~ ( cXantusiidae(X) & cEmydidae(X) ) ) ) & ( ( forall X. ( ~ ( cBipedidae(X) & cLoxocemidae(X) ) ) ) & ( ( forall X. ( ~ ( cBipedidae(X) & cAgamidae(X) ) ) ) & ( ( forall X. ( ~ ( cGekkonidae(X) & cAmphisbaenidae(X) ) ) ) & ( ( forall X. ( ~ ( cLeptotyphlopidae(X) & cCrocodylidae(X) ) ) ) & ( ( forall X. ( ~ ( cSphenodontidae(X) & cCordylidae(X) ) ) ) & ( ( forall X. ( ~ ( cAmphisbaenidae(X) & cCordylidae(X) ) ) ) & ( ( forall X. ( ~ ( cCordylidae(X) & cLoxocemidae(X) ) ) ) & ( ( forall X. ( ~ ( cGekkonidae(X) & cCordylidae(X) ) ) ) & ( ( forall X. ( ~ ( cXantusiidae(X) & cAgamidae(X) ) ) ) & ( ( forall X. ( ~ ( cAnomalepidae(X) & cCordylidae(X) ) ) ) & ( ( forall X. ( ~ ( cAgamidae(X) & cEmydidae(X) ) ) ) & ( ( forall X. ( ~ ( cCordylidae(X) & cEmydidae(X) ) ) ) & ( ( forall X. ( ~ ( cAgamidae(X) & cLoxocemidae(X) ) ) ) & ( ( forall X. ( ~ ( cXantusiidae(X) & cGekkonidae(X) ) ) ) & ( ( forall X. ( ~ ( cXantusiidae(X) & cBipedidae(X) ) ) ) & ( ( forall X. ( ~ ( cAnomalepidae(X) & cEmydidae(X) ) ) ) & ( ( forall X. ( ~ ( cXantusiidae(X) & cSphenodontidae(X) ) ) ) & ( ( forall X. ( ~ ( cLeptotyphlopidae(X) & cAmphisbaenidae(X) ) ) ) & ( ( forall X. ( ~ ( cSphenodontidae(X) & cEmydidae(X) ) ) ) & ( ( forall X. ( ~ ( cLeptotyphlopidae(X) & cCordylidae(X) ) ) ) & ( ( forall X. ( ~ ( cGekkonidae(X) & cAnomalepidae(X) ) ) ) & ( ( forall X. ( ~ ( cBipedidae(X) & cCordylidae(X) ) ) ) & ( ( forall X. ( ~ ( cBipedidae(X) & cAmphisbaenidae(X) ) ) ) & ( ( forall X. ( ~ ( cXantusiidae(X) & cCordylidae(X) ) ) ) & ( ( forall X. ( ~ ( cAnomalepidae(X) & cAgamidae(X) ) ) ) & ( ( forall X. ( ~ ( cSphenodontidae(X) & cCrocodylidae(X) ) ) ) & ( ( forall X. ( ~ ( cXantusiidae(X) & cAmphisbaenidae(X) ) ) ) & ( ( forall X. ( ~ ( cGekkonidae(X) & cEmydidae(X) ) ) ) & ( ( forall X. ( ~ ( cSphenodontidae(X) & cLoxocemidae(X) ) ) ) & ( ( forall X. ( ~ ( cLeptotyphlopidae(X) & cEmydidae(X) ) ) ) & ( ( forall X. ( ~ ( cAmphisbaenidae(X) & cAnomalepidae(X) ) ) ) & ( ( forall X. ( ~ ( cGekkonidae(X) & cLoxocemidae(X) ) ) ) & ( ( forall X. ( ~ ( cAnomalepidae(X) & cLoxocemidae(X) ) ) ) & ( ( forall X. ( ~ ( cLeptotyphlopidae(X) & cAnomalepidae(X) ) ) ) & ( ( forall X. ( ~ ( cCordylidae(X) & cCrocodylidae(X) ) ) ) & ( ( forall X. ( ~ ( cXantusiidae(X) & cAnomalepidae(X) ) ) ) & ( ( forall X. ( ~ ( cAnomalepidae(X) & cSphenodontidae(X) ) ) ) & ( ( forall X. ( ~ ( cLeptotyphlopidae(X) & cXantusiidae(X) ) ) ) & ( ( forall X. ( ~ ( cGekkonidae(X) & cAgamidae(X) ) ) ) & ( ( forall X. ( ~ ( cAgamidae(X) & cCordylidae(X) ) ) ) & ( ( forall X. ( ~ ( cLeptotyphlopidae(X) & cLoxocemidae(X) ) ) ) & ( ( forall X. ( ~ ( cEmydidae(X) & cLoxocemidae(X) ) ) ) & ( ( forall X. ( ~ ( cLeptotyphlopidae(X) & cSphenodontidae(X) ) ) ) & ( forall X. ( ~ ( cAmphisbaenidae(X) & cAgamidae(X) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ))

 

%------------------------------------------------------------------------------
