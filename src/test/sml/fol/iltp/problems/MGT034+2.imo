% File     : MGT034+2 : ILTP v1.1.2
% Domain   : Management (Organisation Theory)
% Problem  : Selection favors FMs above EPs until critical point reached
% Version  : [PM93] axioms.
% English  : Selection favors first movers above efficient producers past 
%            the appearance of efficient producers until the critical
%            point is reached. 
% Refs     : [PM93]  Peli & Masuch (1993), The Logic of Propogation Strateg
%          : [PM94]  Peli & Masuch (1994), The Logic of Propogation Strateg
%          : [PB+94] Peli et al. (1994), A Logical Approach to Formalizing
% Source   : [PM93]
% Names    : THEOREM 3 [PM93]
%          : T3 [PB+94]
% Status   : Theorem
%
% Status (intuit.) : Open
% Rating (intuit.) : 1.00 v1.0.0
% Rating (intuit.) : 1.00 v1.1
%
% Syntax   : Number of formulae    :   21 (   0 unit)
%            Number of atoms       :   80 (   2 equality)
%            Maximal formula depth :   10 (   6 average)
%            Number of connectives :   63 (   4 ~  ;   1  |;  35  &)
%                                         (   3 <=>;  20 =>;   0 <=)
%                                         (   0 <~>;   0 ~|;   0 ~&)
%            Number of predicates  :    8 (   0 propositional; 1-4 arity)
%            Number of functors    :   11 (   3 constant; 0-2 arity)
%            Number of variables   :   43 (   0 singleton;  43 !;   0 ?)
%            Maximal term depth    :    3 (   1 average)
% Comments : 
%------------------------------------------------------------------------------

 

% reflexivity, axiom.
(( forall X. ( X = X ) ))

  =>

% symmetry, axiom.
(( forall X Y. ( ( X = Y ) => ( Y = X ) ) ))

  =>

% transitivity, axiom.
(( forall X Y Z. ( ( ( X = Y ) & ( Y = Z ) ) => ( X = Z ) ) ))

  =>

% appear_substitution_1, axiom.
(( forall A B C. ( ( A = B ) => ( appear(A, C) = appear(B, C) ) ) ))

  =>

% appear_substitution_2, axiom.
(( forall A B C. ( ( A = B ) => ( appear(C, A) = appear(C, B) ) ) ))

  =>

% cardinality_at_time_substitution_1, axiom.
(( forall A B C. ( ( A = B ) => ( cardinality_at_time(A, C) = cardinality_at_time(B, C) ) ) ))

  =>

% cardinality_at_time_substitution_2, axiom.
(( forall A B C. ( ( A = B ) => ( cardinality_at_time(C, A) = cardinality_at_time(C, B) ) ) ))

  =>

% critical_point_substitution_1, axiom.
(( forall A B. ( ( A = B ) => ( critical_point(A) = critical_point(B) ) ) ))

  =>

% difference_substitution_1, axiom.
(( forall A B C. ( ( A = B ) => ( difference(A, C) = difference(B, C) ) ) ))

  =>

% difference_substitution_2, axiom.
(( forall A B C. ( ( A = B ) => ( difference(C, A) = difference(C, B) ) ) ))

  =>

% disbanding_rate_substitution_1, axiom.
(( forall A B C. ( ( A = B ) => ( disbanding_rate(A, C) = disbanding_rate(B, C) ) ) ))

  =>

% disbanding_rate_substitution_2, axiom.
(( forall A B C. ( ( A = B ) => ( disbanding_rate(C, A) = disbanding_rate(C, B) ) ) ))

  =>

% founding_rate_substitution_1, axiom.
(( forall A B C. ( ( A = B ) => ( founding_rate(A, C) = founding_rate(B, C) ) ) ))

  =>

% founding_rate_substitution_2, axiom.
(( forall A B C. ( ( A = B ) => ( founding_rate(C, A) = founding_rate(C, B) ) ) ))

  =>

% growth_rate_substitution_1, axiom.
(( forall A B C. ( ( A = B ) => ( growth_rate(A, C) = growth_rate(B, C) ) ) ))

  =>

% growth_rate_substitution_2, axiom.
(( forall A B C. ( ( A = B ) => ( growth_rate(C, A) = growth_rate(C, B) ) ) ))

  =>

% start_time_substitution_1, axiom.
(( forall A B. ( ( A = B ) => ( start_time(A) = start_time(B) ) ) ))

  =>

% decreases_substitution_1, axiom.
(( forall A B. ( ( ( A = B ) & decreases(A) ) => decreases(B) ) ))

  =>

% environment_substitution_1, axiom.
(( forall A B. ( ( ( A = B ) & environment(A) ) => environment(B) ) ))

  =>

% greater_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & greater(A, C) ) => greater(B, C) ) ))

  =>

% greater_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & greater(C, A) ) => greater(C, B) ) ))

  =>

% greater_or_equal_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & greater_or_equal(A, C) ) => greater_or_equal(B, C) ) ))

  =>

% greater_or_equal_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & greater_or_equal(C, A) ) => greater_or_equal(C, B) ) ))

  =>

% in_environment_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & in_environment(A, C) ) => in_environment(B, C) ) ))

  =>

% in_environment_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & in_environment(C, A) ) => in_environment(C, B) ) ))

  =>

% selection_favors_substitution_1, axiom.
(( forall A B C D. ( ( ( A = B ) & selection_favors(A, C, D) ) => selection_favors(B, C, D) ) ))

  =>

% selection_favors_substitution_2, axiom.
(( forall A B C D. ( ( ( A = B ) & selection_favors(C, A, D) ) => selection_favors(C, B, D) ) ))

  =>

% selection_favors_substitution_3, axiom.
(( forall A B C D. ( ( ( A = B ) & selection_favors(C, D, A) ) => selection_favors(C, D, B) ) ))

  =>

% subpopulations_substitution_1, axiom.
(( forall A B C D E. ( ( ( A = B ) & subpopulations(A, C, D, E) ) => subpopulations(B, C, D, E) ) ))

  =>

% subpopulations_substitution_2, axiom.
(( forall A B C D E. ( ( ( A = B ) & subpopulations(C, A, D, E) ) => subpopulations(C, B, D, E) ) ))

  =>

% subpopulations_substitution_3, axiom.
(( forall A B C D E. ( ( ( A = B ) & subpopulations(C, D, A, E) ) => subpopulations(C, D, B, E) ) ))

  =>

% subpopulations_substitution_4, axiom.
(( forall A B C D E. ( ( ( A = B ) & subpopulations(C, D, E, A) ) => subpopulations(C, D, E, B) ) ))

  =>

% mp1_high_growth_rates, axiom.
(( forall E S1 S2 T. ( ( environment(E) & ( subpopulations(S1, S2, E, T) & greater(growth_rate(S2, T), growth_rate(S1, T)) ) ) => selection_favors(S2, S1, T) ) ))

  =>

% l3, axiom.
(( forall E T. ( ( environment(E) & subpopulations(first_movers, efficient_producers, E, T) ) => ( ~ decreases(difference(disbanding_rate(first_movers, T), disbanding_rate(efficient_producers, T))) ) ) ))

  =>

% mp_critical_point_means_FM_and_EP, axiom.
(( forall E. ( ( environment(E) & in_environment(E, critical_point(E)) ) => subpopulations(first_movers, efficient_producers, E, critical_point(E)) ) ))

  =>

% mp_FM_and_EP_when_EP_appears, axiom.
(( forall E. ( ( environment(E) & in_environment(E, appear(efficient_producers, E)) ) => subpopulations(first_movers, efficient_producers, E, appear(efficient_producers, E)) ) ))

  =>

% mp_difference_between_founding_rates, axiom.
(( forall T. ( ( decreases(difference(founding_rate(first_movers, T), founding_rate(efficient_producers, T))) & ( ~ decreases(difference(disbanding_rate(first_movers, T), disbanding_rate(efficient_producers, T))) ) ) => decreases(difference(growth_rate(first_movers, T), growth_rate(efficient_producers, T))) ) ))

  =>

% mp_decreasing_function, axiom.
(( forall E T To. ( ( environment(E) & ( in_environment(E, To) & ( greater_or_equal(difference(growth_rate(first_movers, To), growth_rate(efficient_producers, To)), zero) & ( greater_or_equal(T, appear(efficient_producers, E)) & greater(To, T) ) ) ) ) => ( decreases(difference(growth_rate(first_movers, T), growth_rate(efficient_producers, T))) => greater(difference(growth_rate(first_movers, T), growth_rate(efficient_producers, T)), zero) ) ) ))

  =>

% mp_negative_growth_rate_difference, axiom.
(( forall T. ( greater(zero, difference(growth_rate(first_movers, T), growth_rate(efficient_producers, T))) <=> greater(growth_rate(efficient_producers, T), growth_rate(first_movers, T)) ) ))

  =>

% mp_positive_growth_rate_difference, axiom.
(( forall T. ( greater(difference(growth_rate(first_movers, T), growth_rate(efficient_producers, T)), zero) <=> greater(growth_rate(first_movers, T), growth_rate(efficient_producers, T)) ) ))

  =>

% mp_durations_are_time_intervals, axiom.
(( forall E T1 T2 T. ( ( environment(E) & ( in_environment(E, T1) & ( in_environment(E, T2) & ( greater_or_equal(T2, T) & greater_or_equal(T, T1) ) ) ) ) => in_environment(E, T) ) ))

  =>

% mp_opening_time_in_duration, axiom.
(( forall E. ( environment(E) => in_environment(E, start_time(E)) ) ))

  =>

% mp_no_FM_before_opening, axiom.
(( forall E. ( environment(E) => greater_or_equal(appear(first_movers, E), start_time(E)) ) ))

  =>

% mp_critical_time_points, axiom.
(( forall E T. ( ( environment(E) & ( in_environment(E, critical_point(E)) & ( greater_or_equal(T, appear(efficient_producers, E)) & greater(critical_point(E), T) ) ) ) => in_environment(E, T) ) ))

  =>

% mp_contains_FM_and_EP, axiom.
(( forall E T. ( ( environment(E) & ( in_environment(E, T) & ( greater(cardinality_at_time(first_movers, T), zero) & greater(cardinality_at_time(efficient_producers, T), zero) ) ) ) => subpopulations(first_movers, efficient_producers, E, T) ) ))

  =>

% mp_symmetry_of_subpopulations, axiom.
(( forall E T. ( ( environment(E) & subpopulations(first_movers, efficient_producers, E, T) ) => subpopulations(efficient_producers, first_movers, E, T) ) ))

  =>

% mp_FM_and_EP_members_EP_appeared, axiom.
(( forall E T. ( ( environment(E) & subpopulations(first_movers, efficient_producers, E, T) ) => greater_or_equal(T, appear(efficient_producers, E)) ) ))

  =>

% mp_greater_or_equal, axiom.
(( forall X Y. ( greater_or_equal(X, Y) <=> ( greater(X, Y) | ( X = Y ) ) ) ))

  =>

% mp_relationship_of_growth_rates, axiom.
(( forall E T. ( ( environment(E) & ( subpopulations(first_movers, efficient_producers, E, T) & ( ~ greater(zero, difference(growth_rate(first_movers, T), growth_rate(efficient_producers, T))) ) ) ) => greater_or_equal(difference(growth_rate(first_movers, T), growth_rate(efficient_producers, T)), zero) ) ))

  =>

% d1, hypothesis.
(( forall E Tc. ( ( environment(E) & ( Tc = critical_point(E) ) ) => ( ( ~ greater(growth_rate(efficient_producers, Tc), growth_rate(first_movers, Tc)) ) & ( forall T. ( ( subpopulations(first_movers, efficient_producers, E, T) & greater(T, Tc) ) => greater(growth_rate(efficient_producers, T), growth_rate(first_movers, T)) ) ) ) ) ))

  =>

% a10, hypothesis.
(( forall E T1 T2 T. ( ( environment(E) & ( subpopulations(first_movers, efficient_producers, E, T1) & ( subpopulations(first_movers, efficient_producers, E, T2) & ( greater_or_equal(T, T1) & greater_or_equal(T2, T) ) ) ) ) => subpopulations(first_movers, efficient_producers, E, T) ) ))

  =>

% a12, hypothesis.
(( forall E T. ( ( environment(E) & subpopulations(first_movers, efficient_producers, E, T) ) => decreases(difference(founding_rate(first_movers, T), founding_rate(efficient_producers, T))) ) ))

  =>

% prove_t3, conjecture.
(( forall E T. ( ( environment(E) & ( in_environment(E, critical_point(E)) & ( greater_or_equal(T, appear(efficient_producers, E)) & greater(critical_point(E), T) ) ) ) => selection_favors(first_movers, efficient_producers, T) ) ))

 

%------------------------------------------------------------------------------
