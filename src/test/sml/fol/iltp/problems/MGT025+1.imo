% File     : MGT025+1 : ILTP v1.1.2
% Domain   : Management (Organisation Theory)
% Problem  : Constant population means opposite growth rates
% Version  : [PB+94] axioms : Reduced & Augmented > Complete.
% English  : If one of the two subpopulations has positive growth rate, 
%            then the other subpopulation must have negative growth rate 
%            if the total number of organizations is constant. 
% Refs     : [PM93]  Peli & Masuch (1993), The Logic of Propogation Strateg
%          : [PM94]  Peli & Masuch (1994), The Logic of Propogation Strateg
%          : [Kam95] Kamps (1995), Email to G. Sutcliffe
% Source   : [Kam95]
% Names    : 
% Status   : Theorem
% Rating   : 0.36 v3.1.0, 0.44 v2.7.0, 0.50 v2.6.0, 0.43 v2.5.0, 0.38 v2.4.0, 0.50 v2.3.0, 0.33 v2.2.1, 0.00 v2.1.0
%
% Status (intuit.) : Open
% Rating (intuit.) : 1.00 v1.0.0
%
% Syntax   : Number of formulae    :    8 (   0 unit)
%            Number of atoms       :   49 (   9 equality)
%            Maximal formula depth :    9 (   7 average)
%            Number of connectives :   41 (   0 ~  ;   6  |;  23  &)
%                                         (   0 <=>;  12 =>;   0 <=)
%                                         (   0 <~>;   0 ~|;   0 ~&)
%            Number of predicates  :    9 (   0 propositional; 1-4 arity)
%            Number of functors    :    7 (   3 constant; 0-2 arity)
%            Number of variables   :   20 (   0 singleton;  20 !;   0 ?)
%            Maximal term depth    :    3 (   1 average)
% Comments : 
%------------------------------------------------------------------------------

 

% reflexivity, axiom.
(( forall X. ( X = X ) ))

  =>

% symmetry, axiom.
(( forall X Y. ( ( X = Y ) => ( Y = X ) ) ))

  =>

% transitivity, axiom.
(( forall X Y Z. ( ( ( X = Y ) & ( Y = Z ) ) => ( X = Z ) ) ))

  =>

% cardinality_at_time_substitution_1, axiom.
(( forall A B C. ( ( A = B ) => ( cardinality_at_time(A, C) = cardinality_at_time(B, C) ) ) ))

  =>

% cardinality_at_time_substitution_2, axiom.
(( forall A B C. ( ( A = B ) => ( cardinality_at_time(C, A) = cardinality_at_time(C, B) ) ) ))

  =>

% growth_rate_substitution_1, axiom.
(( forall A B C. ( ( A = B ) => ( growth_rate(A, C) = growth_rate(B, C) ) ) ))

  =>

% growth_rate_substitution_2, axiom.
(( forall A B C. ( ( A = B ) => ( growth_rate(C, A) = growth_rate(C, B) ) ) ))

  =>

% number_of_organizations_substitution_1, axiom.
(( forall A B C. ( ( A = B ) => ( number_of_organizations(A, C) = number_of_organizations(B, C) ) ) ))

  =>

% number_of_organizations_substitution_2, axiom.
(( forall A B C. ( ( A = B ) => ( number_of_organizations(C, A) = number_of_organizations(C, B) ) ) ))

  =>

% sum_substitution_1, axiom.
(( forall A B C. ( ( A = B ) => ( sum(A, C) = sum(B, C) ) ) ))

  =>

% sum_substitution_2, axiom.
(( forall A B C. ( ( A = B ) => ( sum(C, A) = sum(C, B) ) ) ))

  =>

% constant_substitution_1, axiom.
(( forall A B. ( ( ( A = B ) & constant(A) ) => constant(B) ) ))

  =>

% decreases_substitution_1, axiom.
(( forall A B. ( ( ( A = B ) & decreases(A) ) => decreases(B) ) ))

  =>

% environment_substitution_1, axiom.
(( forall A B. ( ( ( A = B ) & environment(A) ) => environment(B) ) ))

  =>

% greater_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & greater(A, C) ) => greater(B, C) ) ))

  =>

% greater_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & greater(C, A) ) => greater(C, B) ) ))

  =>

% in_environment_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & in_environment(A, C) ) => in_environment(B, C) ) ))

  =>

% in_environment_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & in_environment(C, A) ) => in_environment(C, B) ) ))

  =>

% increases_substitution_1, axiom.
(( forall A B. ( ( ( A = B ) & increases(A) ) => increases(B) ) ))

  =>

% subpopulation_substitution_1, axiom.
(( forall A B C D. ( ( ( A = B ) & subpopulation(A, C, D) ) => subpopulation(B, C, D) ) ))

  =>

% subpopulation_substitution_2, axiom.
(( forall A B C D. ( ( ( A = B ) & subpopulation(C, A, D) ) => subpopulation(C, B, D) ) ))

  =>

% subpopulation_substitution_3, axiom.
(( forall A B C D. ( ( ( A = B ) & subpopulation(C, D, A) ) => subpopulation(C, D, B) ) ))

  =>

% subpopulations_substitution_1, axiom.
(( forall A B C D E. ( ( ( A = B ) & subpopulations(A, C, D, E) ) => subpopulations(B, C, D, E) ) ))

  =>

% subpopulations_substitution_2, axiom.
(( forall A B C D E. ( ( ( A = B ) & subpopulations(C, A, D, E) ) => subpopulations(C, B, D, E) ) ))

  =>

% subpopulations_substitution_3, axiom.
(( forall A B C D E. ( ( ( A = B ) & subpopulations(C, D, A, E) ) => subpopulations(C, D, B, E) ) ))

  =>

% subpopulations_substitution_4, axiom.
(( forall A B C D E. ( ( ( A = B ) & subpopulations(C, D, E, A) ) => subpopulations(C, D, E, B) ) ))

  =>

% mp_only_members, axiom.
(( forall E X T. ( ( environment(E) & ( subpopulation(X, E, T) & ( greater(cardinality_at_time(X, T), zero) => ( ( X = efficient_producers ) | ( X = first_movers ) ) ) ) ) => ( number_of_organizations(E, T) = sum(cardinality_at_time(first_movers, T), cardinality_at_time(efficient_producers, T)) ) ) ))

  =>

% mp_subpopulations, axiom.
(( forall E T. ( ( environment(E) & in_environment(E, T) ) => ( subpopulation(first_movers, E, T) & subpopulation(efficient_producers, E, T) ) ) ))

  =>

% mp_abc_sum_increase, axiom.
(( forall A B C. ( ( ( A = sum(B, C) ) & constant(A) ) => ( ( constant(B) & constant(C) ) | ( ( increases(B) & decreases(C) ) | ( decreases(B) & increases(C) ) ) ) ) ))

  =>

% mp_growth_rate, axiom.
(( forall X E T. ( ( environment(E) & ( in_environment(E, T) & ( subpopulation(X, E, T) & greater(cardinality_at_time(X, T), zero) ) ) ) => ( ( constant(cardinality_at_time(X, T)) => ( growth_rate(X, T) = zero ) ) & ( ( increases(cardinality_at_time(X, T)) => greater(growth_rate(X, T), zero) ) & ( decreases(cardinality_at_time(X, T)) => greater(zero, growth_rate(X, T)) ) ) ) ) ))

  =>

% mp_non_zero_producers, axiom.
(( forall E T. ( ( environment(E) & subpopulations(first_movers, efficient_producers, E, T) ) => ( greater(cardinality_at_time(first_movers, T), zero) & greater(cardinality_at_time(efficient_producers, T), zero) ) ) ))

  =>

% mp_time_point_occur, axiom.
(( forall E T. ( ( environment(E) & subpopulations(first_movers, efficient_producers, E, T) ) => in_environment(E, T) ) ))

  =>

% a9, hypothesis.
(( forall E X T. ( ( environment(E) & ( subpopulation(X, E, T) & greater(cardinality_at_time(X, T), zero) ) ) => ( ( X = efficient_producers ) | ( X = first_movers ) ) ) ))

  =>

% prove_l7, conjecture.
(( forall E T. ( ( environment(E) & ( subpopulations(first_movers, efficient_producers, E, T) & constant(number_of_organizations(E, T)) ) ) => ( ( ( growth_rate(first_movers, T) = zero ) & ( growth_rate(efficient_producers, T) = zero ) ) | ( ( greater(growth_rate(first_movers, T), zero) & greater(zero, growth_rate(efficient_producers, T)) ) | ( greater(growth_rate(efficient_producers, T), zero) & greater(zero, growth_rate(first_movers, T)) ) ) ) ) ))

 

%------------------------------------------------------------------------------
