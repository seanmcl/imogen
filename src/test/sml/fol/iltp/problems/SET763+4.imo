% File     : SET763+4 : ILTP v1.1.2
% Domain   : Set Theory (Mappings)
% Problem  : If the image of X is empty then X is empty 
% Version  : [Pas99] axioms.
% English  :
% Refs     : [Pas99] Pastre (1999), Email to G. Sutcliffe
% Source   : [Pas99]
% Names    :
% Status   : Theorem
% Rating   : 0.64 v3.1.0, 0.56 v2.7.0, 0.50 v2.6.0, 0.57 v2.5.0, 0.62 v2.4.0, 0.50 v2.3.0, 0.33 v2.2.1
%
% Status (intuit.) : Open
% Rating (intuit.) : 1.00 v1.0.0
%
% Syntax   : Number of formulae    :   29 (   1 unit)
%            Number of atoms       :  132 (   6 equality)
%            Maximal formula depth :   19 (   9 average)
%            Number of connectives :  105 (   2 ~  ;   2  |;  52  &)
%                                         (  30 <=>;  19 =>;   0 <=)
%                                         (   0 <~>;   0 ~|;   0 ~&)
%            Number of predicates  :   16 (   0 propositional; 2-6 arity)
%            Number of functors    :   15 (   1 constant; 0-5 arity)
%            Number of variables   :  137 (   0 singleton; 128 !;   9 ?)
%            Maximal term depth    :    2 (   1 average)
% Comments : 
% Bugfixes : v2.2.1 - Bugfixes in SET006+1.ax.
%------------------------------------------------------------------------------

 

% reflexivity, axiom.
(( forall X. ( X = X ) ))

  =>

% symmetry, axiom.
(( forall X Y. ( ( X = Y ) => ( Y = X ) ) ))

  =>

% transitivity, axiom.
(( forall X Y Z. ( ( ( X = Y ) & ( Y = Z ) ) => ( X = Z ) ) ))

  =>

% compose_function_substitution_1, axiom.
(( forall A B C D E F. ( ( A = B ) => ( compose_function(A, C, D, E, F) = compose_function(B, C, D, E, F) ) ) ))

  =>

% compose_function_substitution_2, axiom.
(( forall A B C D E F. ( ( A = B ) => ( compose_function(C, A, D, E, F) = compose_function(C, B, D, E, F) ) ) ))

  =>

% compose_function_substitution_3, axiom.
(( forall A B C D E F. ( ( A = B ) => ( compose_function(C, D, A, E, F) = compose_function(C, D, B, E, F) ) ) ))

  =>

% compose_function_substitution_4, axiom.
(( forall A B C D E F. ( ( A = B ) => ( compose_function(C, D, E, A, F) = compose_function(C, D, E, B, F) ) ) ))

  =>

% compose_function_substitution_5, axiom.
(( forall A B C D E F. ( ( A = B ) => ( compose_function(C, D, E, F, A) = compose_function(C, D, E, F, B) ) ) ))

  =>

% difference_substitution_1, axiom.
(( forall A B C. ( ( A = B ) => ( difference(A, C) = difference(B, C) ) ) ))

  =>

% difference_substitution_2, axiom.
(( forall A B C. ( ( A = B ) => ( difference(C, A) = difference(C, B) ) ) ))

  =>

% image2_substitution_1, axiom.
(( forall A B C. ( ( A = B ) => ( image2(A, C) = image2(B, C) ) ) ))

  =>

% image2_substitution_2, axiom.
(( forall A B C. ( ( A = B ) => ( image2(C, A) = image2(C, B) ) ) ))

  =>

% image3_substitution_1, axiom.
(( forall A B C D. ( ( A = B ) => ( image3(A, C, D) = image3(B, C, D) ) ) ))

  =>

% image3_substitution_2, axiom.
(( forall A B C D. ( ( A = B ) => ( image3(C, A, D) = image3(C, B, D) ) ) ))

  =>

% image3_substitution_3, axiom.
(( forall A B C D. ( ( A = B ) => ( image3(C, D, A) = image3(C, D, B) ) ) ))

  =>

% intersection_substitution_1, axiom.
(( forall A B C. ( ( A = B ) => ( intersection(A, C) = intersection(B, C) ) ) ))

  =>

% intersection_substitution_2, axiom.
(( forall A B C. ( ( A = B ) => ( intersection(C, A) = intersection(C, B) ) ) ))

  =>

% inverse_function_substitution_1, axiom.
(( forall A B C D. ( ( A = B ) => ( inverse_function(A, C, D) = inverse_function(B, C, D) ) ) ))

  =>

% inverse_function_substitution_2, axiom.
(( forall A B C D. ( ( A = B ) => ( inverse_function(C, A, D) = inverse_function(C, B, D) ) ) ))

  =>

% inverse_function_substitution_3, axiom.
(( forall A B C D. ( ( A = B ) => ( inverse_function(C, D, A) = inverse_function(C, D, B) ) ) ))

  =>

% inverse_image2_substitution_1, axiom.
(( forall A B C. ( ( A = B ) => ( inverse_image2(A, C) = inverse_image2(B, C) ) ) ))

  =>

% inverse_image2_substitution_2, axiom.
(( forall A B C. ( ( A = B ) => ( inverse_image2(C, A) = inverse_image2(C, B) ) ) ))

  =>

% inverse_image3_substitution_1, axiom.
(( forall A B C D. ( ( A = B ) => ( inverse_image3(A, C, D) = inverse_image3(B, C, D) ) ) ))

  =>

% inverse_image3_substitution_2, axiom.
(( forall A B C D. ( ( A = B ) => ( inverse_image3(C, A, D) = inverse_image3(C, B, D) ) ) ))

  =>

% inverse_image3_substitution_3, axiom.
(( forall A B C D. ( ( A = B ) => ( inverse_image3(C, D, A) = inverse_image3(C, D, B) ) ) ))

  =>

% power_set_substitution_1, axiom.
(( forall A B. ( ( A = B ) => ( power_set(A) = power_set(B) ) ) ))

  =>

% product_substitution_1, axiom.
(( forall A B. ( ( A = B ) => ( product(A) = product(B) ) ) ))

  =>

% singleton_substitution_1, axiom.
(( forall A B. ( ( A = B ) => ( singleton(A) = singleton(B) ) ) ))

  =>

% sum_substitution_1, axiom.
(( forall A B. ( ( A = B ) => ( sum(A) = sum(B) ) ) ))

  =>

% union_substitution_1, axiom.
(( forall A B C. ( ( A = B ) => ( union(A, C) = union(B, C) ) ) ))

  =>

% union_substitution_2, axiom.
(( forall A B C. ( ( A = B ) => ( union(C, A) = union(C, B) ) ) ))

  =>

% unordered_pair_substitution_1, axiom.
(( forall A B C. ( ( A = B ) => ( unordered_pair(A, C) = unordered_pair(B, C) ) ) ))

  =>

% unordered_pair_substitution_2, axiom.
(( forall A B C. ( ( A = B ) => ( unordered_pair(C, A) = unordered_pair(C, B) ) ) ))

  =>

% apply_substitution_1, axiom.
(( forall A B C D. ( ( ( A = B ) & apply(A, C, D) ) => apply(B, C, D) ) ))

  =>

% apply_substitution_2, axiom.
(( forall A B C D. ( ( ( A = B ) & apply(C, A, D) ) => apply(C, B, D) ) ))

  =>

% apply_substitution_3, axiom.
(( forall A B C D. ( ( ( A = B ) & apply(C, D, A) ) => apply(C, D, B) ) ))

  =>

% compose_predicate_substitution_1, axiom.
(( forall A B C D E F G. ( ( ( A = B ) & compose_predicate(A, C, D, E, F, G) ) => compose_predicate(B, C, D, E, F, G) ) ))

  =>

% compose_predicate_substitution_2, axiom.
(( forall A B C D E F G. ( ( ( A = B ) & compose_predicate(C, A, D, E, F, G) ) => compose_predicate(C, B, D, E, F, G) ) ))

  =>

% compose_predicate_substitution_3, axiom.
(( forall A B C D E F G. ( ( ( A = B ) & compose_predicate(C, D, A, E, F, G) ) => compose_predicate(C, D, B, E, F, G) ) ))

  =>

% compose_predicate_substitution_4, axiom.
(( forall A B C D E F G. ( ( ( A = B ) & compose_predicate(C, D, E, A, F, G) ) => compose_predicate(C, D, E, B, F, G) ) ))

  =>

% compose_predicate_substitution_5, axiom.
(( forall A B C D E F G. ( ( ( A = B ) & compose_predicate(C, D, E, F, A, G) ) => compose_predicate(C, D, E, F, B, G) ) ))

  =>

% compose_predicate_substitution_6, axiom.
(( forall A B C D E F G. ( ( ( A = B ) & compose_predicate(C, D, E, F, G, A) ) => compose_predicate(C, D, E, F, G, B) ) ))

  =>

% decreasing_substitution_1, axiom.
(( forall A B C D E F. ( ( ( A = B ) & decreasing(A, C, D, E, F) ) => decreasing(B, C, D, E, F) ) ))

  =>

% decreasing_substitution_2, axiom.
(( forall A B C D E F. ( ( ( A = B ) & decreasing(C, A, D, E, F) ) => decreasing(C, B, D, E, F) ) ))

  =>

% decreasing_substitution_3, axiom.
(( forall A B C D E F. ( ( ( A = B ) & decreasing(C, D, A, E, F) ) => decreasing(C, D, B, E, F) ) ))

  =>

% decreasing_substitution_4, axiom.
(( forall A B C D E F. ( ( ( A = B ) & decreasing(C, D, E, A, F) ) => decreasing(C, D, E, B, F) ) ))

  =>

% decreasing_substitution_5, axiom.
(( forall A B C D E F. ( ( ( A = B ) & decreasing(C, D, E, F, A) ) => decreasing(C, D, E, F, B) ) ))

  =>

% equal_maps_substitution_1, axiom.
(( forall A B C D E. ( ( ( A = B ) & equal_maps(A, C, D, E) ) => equal_maps(B, C, D, E) ) ))

  =>

% equal_maps_substitution_2, axiom.
(( forall A B C D E. ( ( ( A = B ) & equal_maps(C, A, D, E) ) => equal_maps(C, B, D, E) ) ))

  =>

% equal_maps_substitution_3, axiom.
(( forall A B C D E. ( ( ( A = B ) & equal_maps(C, D, A, E) ) => equal_maps(C, D, B, E) ) ))

  =>

% equal_maps_substitution_4, axiom.
(( forall A B C D E. ( ( ( A = B ) & equal_maps(C, D, E, A) ) => equal_maps(C, D, E, B) ) ))

  =>

% equal_set_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & equal_set(A, C) ) => equal_set(B, C) ) ))

  =>

% equal_set_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & equal_set(C, A) ) => equal_set(C, B) ) ))

  =>

% identity_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & identity(A, C) ) => identity(B, C) ) ))

  =>

% identity_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & identity(C, A) ) => identity(C, B) ) ))

  =>

% increasing_substitution_1, axiom.
(( forall A B C D E F. ( ( ( A = B ) & increasing(A, C, D, E, F) ) => increasing(B, C, D, E, F) ) ))

  =>

% increasing_substitution_2, axiom.
(( forall A B C D E F. ( ( ( A = B ) & increasing(C, A, D, E, F) ) => increasing(C, B, D, E, F) ) ))

  =>

% increasing_substitution_3, axiom.
(( forall A B C D E F. ( ( ( A = B ) & increasing(C, D, A, E, F) ) => increasing(C, D, B, E, F) ) ))

  =>

% increasing_substitution_4, axiom.
(( forall A B C D E F. ( ( ( A = B ) & increasing(C, D, E, A, F) ) => increasing(C, D, E, B, F) ) ))

  =>

% increasing_substitution_5, axiom.
(( forall A B C D E F. ( ( ( A = B ) & increasing(C, D, E, F, A) ) => increasing(C, D, E, F, B) ) ))

  =>

% injective_substitution_1, axiom.
(( forall A B C D. ( ( ( A = B ) & injective(A, C, D) ) => injective(B, C, D) ) ))

  =>

% injective_substitution_2, axiom.
(( forall A B C D. ( ( ( A = B ) & injective(C, A, D) ) => injective(C, B, D) ) ))

  =>

% injective_substitution_3, axiom.
(( forall A B C D. ( ( ( A = B ) & injective(C, D, A) ) => injective(C, D, B) ) ))

  =>

% inverse_predicate_substitution_1, axiom.
(( forall A B C D E. ( ( ( A = B ) & inverse_predicate(A, C, D, E) ) => inverse_predicate(B, C, D, E) ) ))

  =>

% inverse_predicate_substitution_2, axiom.
(( forall A B C D E. ( ( ( A = B ) & inverse_predicate(C, A, D, E) ) => inverse_predicate(C, B, D, E) ) ))

  =>

% inverse_predicate_substitution_3, axiom.
(( forall A B C D E. ( ( ( A = B ) & inverse_predicate(C, D, A, E) ) => inverse_predicate(C, D, B, E) ) ))

  =>

% inverse_predicate_substitution_4, axiom.
(( forall A B C D E. ( ( ( A = B ) & inverse_predicate(C, D, E, A) ) => inverse_predicate(C, D, E, B) ) ))

  =>

% isomorphism_substitution_1, axiom.
(( forall A B C D E F. ( ( ( A = B ) & isomorphism(A, C, D, E, F) ) => isomorphism(B, C, D, E, F) ) ))

  =>

% isomorphism_substitution_2, axiom.
(( forall A B C D E F. ( ( ( A = B ) & isomorphism(C, A, D, E, F) ) => isomorphism(C, B, D, E, F) ) ))

  =>

% isomorphism_substitution_3, axiom.
(( forall A B C D E F. ( ( ( A = B ) & isomorphism(C, D, A, E, F) ) => isomorphism(C, D, B, E, F) ) ))

  =>

% isomorphism_substitution_4, axiom.
(( forall A B C D E F. ( ( ( A = B ) & isomorphism(C, D, E, A, F) ) => isomorphism(C, D, E, B, F) ) ))

  =>

% isomorphism_substitution_5, axiom.
(( forall A B C D E F. ( ( ( A = B ) & isomorphism(C, D, E, F, A) ) => isomorphism(C, D, E, F, B) ) ))

  =>

% maps_substitution_1, axiom.
(( forall A B C D. ( ( ( A = B ) & maps(A, C, D) ) => maps(B, C, D) ) ))

  =>

% maps_substitution_2, axiom.
(( forall A B C D. ( ( ( A = B ) & maps(C, A, D) ) => maps(C, B, D) ) ))

  =>

% maps_substitution_3, axiom.
(( forall A B C D. ( ( ( A = B ) & maps(C, D, A) ) => maps(C, D, B) ) ))

  =>

% member_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & member(A, C) ) => member(B, C) ) ))

  =>

% member_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & member(C, A) ) => member(C, B) ) ))

  =>

% one_to_one_substitution_1, axiom.
(( forall A B C D. ( ( ( A = B ) & one_to_one(A, C, D) ) => one_to_one(B, C, D) ) ))

  =>

% one_to_one_substitution_2, axiom.
(( forall A B C D. ( ( ( A = B ) & one_to_one(C, A, D) ) => one_to_one(C, B, D) ) ))

  =>

% one_to_one_substitution_3, axiom.
(( forall A B C D. ( ( ( A = B ) & one_to_one(C, D, A) ) => one_to_one(C, D, B) ) ))

  =>

% subset_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & subset(A, C) ) => subset(B, C) ) ))

  =>

% subset_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & subset(C, A) ) => subset(C, B) ) ))

  =>

% surjective_substitution_1, axiom.
(( forall A B C D. ( ( ( A = B ) & surjective(A, C, D) ) => surjective(B, C, D) ) ))

  =>

% surjective_substitution_2, axiom.
(( forall A B C D. ( ( ( A = B ) & surjective(C, A, D) ) => surjective(C, B, D) ) ))

  =>

% surjective_substitution_3, axiom.
(( forall A B C D. ( ( ( A = B ) & surjective(C, D, A) ) => surjective(C, D, B) ) ))

  =>

% subset, axiom.
(( forall A B. ( subset(A, B) <=> ( forall X. ( member(X, A) => member(X, B) ) ) ) ))

  =>

% equal_set, axiom.
(( forall A B. ( equal_set(A, B) <=> ( subset(A, B) & subset(B, A) ) ) ))

  =>

% power_set, axiom.
(( forall X A. ( member(X, power_set(A)) <=> subset(X, A) ) ))

  =>

% intersection, axiom.
(( forall X A B. ( member(X, intersection(A, B)) <=> ( member(X, A) & member(X, B) ) ) ))

  =>

% union, axiom.
(( forall X A B. ( member(X, union(A, B)) <=> ( member(X, A) | member(X, B) ) ) ))

  =>

% empty_set, axiom.
(( forall X. ( ~ member(X, empty_set) ) ))

  =>

% difference, axiom.
(( forall B A E. ( member(B, difference(E, A)) <=> ( member(B, E) & ( ~ member(B, A) ) ) ) ))

  =>

% singleton, axiom.
(( forall X A. ( member(X, singleton(A)) <=> ( X = A ) ) ))

  =>

% unordered_pair, axiom.
(( forall X A B. ( member(X, unordered_pair(A, B)) <=> ( ( X = A ) | ( X = B ) ) ) ))

  =>

% sum, axiom.
(( forall X A. ( member(X, sum(A)) <=> ( exists Y. ( member(Y, A) & member(X, Y) ) ) ) ))

  =>

% product, axiom.
(( forall X A. ( member(X, product(A)) <=> ( forall Y. ( member(Y, A) => member(X, Y) ) ) ) ))

  =>

% maps, axiom.
(( forall F A B. ( maps(F, A, B) <=> ( ( forall X. ( member(X, A) => ( exists Y. ( member(Y, B) & apply(F, X, Y) ) ) ) ) & ( forall X Y1 Y2. ( ( member(X, A) & ( member(Y1, B) & member(Y2, B) ) ) => ( ( apply(F, X, Y1) & apply(F, X, Y2) ) => ( Y1 = Y2 ) ) ) ) ) ) ))

  =>

% compose_predicate, axiom.
(( forall H G F A B C. ( compose_predicate(H, G, F, A, B, C) <=> ( forall X Z. ( ( member(X, A) & member(Z, C) ) => ( apply(H, X, Z) <=> ( exists Y. ( member(Y, B) & ( apply(F, X, Y) & apply(G, Y, Z) ) ) ) ) ) ) ) ))

  =>

% compose_function, axiom.
(( forall G F A B C X Z. ( ( member(X, A) & member(Z, C) ) => ( apply(compose_function(G, F, A, B, C), X, Z) <=> ( exists Y. ( member(Y, B) & ( apply(F, X, Y) & apply(G, Y, Z) ) ) ) ) ) ))

  =>

% equal_maps, axiom.
(( forall F G A B. ( equal_maps(F, G, A, B) <=> ( forall X Y1 Y2. ( ( member(X, A) & ( member(Y1, B) & member(Y2, B) ) ) => ( ( apply(F, X, Y1) & apply(G, X, Y2) ) => ( Y1 = Y2 ) ) ) ) ) ))

  =>

% identity, axiom.
(( forall F A. ( identity(F, A) <=> ( forall X. ( member(X, A) => apply(F, X, X) ) ) ) ))

  =>

% injective, axiom.
(( forall F A B. ( injective(F, A, B) <=> ( forall X1 X2 Y. ( ( member(X1, A) & ( member(X2, A) & member(Y, B) ) ) => ( ( apply(F, X1, Y) & apply(F, X2, Y) ) => ( X1 = X2 ) ) ) ) ) ))

  =>

% surjective, axiom.
(( forall F A B. ( surjective(F, A, B) <=> ( forall Y. ( member(Y, B) => ( exists E. ( member(E, A) & apply(F, E, Y) ) ) ) ) ) ))

  =>

% one_to_one, axiom.
(( forall F A B. ( one_to_one(F, A, B) <=> ( injective(F, A, B) & surjective(F, A, B) ) ) ))

  =>

% inverse_predicate, axiom.
(( forall G F A B. ( inverse_predicate(G, F, A, B) <=> ( forall X Y. ( ( member(X, A) & member(Y, B) ) => ( apply(F, X, Y) <=> apply(G, Y, X) ) ) ) ) ))

  =>

% inverse_function, axiom.
(( forall F A B X Y. ( ( member(X, A) & member(Y, B) ) => ( apply(F, X, Y) <=> apply(inverse_function(F, A, B), Y, X) ) ) ))

  =>

% image2, axiom.
(( forall F A Y. ( member(Y, image2(F, A)) <=> ( exists X. ( member(X, A) & apply(F, X, Y) ) ) ) ))

  =>

% image3, axiom.
(( forall F A B Y. ( member(Y, image3(F, A, B)) <=> ( member(Y, B) & ( exists X. ( member(X, A) & apply(F, X, Y) ) ) ) ) ))

  =>

% inverse_image2, axiom.
(( forall F B X. ( member(X, inverse_image2(F, B)) <=> ( exists Y. ( member(Y, B) & apply(F, X, Y) ) ) ) ))

  =>

% inverse_image3, axiom.
(( forall F B A X. ( member(X, inverse_image3(F, B, A)) <=> ( member(X, A) & ( exists Y. ( member(Y, B) & apply(F, X, Y) ) ) ) ) ))

  =>

% increasing_function, axiom.
(( forall F A R B S. ( increasing(F, A, R, B, S) <=> ( forall X1 Y1 X2 Y2. ( ( member(X1, A) & ( member(Y1, B) & ( member(X2, A) & ( member(Y2, B) & ( apply(R, X1, X2) & ( apply(F, X1, Y1) & apply(F, X2, Y2) ) ) ) ) ) ) => apply(S, Y1, Y2) ) ) ) ))

  =>

% decreasing_function, axiom.
(( forall F A R B S. ( decreasing(F, A, R, B, S) <=> ( forall X1 Y1 X2 Y2. ( ( member(X1, A) & ( member(Y1, B) & ( member(X2, A) & ( member(Y2, B) & ( apply(R, X1, X2) & ( apply(F, X1, Y1) & apply(F, X2, Y2) ) ) ) ) ) ) => apply(S, Y2, Y1) ) ) ) ))

  =>

% isomorphism, axiom.
(( forall F A R B S. ( isomorphism(F, A, R, B, S) <=> ( maps(F, A, B) & ( one_to_one(F, A, B) & ( forall X1 Y1 X2 Y2. ( ( member(X1, A) & ( member(Y1, B) & ( member(X2, A) & ( member(Y2, B) & ( apply(F, X1, Y1) & apply(F, X2, Y2) ) ) ) ) ) => ( apply(R, X1, X2) <=> apply(S, Y1, Y2) ) ) ) ) ) ) ))

  =>

% thIIa13, conjecture.
(( forall F A B X. ( ( maps(F, A, B) & ( subset(X, A) & equal_set(image2(F, X), empty_set) ) ) => equal_set(X, empty_set) ) ))

 

%------------------------------------------------------------------------------
