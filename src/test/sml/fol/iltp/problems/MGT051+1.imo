% File     : MGT051+1 : ILTP v1.1.2
% Domain   : Management (Organisation Theory)
% Problem  : Conditions for constant then increasing hazard of mortality
% Version  : [Han98] axioms.
% English  : An endowed organization's hazard of mortality remains constant 
%            during the period of immunity and increases monotonically with 
%            age once immunity ends.
% Refs     : [Kam00] Kamps (2000), Email to G. Sutcliffe
%            [CH00]  Carroll & Hannan (2000), The Demography of Corporation
%            [Han98] Hannan (1998), Rethinking Age Dependence in Organizati
% Source   : [Kam00]
% Names    : THEOREM 4 [Han98]
% Status   : Theorem
% Rating   : 0.55 v3.1.0, 0.56 v2.7.0, 0.67 v2.6.0, 0.50 v2.4.0
%
% Status (intuit.) : Open
% Rating (intuit.) : 1.00 v1.0.0
%
% Syntax   : Number of formulae    :   16 (   0 unit)
%            Number of atoms       :   73 (  15 equality)
%            Maximal formula depth :   12 (   7 average)
%            Number of connectives :   62 (   5 ~  ;   4  |;  29  &)
%                                         (   4 <=>;  20 =>;   0 <=)
%                                         (   0 <~>;   0 ~|;   0 ~&)
%            Number of predicates  :    8 (   0 propositional; 1-2 arity)
%            Number of functors    :    8 (   1 constant; 0-2 arity)
%            Number of variables   :   44 (   0 singleton;  44 !;   0 ?)
%            Maximal term depth    :    2 (   2 average)
% Comments : See MGT042+1.p for the mnemonic names.
%------------------------------------------------------------------------------

 

% reflexivity, axiom.
(( forall X. ( X = X ) ))

  =>

% symmetry, axiom.
(( forall X Y. ( ( X = Y ) => ( Y = X ) ) ))

  =>

% transitivity, axiom.
(( forall X Y Z. ( ( ( X = Y ) & ( Y = Z ) ) => ( X = Z ) ) ))

  =>

% age_substitution_1, axiom.
(( forall A B C. ( ( A = B ) => ( age(A, C) = age(B, C) ) ) ))

  =>

% age_substitution_2, axiom.
(( forall A B C. ( ( A = B ) => ( age(C, A) = age(C, B) ) ) ))

  =>

% capability_substitution_1, axiom.
(( forall A B C. ( ( A = B ) => ( capability(A, C) = capability(B, C) ) ) ))

  =>

% capability_substitution_2, axiom.
(( forall A B C. ( ( A = B ) => ( capability(C, A) = capability(C, B) ) ) ))

  =>

% external_ties_substitution_1, axiom.
(( forall A B C. ( ( A = B ) => ( external_ties(A, C) = external_ties(B, C) ) ) ))

  =>

% external_ties_substitution_2, axiom.
(( forall A B C. ( ( A = B ) => ( external_ties(C, A) = external_ties(C, B) ) ) ))

  =>

% hazard_of_mortality_substitution_1, axiom.
(( forall A B C. ( ( A = B ) => ( hazard_of_mortality(A, C) = hazard_of_mortality(B, C) ) ) ))

  =>

% hazard_of_mortality_substitution_2, axiom.
(( forall A B C. ( ( A = B ) => ( hazard_of_mortality(C, A) = hazard_of_mortality(C, B) ) ) ))

  =>

% internal_friction_substitution_1, axiom.
(( forall A B C. ( ( A = B ) => ( internal_friction(A, C) = internal_friction(B, C) ) ) ))

  =>

% internal_friction_substitution_2, axiom.
(( forall A B C. ( ( A = B ) => ( internal_friction(C, A) = internal_friction(C, B) ) ) ))

  =>

% position_substitution_1, axiom.
(( forall A B C. ( ( A = B ) => ( position(A, C) = position(B, C) ) ) ))

  =>

% position_substitution_2, axiom.
(( forall A B C. ( ( A = B ) => ( position(C, A) = position(C, B) ) ) ))

  =>

% stock_of_knowledge_substitution_1, axiom.
(( forall A B C. ( ( A = B ) => ( stock_of_knowledge(A, C) = stock_of_knowledge(B, C) ) ) ))

  =>

% stock_of_knowledge_substitution_2, axiom.
(( forall A B C. ( ( A = B ) => ( stock_of_knowledge(C, A) = stock_of_knowledge(C, B) ) ) ))

  =>

% greater_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & greater(A, C) ) => greater(B, C) ) ))

  =>

% greater_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & greater(C, A) ) => greater(C, B) ) ))

  =>

% greater_or_equal_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & greater_or_equal(A, C) ) => greater_or_equal(B, C) ) ))

  =>

% greater_or_equal_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & greater_or_equal(C, A) ) => greater_or_equal(C, B) ) ))

  =>

% has_endowment_substitution_1, axiom.
(( forall A B. ( ( ( A = B ) & has_endowment(A) ) => has_endowment(B) ) ))

  =>

% has_immunity_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & has_immunity(A, C) ) => has_immunity(B, C) ) ))

  =>

% has_immunity_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & has_immunity(C, A) ) => has_immunity(C, B) ) ))

  =>

% organization_substitution_1, axiom.
(( forall A B. ( ( ( A = B ) & organization(A) ) => organization(B) ) ))

  =>

% smaller_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & smaller(A, C) ) => smaller(B, C) ) ))

  =>

% smaller_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & smaller(C, A) ) => smaller(C, B) ) ))

  =>

% smaller_or_equal_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & smaller_or_equal(A, C) ) => smaller_or_equal(B, C) ) ))

  =>

% smaller_or_equal_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & smaller_or_equal(C, A) ) => smaller_or_equal(C, B) ) ))

  =>

% definition_smaller_or_equal, axiom.
(( forall X Y. ( smaller_or_equal(X, Y) <=> ( smaller(X, Y) | ( X = Y ) ) ) ))

  =>

% definition_greater_or_equal, axiom.
(( forall X Y. ( greater_or_equal(X, Y) <=> ( greater(X, Y) | ( X = Y ) ) ) ))

  =>

% definition_smaller, axiom.
(( forall X Y. ( smaller(X, Y) <=> greater(Y, X) ) ))

  =>

% meaning_postulate_greater_strict, axiom.
(( forall X Y. ( ~ ( greater(X, Y) & greater(Y, X) ) ) ))

  =>

% meaning_postulate_greater_transitive, axiom.
(( forall X Y Z. ( ( greater(X, Y) & greater(Y, Z) ) => greater(X, Z) ) ))

  =>

% meaning_postulate_greater_comparable, axiom.
(( forall X Y. ( smaller(X, Y) | ( ( X = Y ) | greater(X, Y) ) ) ))

  =>

% definition_1, axiom.
(( forall X. ( has_endowment(X) <=> ( forall T. ( organization(X) & ( ( smaller_or_equal(age(X, T), eta) => has_immunity(X, T) ) & ( greater(age(X, T), eta) => ( ~ has_immunity(X, T) ) ) ) ) ) ) ))

  =>

% assumption_2, axiom.
(( forall X T0 T. ( ( organization(X) & ( has_immunity(X, T0) & has_immunity(X, T) ) ) => ( hazard_of_mortality(X, T0) = hazard_of_mortality(X, T) ) ) ))

  =>

% assumption_3, axiom.
(( forall X T0 T. ( ( organization(X) & ( has_immunity(X, T0) & ( ~ has_immunity(X, T) ) ) ) => greater(hazard_of_mortality(X, T), hazard_of_mortality(X, T0)) ) ))

  =>

% assumption_4, axiom.
(( forall X T0 T. ( ( organization(X) & ( ( ~ has_immunity(X, T0) ) & ( ~ has_immunity(X, T) ) ) ) => ( ( ( greater(capability(X, T), capability(X, T0)) & greater_or_equal(position(X, T), position(X, T0)) ) => smaller(hazard_of_mortality(X, T), hazard_of_mortality(X, T0)) ) & ( ( ( greater_or_equal(capability(X, T), capability(X, T0)) & greater(position(X, T), position(X, T0)) ) => smaller(hazard_of_mortality(X, T), hazard_of_mortality(X, T0)) ) & ( ( ( capability(X, T) = capability(X, T0) ) & ( position(X, T) = position(X, T0) ) ) => ( hazard_of_mortality(X, T) = hazard_of_mortality(X, T0) ) ) ) ) ) ))

  =>

% assumption_5, axiom.
(( forall X T0 T. ( organization(X) => ( ( ( greater(stock_of_knowledge(X, T), stock_of_knowledge(X, T0)) & smaller_or_equal(internal_friction(X, T), internal_friction(X, T0)) ) => greater(capability(X, T), capability(X, T0)) ) & ( ( ( smaller_or_equal(stock_of_knowledge(X, T), stock_of_knowledge(X, T0)) & greater(internal_friction(X, T), internal_friction(X, T0)) ) => smaller(capability(X, T), capability(X, T0)) ) & ( ( ( stock_of_knowledge(X, T) = stock_of_knowledge(X, T0) ) & ( internal_friction(X, T) = internal_friction(X, T0) ) ) => ( capability(X, T) = capability(X, T0) ) ) ) ) ) ))

  =>

% assumption_6, axiom.
(( forall X T0 T. ( organization(X) => ( ( greater(external_ties(X, T), external_ties(X, T0)) => greater(position(X, T), position(X, T0)) ) & ( ( external_ties(X, T) = external_ties(X, T0) ) => ( position(X, T) = position(X, T0) ) ) ) ) ))

  =>

% assumption_10, axiom.
(( forall X T0 T. ( organization(X) => ( stock_of_knowledge(X, T) = stock_of_knowledge(X, T0) ) ) ))

  =>

% assumption_11, axiom.
(( forall X T0 T. ( organization(X) => ( external_ties(X, T) = external_ties(X, T0) ) ) ))

  =>

% assumption_12, axiom.
(( forall X T0 T. ( ( organization(X) & greater(age(X, T), age(X, T0)) ) => greater(internal_friction(X, T), internal_friction(X, T0)) ) ))

  =>

% theorem_4, conjecture.
(( forall X T0 T1 T2 T3. ( ( organization(X) & ( has_endowment(X) & ( smaller_or_equal(age(X, T0), age(X, T1)) & ( smaller_or_equal(age(X, T1), eta) & ( greater(age(X, T2), eta) & greater(age(X, T3), age(X, T2)) ) ) ) ) ) => ( greater(hazard_of_mortality(X, T3), hazard_of_mortality(X, T2)) & ( greater(hazard_of_mortality(X, T2), hazard_of_mortality(X, T1)) & ( hazard_of_mortality(X, T1) = hazard_of_mortality(X, T0) ) ) ) ) ))

 

%------------------------------------------------------------------------------
