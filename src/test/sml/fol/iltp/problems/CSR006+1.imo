% File     : CSR006+1 : ILTP v1.1.2
% Domain   : Commonsense Reasoning
% Problem  : Waterlevel is 3 at time 3
% Version  : [Mue04] axioms : Especial.
% English  :
% Refs     : [MS05]  Mueller & Sutcliffe (2005), Reasoning in the Event Cal
%          : [Mue04] Mueller (2004), A Tool for Satisfiability-based Common
%          : [MS02]  Miller & Shanahan (2002), Some Alternative Formulation
% Source   : [MS05]
% Names    :
% Status   : Theorem
% Rating   : 0.73 v3.1.0
%
% Status (intuit.) : Open
% Rating (intuit.) : 1.00 v1.1.0
%
% Syntax   : Number of formulae    :   55 (  25 unit)
%            Number of atoms       :  136 (  40 equality)
%            Maximal formula depth :   12 (   4 average)
%            Number of connectives :  109 (  28 ~  ;   8  |;  43  &)
%                                         (  18 <=>;  12 =>;   0 <=)
%                                         (   0 <~>;   0 ~|;   0 ~&)
%            Number of predicates  :   13 (   0 propositional; 2-4 arity)
%            Number of functors    :   17 (  15 constant; 0-2 arity)
%            Number of variables   :   86 (   0 singleton;  74 !;  12 ?)
%            Maximal term depth    :    2 (   1 average)
% Comments :
%------------------------------------------------------------------------------

 

% reflexivity, axiom.
(( forall X. ( X = X ) ))

  =>

% symmetry, axiom.
(( forall X Y. ( ( X = Y ) => ( Y = X ) ) ))

  =>

% transitivity, axiom.
(( forall X Y Z. ( ( ( X = Y ) & ( Y = Z ) ) => ( X = Z ) ) ))

  =>

% plus_substitution_1, axiom.
(( forall A B C. ( ( A = B ) => ( plus(A, C) = plus(B, C) ) ) ))

  =>

% plus_substitution_2, axiom.
(( forall A B C. ( ( A = B ) => ( plus(C, A) = plus(C, B) ) ) ))

  =>

% waterLevel_substitution_1, axiom.
(( forall A B. ( ( A = B ) => ( waterLevel(A) = waterLevel(B) ) ) ))

  =>

% antitrajectory_substitution_1, axiom.
(( forall A B C D E. ( ( ( A = B ) & antitrajectory(A, C, D, E) ) => antitrajectory(B, C, D, E) ) ))

  =>

% antitrajectory_substitution_2, axiom.
(( forall A B C D E. ( ( ( A = B ) & antitrajectory(C, A, D, E) ) => antitrajectory(C, B, D, E) ) ))

  =>

% antitrajectory_substitution_3, axiom.
(( forall A B C D E. ( ( ( A = B ) & antitrajectory(C, D, A, E) ) => antitrajectory(C, D, B, E) ) ))

  =>

% antitrajectory_substitution_4, axiom.
(( forall A B C D E. ( ( ( A = B ) & antitrajectory(C, D, E, A) ) => antitrajectory(C, D, E, B) ) ))

  =>

% happens_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & happens(A, C) ) => happens(B, C) ) ))

  =>

% happens_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & happens(C, A) ) => happens(C, B) ) ))

  =>

% holdsAt_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & holdsAt(A, C) ) => holdsAt(B, C) ) ))

  =>

% holdsAt_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & holdsAt(C, A) ) => holdsAt(C, B) ) ))

  =>

% initiates_substitution_1, axiom.
(( forall A B C D. ( ( ( A = B ) & initiates(A, C, D) ) => initiates(B, C, D) ) ))

  =>

% initiates_substitution_2, axiom.
(( forall A B C D. ( ( ( A = B ) & initiates(C, A, D) ) => initiates(C, B, D) ) ))

  =>

% initiates_substitution_3, axiom.
(( forall A B C D. ( ( ( A = B ) & initiates(C, D, A) ) => initiates(C, D, B) ) ))

  =>

% less_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & less(A, C) ) => less(B, C) ) ))

  =>

% less_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & less(C, A) ) => less(C, B) ) ))

  =>

% less_or_equal_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & less_or_equal(A, C) ) => less_or_equal(B, C) ) ))

  =>

% less_or_equal_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & less_or_equal(C, A) ) => less_or_equal(C, B) ) ))

  =>

% releasedAt_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & releasedAt(A, C) ) => releasedAt(B, C) ) ))

  =>

% releasedAt_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & releasedAt(C, A) ) => releasedAt(C, B) ) ))

  =>

% releases_substitution_1, axiom.
(( forall A B C D. ( ( ( A = B ) & releases(A, C, D) ) => releases(B, C, D) ) ))

  =>

% releases_substitution_2, axiom.
(( forall A B C D. ( ( ( A = B ) & releases(C, A, D) ) => releases(C, B, D) ) ))

  =>

% releases_substitution_3, axiom.
(( forall A B C D. ( ( ( A = B ) & releases(C, D, A) ) => releases(C, D, B) ) ))

  =>

% startedIn_substitution_1, axiom.
(( forall A B C D. ( ( ( A = B ) & startedIn(A, C, D) ) => startedIn(B, C, D) ) ))

  =>

% startedIn_substitution_2, axiom.
(( forall A B C D. ( ( ( A = B ) & startedIn(C, A, D) ) => startedIn(C, B, D) ) ))

  =>

% startedIn_substitution_3, axiom.
(( forall A B C D. ( ( ( A = B ) & startedIn(C, D, A) ) => startedIn(C, D, B) ) ))

  =>

% stoppedIn_substitution_1, axiom.
(( forall A B C D. ( ( ( A = B ) & stoppedIn(A, C, D) ) => stoppedIn(B, C, D) ) ))

  =>

% stoppedIn_substitution_2, axiom.
(( forall A B C D. ( ( ( A = B ) & stoppedIn(C, A, D) ) => stoppedIn(C, B, D) ) ))

  =>

% stoppedIn_substitution_3, axiom.
(( forall A B C D. ( ( ( A = B ) & stoppedIn(C, D, A) ) => stoppedIn(C, D, B) ) ))

  =>

% terminates_substitution_1, axiom.
(( forall A B C D. ( ( ( A = B ) & terminates(A, C, D) ) => terminates(B, C, D) ) ))

  =>

% terminates_substitution_2, axiom.
(( forall A B C D. ( ( ( A = B ) & terminates(C, A, D) ) => terminates(C, B, D) ) ))

  =>

% terminates_substitution_3, axiom.
(( forall A B C D. ( ( ( A = B ) & terminates(C, D, A) ) => terminates(C, D, B) ) ))

  =>

% trajectory_substitution_1, axiom.
(( forall A B C D E. ( ( ( A = B ) & trajectory(A, C, D, E) ) => trajectory(B, C, D, E) ) ))

  =>

% trajectory_substitution_2, axiom.
(( forall A B C D E. ( ( ( A = B ) & trajectory(C, A, D, E) ) => trajectory(C, B, D, E) ) ))

  =>

% trajectory_substitution_3, axiom.
(( forall A B C D E. ( ( ( A = B ) & trajectory(C, D, A, E) ) => trajectory(C, D, B, E) ) ))

  =>

% trajectory_substitution_4, axiom.
(( forall A B C D E. ( ( ( A = B ) & trajectory(C, D, E, A) ) => trajectory(C, D, E, B) ) ))

  =>

% stoppedin_defn, axiom.
(( forall Time1 Fluent Time2. ( stoppedIn(Time1, Fluent, Time2) <=> ( exists Event Time. ( happens(Event, Time) & ( less(Time1, Time) & ( less(Time, Time2) & terminates(Event, Fluent, Time) ) ) ) ) ) ))

  =>

% startedin_defn, axiom.
(( forall Time1 Time2 Fluent. ( startedIn(Time1, Fluent, Time2) <=> ( exists Event Time. ( happens(Event, Time) & ( less(Time1, Time) & ( less(Time, Time2) & initiates(Event, Fluent, Time) ) ) ) ) ) ))

  =>

% change_holding, axiom.
(( forall Event Time Fluent Fluent2 Offset. ( ( happens(Event, Time) & ( initiates(Event, Fluent, Time) & ( less(n0, Offset) & ( trajectory(Fluent, Time, Fluent2, Offset) & ( ~ stoppedIn(Time, Fluent, plus(Time, Offset)) ) ) ) ) ) => holdsAt(Fluent2, plus(Time, Offset)) ) ))

  =>

% antitrajectory, axiom.
(( forall Event Time1 Fluent1 Time2 Fluent2. ( ( happens(Event, Time1) & ( terminates(Event, Fluent1, Time1) & ( less(n0, Time2) & ( antitrajectory(Fluent1, Time1, Fluent2, Time2) & ( ~ startedIn(Time1, Fluent1, plus(Time1, Time2)) ) ) ) ) ) => holdsAt(Fluent2, plus(Time1, Time2)) ) ))

  =>

% keep_holding, axiom.
(( forall Fluent Time. ( ( holdsAt(Fluent, Time) & ( ( ~ releasedAt(Fluent, plus(Time, n1)) ) & ( ~ ( exists Event. ( happens(Event, Time) & terminates(Event, Fluent, Time) ) ) ) ) ) => holdsAt(Fluent, plus(Time, n1)) ) ))

  =>

% keep_not_holding, axiom.
(( forall Fluent Time. ( ( ( ~ holdsAt(Fluent, Time) ) & ( ( ~ releasedAt(Fluent, plus(Time, n1)) ) & ( ~ ( exists Event. ( happens(Event, Time) & initiates(Event, Fluent, Time) ) ) ) ) ) => ( ~ holdsAt(Fluent, plus(Time, n1)) ) ) ))

  =>

% keep_released, axiom.
(( forall Fluent Time. ( ( releasedAt(Fluent, Time) & ( ~ ( exists Event. ( happens(Event, Time) & ( initiates(Event, Fluent, Time) | terminates(Event, Fluent, Time) ) ) ) ) ) => releasedAt(Fluent, plus(Time, n1)) ) ))

  =>

% keep_not_released, axiom.
(( forall Fluent Time. ( ( ( ~ releasedAt(Fluent, Time) ) & ( ~ ( exists Event. ( happens(Event, Time) & releases(Event, Fluent, Time) ) ) ) ) => ( ~ releasedAt(Fluent, plus(Time, n1)) ) ) ))

  =>

% happens_holds, axiom.
(( forall Event Time Fluent. ( ( happens(Event, Time) & initiates(Event, Fluent, Time) ) => holdsAt(Fluent, plus(Time, n1)) ) ))

  =>

% happens_terminates_not_holds, axiom.
(( forall Event Time Fluent. ( ( happens(Event, Time) & terminates(Event, Fluent, Time) ) => ( ~ holdsAt(Fluent, plus(Time, n1)) ) ) ))

  =>

% happens_releases, axiom.
(( forall Event Time Fluent. ( ( happens(Event, Time) & releases(Event, Fluent, Time) ) => releasedAt(Fluent, plus(Time, n1)) ) ))

  =>

% happens_not_released, axiom.
(( forall Event Time Fluent. ( ( happens(Event, Time) & ( initiates(Event, Fluent, Time) | terminates(Event, Fluent, Time) ) ) => ( ~ releasedAt(Fluent, plus(Time, n1)) ) ) ))

  =>

% initiates_all_defn, axiom.
(( forall Event Fluent Time. ( initiates(Event, Fluent, Time) <=> ( ( ( Event = tapOn ) & ( Fluent = filling ) ) | ( ( ( Event = overflow ) & ( Fluent = spilling ) ) | ( ( exists Height. ( holdsAt(waterLevel(Height), Time) & ( ( Event = tapOff ) & ( Fluent = waterLevel(Height) ) ) ) ) | ( exists Height. ( holdsAt(waterLevel(Height), Time) & ( ( Event = overflow ) & ( Fluent = waterLevel(Height) ) ) ) ) ) ) ) ) ))

  =>

% terminates_all_defn, axiom.
(( forall Event Fluent Time. ( terminates(Event, Fluent, Time) <=> ( ( ( Event = tapOff ) & ( Fluent = filling ) ) | ( ( Event = overflow ) & ( Fluent = filling ) ) ) ) ))

  =>

% releases_all_defn, axiom.
(( forall Event Fluent Time. ( releases(Event, Fluent, Time) <=> ( exists Height. ( ( Event = tapOn ) & ( Fluent = waterLevel(Height) ) ) ) ) ))

  =>

% happens_all_defn, axiom.
(( forall Event Time. ( happens(Event, Time) <=> ( ( ( Event = tapOn ) & ( Time = n0 ) ) | ( holdsAt(waterLevel(n3), Time) & ( holdsAt(filling, Time) & ( Event = overflow ) ) ) ) ) ))

  =>

% change_of_waterLevel, axiom.
(( forall Height1 Time Height2 Offset. ( ( holdsAt(waterLevel(Height1), Time) & ( Height2 = plus(Height1, Offset) ) ) => trajectory(filling, Time, waterLevel(Height2), Offset) ) ))

  =>

% same_waterLevel, axiom.
(( forall Time Height1 Height2. ( ( holdsAt(waterLevel(Height1), Time) & holdsAt(waterLevel(Height2), Time) ) => ( Height1 = Height2 ) ) ))

  =>

% tapOff_not_tapOn, axiom.
(( ~ ( tapOff = tapOn ) ))

  =>

% tapOff_not_overflow, axiom.
(( ~ ( tapOff = overflow ) ))

  =>

% overflow_not_tapOn, axiom.
(( ~ ( overflow = tapOn ) ))

  =>

% filling_not_waterLevel, axiom.
(( forall X. ( ~ ( filling = waterLevel(X) ) ) ))

  =>

% spilling_not_waterLevel, axiom.
(( forall X. ( ~ ( spilling = waterLevel(X) ) ) ))

  =>

% filling_not_spilling, axiom.
(( ~ ( filling = spilling ) ))

  =>

% distinct_waterLevels, axiom.
(( forall X Y. ( ( waterLevel(X) = waterLevel(Y) ) <=> ( X = Y ) ) ))

  =>

% plus0_0, axiom.
(( plus(n0, n0) = n0 ))

  =>

% plus0_1, axiom.
(( plus(n0, n1) = n1 ))

  =>

% plus0_2, axiom.
(( plus(n0, n2) = n2 ))

  =>

% plus0_3, axiom.
(( plus(n0, n3) = n3 ))

  =>

% plus1_1, axiom.
(( plus(n1, n1) = n2 ))

  =>

% plus1_2, axiom.
(( plus(n1, n2) = n3 ))

  =>

% plus1_3, axiom.
(( plus(n1, n3) = n4 ))

  =>

% plus2_2, axiom.
(( plus(n2, n2) = n4 ))

  =>

% plus2_3, axiom.
(( plus(n2, n3) = n5 ))

  =>

% plus3_3, axiom.
(( plus(n3, n3) = n6 ))

  =>

% symmetry_of_plus, axiom.
(( forall X Y. ( plus(X, Y) = plus(Y, X) ) ))

  =>

% less_or_equal, axiom.
(( forall X Y. ( less_or_equal(X, Y) <=> ( less(X, Y) | ( X = Y ) ) ) ))

  =>

% less0, axiom.
(( ~ ( exists X. less(X, n0) ) ))

  =>

% less1, axiom.
(( forall X. ( less(X, n1) <=> less_or_equal(X, n0) ) ))

  =>

% less2, axiom.
(( forall X. ( less(X, n2) <=> less_or_equal(X, n1) ) ))

  =>

% less3, axiom.
(( forall X. ( less(X, n3) <=> less_or_equal(X, n2) ) ))

  =>

% less4, axiom.
(( forall X. ( less(X, n4) <=> less_or_equal(X, n3) ) ))

  =>

% less5, axiom.
(( forall X. ( less(X, n5) <=> less_or_equal(X, n4) ) ))

  =>

% less6, axiom.
(( forall X. ( less(X, n6) <=> less_or_equal(X, n5) ) ))

  =>

% less7, axiom.
(( forall X. ( less(X, n7) <=> less_or_equal(X, n6) ) ))

  =>

% less8, axiom.
(( forall X. ( less(X, n8) <=> less_or_equal(X, n7) ) ))

  =>

% less9, axiom.
(( forall X. ( less(X, n9) <=> less_or_equal(X, n8) ) ))

  =>

% less_property, axiom.
(( forall X Y. ( less(X, Y) <=> ( ( ~ less(Y, X) ) & ( ~ ( Y = X ) ) ) ) ))

  =>

% waterLevel_0, hypothesis.
(holdsAt(waterLevel(n0), n0))

  =>

% not_filling_0, hypothesis.
(( ~ holdsAt(filling, n0) ))

  =>

% not_spilling_0, hypothesis.
(( ~ holdsAt(spilling, n0) ))

  =>

% not_released_waterLevel_0, hypothesis.
(( forall Height. ( ~ releasedAt(waterLevel(Height), n0) ) ))

  =>

% not_released_filling_0, hypothesis.
(( ~ releasedAt(filling, n0) ))

  =>

% not_released_spilling_0, hypothesis.
(( ~ releasedAt(spilling, n0) ))

  =>

% waterLevel_3, conjecture.
(holdsAt(waterLevel(n3), n3))

 

%------------------------------------------------------------------------------
