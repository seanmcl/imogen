% File     : NLP051+1 : ILTP v1.1.2
% Domain   : Natural Language Processing
% Problem  : Mia ordered a shake, problem 9
% Version  : [Bos00b] axioms.
% English  : Eliminating inconsistent interpretations in the statement
%            "Mia ordered a shake. It cost five dollars."
% Refs     : [Bos00a] Bos (2000), DORIS: Discourse Oriented Representation a
%            [Bos00b] Bos (2000), Applied Theorem Proving - Natural Language
% Source   : [Bos00b]
% Names    : doris028 [Bos00b]
% Status   : CounterSatisfiable
% Rating   : 0.25 v3.1.0, 0.50 v2.6.0, 0.25 v2.5.0, 0.33 v2.4.0
%
% Status (intuit.) : Unsolved
% Rating (intuit.) : 1.00 v1.1.0
%
% Syntax   : Number of formulae    :   57 (   1 unit)
%            Number of atoms       :  161 (  17 equality)
%            Maximal formula depth :   30 (   5 average)
%            Number of connectives :  127 (  23 ~  ;   4  |;  42  &)
%                                         (   1 <=>;  57 =>;   0 <=)
%                                         (   0 <~>;   0 ~|;   0 ~&)
%            Number of predicates  :   50 (   0 propositional; 1-3 arity)
%            Number of functors    :    0 (   0 constant; --- arity)
%            Number of variables   :  131 (   0 singleton; 117 !;  14 ?)
%            Maximal term depth    :    1 (   1 average)
% Comments : 
%------------------------------------------------------------------------------

 

% reflexivity, axiom.
(( forall X. ( X = X ) ))

  =>

% symmetry, axiom.
(( forall X Y. ( ( X = Y ) => ( Y = X ) ) ))

  =>

% transitivity, axiom.
(( forall X Y Z. ( ( ( X = Y ) & ( Y = Z ) ) => ( X = Z ) ) ))

  =>

% abstraction_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & abstraction(A, C) ) => abstraction(B, C) ) ))

  =>

% abstraction_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & abstraction(C, A) ) => abstraction(C, B) ) ))

  =>

% act_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & act(A, C) ) => act(B, C) ) ))

  =>

% act_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & act(C, A) ) => act(C, B) ) ))

  =>

% actual_world_substitution_1, axiom.
(( forall A B. ( ( ( A = B ) & actual_world(A) ) => actual_world(B) ) ))

  =>

% agent_substitution_1, axiom.
(( forall A B C D. ( ( ( A = B ) & agent(A, C, D) ) => agent(B, C, D) ) ))

  =>

% agent_substitution_2, axiom.
(( forall A B C D. ( ( ( A = B ) & agent(C, A, D) ) => agent(C, B, D) ) ))

  =>

% agent_substitution_3, axiom.
(( forall A B C D. ( ( ( A = B ) & agent(C, D, A) ) => agent(C, D, B) ) ))

  =>

% animate_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & animate(A, C) ) => animate(B, C) ) ))

  =>

% animate_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & animate(C, A) ) => animate(C, B) ) ))

  =>

% beverage_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & beverage(A, C) ) => beverage(B, C) ) ))

  =>

% beverage_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & beverage(C, A) ) => beverage(C, B) ) ))

  =>

% cash_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & cash(A, C) ) => cash(B, C) ) ))

  =>

% cash_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & cash(C, A) ) => cash(C, B) ) ))

  =>

% cost_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & cost(A, C) ) => cost(B, C) ) ))

  =>

% cost_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & cost(C, A) ) => cost(C, B) ) ))

  =>

% currency_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & currency(A, C) ) => currency(B, C) ) ))

  =>

% currency_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & currency(C, A) ) => currency(C, B) ) ))

  =>

% dollar_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & dollar(A, C) ) => dollar(B, C) ) ))

  =>

% dollar_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & dollar(C, A) ) => dollar(C, B) ) ))

  =>

% entity_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & entity(A, C) ) => entity(B, C) ) ))

  =>

% entity_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & entity(C, A) ) => entity(C, B) ) ))

  =>

% event_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & event(A, C) ) => event(B, C) ) ))

  =>

% event_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & event(C, A) ) => event(C, B) ) ))

  =>

% eventuality_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & eventuality(A, C) ) => eventuality(B, C) ) ))

  =>

% eventuality_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & eventuality(C, A) ) => eventuality(C, B) ) ))

  =>

% existent_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & existent(A, C) ) => existent(B, C) ) ))

  =>

% existent_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & existent(C, A) ) => existent(C, B) ) ))

  =>

% female_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & female(A, C) ) => female(B, C) ) ))

  =>

% female_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & female(C, A) ) => female(C, B) ) ))

  =>

% five_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & five(A, C) ) => five(B, C) ) ))

  =>

% five_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & five(C, A) ) => five(C, B) ) ))

  =>

% food_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & food(A, C) ) => food(B, C) ) ))

  =>

% food_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & food(C, A) ) => food(C, B) ) ))

  =>

% forename_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & forename(A, C) ) => forename(B, C) ) ))

  =>

% forename_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & forename(C, A) ) => forename(C, B) ) ))

  =>

% general_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & general(A, C) ) => general(B, C) ) ))

  =>

% general_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & general(C, A) ) => general(C, B) ) ))

  =>

% group_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & group(A, C) ) => group(B, C) ) ))

  =>

% group_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & group(C, A) ) => group(C, B) ) ))

  =>

% human_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & human(A, C) ) => human(B, C) ) ))

  =>

% human_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & human(C, A) ) => human(C, B) ) ))

  =>

% human_person_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & human_person(A, C) ) => human_person(B, C) ) ))

  =>

% human_person_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & human_person(C, A) ) => human_person(C, B) ) ))

  =>

% impartial_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & impartial(A, C) ) => impartial(B, C) ) ))

  =>

% impartial_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & impartial(C, A) ) => impartial(C, B) ) ))

  =>

% living_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & living(A, C) ) => living(B, C) ) ))

  =>

% living_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & living(C, A) ) => living(C, B) ) ))

  =>

% member_substitution_1, axiom.
(( forall A B C D. ( ( ( A = B ) & member(A, C, D) ) => member(B, C, D) ) ))

  =>

% member_substitution_2, axiom.
(( forall A B C D. ( ( ( A = B ) & member(C, A, D) ) => member(C, B, D) ) ))

  =>

% member_substitution_3, axiom.
(( forall A B C D. ( ( ( A = B ) & member(C, D, A) ) => member(C, D, B) ) ))

  =>

% mia_forename_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & mia_forename(A, C) ) => mia_forename(B, C) ) ))

  =>

% mia_forename_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & mia_forename(C, A) ) => mia_forename(C, B) ) ))

  =>

% multiple_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & multiple(A, C) ) => multiple(B, C) ) ))

  =>

% multiple_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & multiple(C, A) ) => multiple(C, B) ) ))

  =>

% nonexistent_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & nonexistent(A, C) ) => nonexistent(B, C) ) ))

  =>

% nonexistent_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & nonexistent(C, A) ) => nonexistent(C, B) ) ))

  =>

% nonhuman_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & nonhuman(A, C) ) => nonhuman(B, C) ) ))

  =>

% nonhuman_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & nonhuman(C, A) ) => nonhuman(C, B) ) ))

  =>

% nonliving_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & nonliving(A, C) ) => nonliving(B, C) ) ))

  =>

% nonliving_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & nonliving(C, A) ) => nonliving(C, B) ) ))

  =>

% nonreflexive_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & nonreflexive(A, C) ) => nonreflexive(B, C) ) ))

  =>

% nonreflexive_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & nonreflexive(C, A) ) => nonreflexive(C, B) ) ))

  =>

% object_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & object(A, C) ) => object(B, C) ) ))

  =>

% object_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & object(C, A) ) => object(C, B) ) ))

  =>

% of_substitution_1, axiom.
(( forall A B C D. ( ( ( A = B ) & of(A, C, D) ) => of(B, C, D) ) ))

  =>

% of_substitution_2, axiom.
(( forall A B C D. ( ( ( A = B ) & of(C, A, D) ) => of(C, B, D) ) ))

  =>

% of_substitution_3, axiom.
(( forall A B C D. ( ( ( A = B ) & of(C, D, A) ) => of(C, D, B) ) ))

  =>

% order_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & order(A, C) ) => order(B, C) ) ))

  =>

% order_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & order(C, A) ) => order(C, B) ) ))

  =>

% organism_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & organism(A, C) ) => organism(B, C) ) ))

  =>

% organism_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & organism(C, A) ) => organism(C, B) ) ))

  =>

% past_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & past(A, C) ) => past(B, C) ) ))

  =>

% past_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & past(C, A) ) => past(C, B) ) ))

  =>

% patient_substitution_1, axiom.
(( forall A B C D. ( ( ( A = B ) & patient(A, C, D) ) => patient(B, C, D) ) ))

  =>

% patient_substitution_2, axiom.
(( forall A B C D. ( ( ( A = B ) & patient(C, A, D) ) => patient(C, B, D) ) ))

  =>

% patient_substitution_3, axiom.
(( forall A B C D. ( ( ( A = B ) & patient(C, D, A) ) => patient(C, D, B) ) ))

  =>

% possession_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & possession(A, C) ) => possession(B, C) ) ))

  =>

% possession_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & possession(C, A) ) => possession(C, B) ) ))

  =>

% present_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & present(A, C) ) => present(B, C) ) ))

  =>

% present_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & present(C, A) ) => present(C, B) ) ))

  =>

% relation_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & relation(A, C) ) => relation(B, C) ) ))

  =>

% relation_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & relation(C, A) ) => relation(C, B) ) ))

  =>

% relname_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & relname(A, C) ) => relname(B, C) ) ))

  =>

% relname_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & relname(C, A) ) => relname(C, B) ) ))

  =>

% set_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & set(A, C) ) => set(B, C) ) ))

  =>

% set_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & set(C, A) ) => set(C, B) ) ))

  =>

% shake_beverage_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & shake_beverage(A, C) ) => shake_beverage(B, C) ) ))

  =>

% shake_beverage_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & shake_beverage(C, A) ) => shake_beverage(C, B) ) ))

  =>

% singleton_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & singleton(A, C) ) => singleton(B, C) ) ))

  =>

% singleton_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & singleton(C, A) ) => singleton(C, B) ) ))

  =>

% specific_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & specific(A, C) ) => specific(B, C) ) ))

  =>

% specific_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & specific(C, A) ) => specific(C, B) ) ))

  =>

% substance_matter_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & substance_matter(A, C) ) => substance_matter(B, C) ) ))

  =>

% substance_matter_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & substance_matter(C, A) ) => substance_matter(C, B) ) ))

  =>

% thing_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & thing(A, C) ) => thing(B, C) ) ))

  =>

% thing_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & thing(C, A) ) => thing(C, B) ) ))

  =>

% unisex_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & unisex(A, C) ) => unisex(B, C) ) ))

  =>

% unisex_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & unisex(C, A) ) => unisex(C, B) ) ))

  =>

% woman_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & woman(A, C) ) => woman(B, C) ) ))

  =>

% woman_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & woman(C, A) ) => woman(C, B) ) ))

  =>

% ax1, axiom.
(( forall U V. ( woman(U, V) => female(U, V) ) ))

  =>

% ax2, axiom.
(( forall U V. ( human_person(U, V) => animate(U, V) ) ))

  =>

% ax3, axiom.
(( forall U V. ( human_person(U, V) => human(U, V) ) ))

  =>

% ax4, axiom.
(( forall U V. ( organism(U, V) => living(U, V) ) ))

  =>

% ax5, axiom.
(( forall U V. ( organism(U, V) => impartial(U, V) ) ))

  =>

% ax6, axiom.
(( forall U V. ( organism(U, V) => entity(U, V) ) ))

  =>

% ax7, axiom.
(( forall U V. ( human_person(U, V) => organism(U, V) ) ))

  =>

% ax8, axiom.
(( forall U V. ( woman(U, V) => human_person(U, V) ) ))

  =>

% ax9, axiom.
(( forall U V. ( mia_forename(U, V) => forename(U, V) ) ))

  =>

% ax10, axiom.
(( forall U V. ( relation(U, V) => abstraction(U, V) ) ))

  =>

% ax11, axiom.
(( forall U V. ( relname(U, V) => relation(U, V) ) ))

  =>

% ax12, axiom.
(( forall U V. ( forename(U, V) => relname(U, V) ) ))

  =>

% ax13, axiom.
(( forall U V. ( object(U, V) => unisex(U, V) ) ))

  =>

% ax14, axiom.
(( forall U V. ( object(U, V) => impartial(U, V) ) ))

  =>

% ax15, axiom.
(( forall U V. ( object(U, V) => nonliving(U, V) ) ))

  =>

% ax16, axiom.
(( forall U V. ( entity(U, V) => existent(U, V) ) ))

  =>

% ax17, axiom.
(( forall U V. ( entity(U, V) => specific(U, V) ) ))

  =>

% ax18, axiom.
(( forall U V. ( entity(U, V) => thing(U, V) ) ))

  =>

% ax19, axiom.
(( forall U V. ( object(U, V) => entity(U, V) ) ))

  =>

% ax20, axiom.
(( forall U V. ( substance_matter(U, V) => object(U, V) ) ))

  =>

% ax21, axiom.
(( forall U V. ( food(U, V) => substance_matter(U, V) ) ))

  =>

% ax22, axiom.
(( forall U V. ( beverage(U, V) => food(U, V) ) ))

  =>

% ax23, axiom.
(( forall U V. ( shake_beverage(U, V) => beverage(U, V) ) ))

  =>

% ax24, axiom.
(( forall U V. ( order(U, V) => event(U, V) ) ))

  =>

% ax25, axiom.
(( forall U V. ( act(U, V) => event(U, V) ) ))

  =>

% ax26, axiom.
(( forall U V. ( order(U, V) => act(U, V) ) ))

  =>

% ax27, axiom.
(( forall U V. ( eventuality(U, V) => unisex(U, V) ) ))

  =>

% ax28, axiom.
(( forall U V. ( eventuality(U, V) => nonexistent(U, V) ) ))

  =>

% ax29, axiom.
(( forall U V. ( eventuality(U, V) => specific(U, V) ) ))

  =>

% ax30, axiom.
(( forall U V. ( eventuality(U, V) => thing(U, V) ) ))

  =>

% ax31, axiom.
(( forall U V. ( event(U, V) => eventuality(U, V) ) ))

  =>

% ax32, axiom.
(( forall U V. ( cost(U, V) => event(U, V) ) ))

  =>

% ax33, axiom.
(( forall U V. ( five(U, V) => group(U, V) ) ))

  =>

% ax34, axiom.
(( forall U V. ( set(U, V) => multiple(U, V) ) ))

  =>

% ax35, axiom.
(( forall U V. ( group(U, V) => set(U, V) ) ))

  =>

% ax36, axiom.
(( forall U V. ( abstraction(U, V) => unisex(U, V) ) ))

  =>

% ax37, axiom.
(( forall U V. ( abstraction(U, V) => general(U, V) ) ))

  =>

% ax38, axiom.
(( forall U V. ( abstraction(U, V) => nonhuman(U, V) ) ))

  =>

% ax39, axiom.
(( forall U V. ( thing(U, V) => singleton(U, V) ) ))

  =>

% ax40, axiom.
(( forall U V. ( abstraction(U, V) => thing(U, V) ) ))

  =>

% ax41, axiom.
(( forall U V. ( possession(U, V) => abstraction(U, V) ) ))

  =>

% ax42, axiom.
(( forall U V. ( currency(U, V) => possession(U, V) ) ))

  =>

% ax43, axiom.
(( forall U V. ( cash(U, V) => currency(U, V) ) ))

  =>

% ax44, axiom.
(( forall U V. ( dollar(U, V) => cash(U, V) ) ))

  =>

% ax45, axiom.
(( forall U V. ( animate(U, V) => ( ~ nonliving(U, V) ) ) ))

  =>

% ax46, axiom.
(( forall U V. ( existent(U, V) => ( ~ nonexistent(U, V) ) ) ))

  =>

% ax47, axiom.
(( forall U V. ( nonhuman(U, V) => ( ~ human(U, V) ) ) ))

  =>

% ax48, axiom.
(( forall U V. ( nonliving(U, V) => ( ~ living(U, V) ) ) ))

  =>

% ax49, axiom.
(( forall U V. ( present(U, V) => ( ~ past(U, V) ) ) ))

  =>

% ax50, axiom.
(( forall U V. ( singleton(U, V) => ( ~ multiple(U, V) ) ) ))

  =>

% ax51, axiom.
(( forall U V. ( specific(U, V) => ( ~ general(U, V) ) ) ))

  =>

% ax52, axiom.
(( forall U V. ( unisex(U, V) => ( ~ female(U, V) ) ) ))

  =>

% ax53, axiom.
(( forall U V W. ( ( entity(U, V) & ( forename(U, W) & of(U, W, V) ) ) => ( ~ ( exists X. ( forename(U, X) & ( ( ~ ( X = W ) ) & of(U, X, V) ) ) ) ) ) ))

  =>

% ax54, axiom.
(( forall U V W X. ( ( nonreflexive(U, V) & ( agent(U, V, W) & patient(U, V, X) ) ) => ( ~ ( W = X ) ) ) ))

  =>

% ax55, axiom.
(( forall U V. ( five(U, V) <=> ( exists W. ( member(U, W, V) & ( exists X. ( member(U, X, V) & ( ( ~ ( X = W ) ) & ( exists Y. ( member(U, Y, V) & ( ( ~ ( Y = X ) ) & ( ( ~ ( Y = W ) ) & ( exists Z. ( member(U, Z, V) & ( ( ~ ( Z = Y ) ) & ( ( ~ ( Z = X ) ) & ( ( ~ ( Z = W ) ) & ( exists X1. ( member(U, X1, V) & ( ( ~ ( X1 = Z ) ) & ( ( ~ ( X1 = Y ) ) & ( ( ~ ( X1 = X ) ) & ( ( ~ ( X1 = W ) ) & ( forall X2. ( member(U, X2, V) => ( ( X2 = X1 ) | ( ( X2 = Z ) | ( ( X2 = Y ) | ( ( X2 = X ) | ( X2 = W ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ))

  =>

% ax56, axiom.
(( forall U. ( ~ ( exists V. member(U, V, V) ) ) ))

  =>

% co1, conjecture.
(( ~ ( exists U. ( actual_world(U) & ( exists V W X Y Z. ( nonhuman(U, X) & ( of(U, W, V) & ( woman(U, V) & ( mia_forename(U, W) & ( forename(U, W) & ( shake_beverage(U, X) & ( event(U, Y) & ( agent(U, Y, V) & ( patient(U, Y, X) & ( past(U, Y) & ( nonreflexive(U, Y) & ( order(U, Y) & ( ( forall X1. ( member(U, X1, Z) => ( exists X2. ( event(U, X2) & ( agent(U, X2, X) & ( patient(U, X2, X1) & ( present(U, X2) & ( nonreflexive(U, X2) & cost(U, X2) ) ) ) ) ) ) ) ) & ( five(U, Z) & ( group(U, Z) & ( forall X3. ( member(U, X3, Z) => dollar(U, X3) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ))

 

%------------------------------------------------------------------------------
