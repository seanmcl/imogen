% File     : SET772+4 : ILTP v1.1.2
% Domain   : Set Theory (Equivalence relations)
% Problem  : Belonging of the same member of a partition is an equivalence 
% Version  : [Pas99] axioms.
% English  :
% Refs     : [Pas99] Pastre (1999), Email to G. Sutcliffe
% Source   : [Pas99]
% Names    :
% Status   : Theorem
% Rating   : 0.91 v3.1.0, 0.89 v2.7.0, 0.83 v2.6.0, 0.86 v2.5.0, 0.88 v2.4.0, 0.75 v2.3.0, 0.67 v2.2.1
%
% Status (intuit.) : Open
% Rating (intuit.) : 1.00 v1.0.0
%
% Syntax   : Number of formulae    :   17 (   1 unit)
%            Number of atoms       :   76 (   4 equality)
%            Maximal formula depth :   13 (   7 average)
%            Number of connectives :   62 (   3 ~  ;   2  |;  24  &)
%                                         (  16 <=>;  17 =>;   0 <=)
%                                         (   0 <~>;   0 ~|;   0 ~&)
%            Number of predicates  :    9 (   0 propositional; 2-3 arity)
%            Number of functors    :   10 (   1 constant; 0-3 arity)
%            Number of variables   :   63 (   0 singleton;  58 !;   5 ?)
%            Maximal term depth    :    2 (   1 average)
% Comments : 
%------------------------------------------------------------------------------

 

% reflexivity, axiom.
(( forall X. ( X = X ) ))

  =>

% symmetry, axiom.
(( forall X Y. ( ( X = Y ) => ( Y = X ) ) ))

  =>

% transitivity, axiom.
(( forall X Y Z. ( ( ( X = Y ) & ( Y = Z ) ) => ( X = Z ) ) ))

  =>

% difference_substitution_1, axiom.
(( forall A B C. ( ( A = B ) => ( difference(A, C) = difference(B, C) ) ) ))

  =>

% difference_substitution_2, axiom.
(( forall A B C. ( ( A = B ) => ( difference(C, A) = difference(C, B) ) ) ))

  =>

% equivalence_class_substitution_1, axiom.
(( forall A B C D. ( ( A = B ) => ( equivalence_class(A, C, D) = equivalence_class(B, C, D) ) ) ))

  =>

% equivalence_class_substitution_2, axiom.
(( forall A B C D. ( ( A = B ) => ( equivalence_class(C, A, D) = equivalence_class(C, B, D) ) ) ))

  =>

% equivalence_class_substitution_3, axiom.
(( forall A B C D. ( ( A = B ) => ( equivalence_class(C, D, A) = equivalence_class(C, D, B) ) ) ))

  =>

% intersection_substitution_1, axiom.
(( forall A B C. ( ( A = B ) => ( intersection(A, C) = intersection(B, C) ) ) ))

  =>

% intersection_substitution_2, axiom.
(( forall A B C. ( ( A = B ) => ( intersection(C, A) = intersection(C, B) ) ) ))

  =>

% power_set_substitution_1, axiom.
(( forall A B. ( ( A = B ) => ( power_set(A) = power_set(B) ) ) ))

  =>

% product_substitution_1, axiom.
(( forall A B. ( ( A = B ) => ( product(A) = product(B) ) ) ))

  =>

% singleton_substitution_1, axiom.
(( forall A B. ( ( A = B ) => ( singleton(A) = singleton(B) ) ) ))

  =>

% sum_substitution_1, axiom.
(( forall A B. ( ( A = B ) => ( sum(A) = sum(B) ) ) ))

  =>

% union_substitution_1, axiom.
(( forall A B C. ( ( A = B ) => ( union(A, C) = union(B, C) ) ) ))

  =>

% union_substitution_2, axiom.
(( forall A B C. ( ( A = B ) => ( union(C, A) = union(C, B) ) ) ))

  =>

% unordered_pair_substitution_1, axiom.
(( forall A B C. ( ( A = B ) => ( unordered_pair(A, C) = unordered_pair(B, C) ) ) ))

  =>

% unordered_pair_substitution_2, axiom.
(( forall A B C. ( ( A = B ) => ( unordered_pair(C, A) = unordered_pair(C, B) ) ) ))

  =>

% apply_substitution_1, axiom.
(( forall A B C D. ( ( ( A = B ) & apply(A, C, D) ) => apply(B, C, D) ) ))

  =>

% apply_substitution_2, axiom.
(( forall A B C D. ( ( ( A = B ) & apply(C, A, D) ) => apply(C, B, D) ) ))

  =>

% apply_substitution_3, axiom.
(( forall A B C D. ( ( ( A = B ) & apply(C, D, A) ) => apply(C, D, B) ) ))

  =>

% disjoint_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & disjoint(A, C) ) => disjoint(B, C) ) ))

  =>

% disjoint_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & disjoint(C, A) ) => disjoint(C, B) ) ))

  =>

% equal_set_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & equal_set(A, C) ) => equal_set(B, C) ) ))

  =>

% equal_set_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & equal_set(C, A) ) => equal_set(C, B) ) ))

  =>

% equivalence_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & equivalence(A, C) ) => equivalence(B, C) ) ))

  =>

% equivalence_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & equivalence(C, A) ) => equivalence(C, B) ) ))

  =>

% member_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & member(A, C) ) => member(B, C) ) ))

  =>

% member_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & member(C, A) ) => member(C, B) ) ))

  =>

% partition_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & partition(A, C) ) => partition(B, C) ) ))

  =>

% partition_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & partition(C, A) ) => partition(C, B) ) ))

  =>

% pre_order_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & pre_order(A, C) ) => pre_order(B, C) ) ))

  =>

% pre_order_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & pre_order(C, A) ) => pre_order(C, B) ) ))

  =>

% subset_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & subset(A, C) ) => subset(B, C) ) ))

  =>

% subset_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & subset(C, A) ) => subset(C, B) ) ))

  =>

% subset, axiom.
(( forall A B. ( subset(A, B) <=> ( forall X. ( member(X, A) => member(X, B) ) ) ) ))

  =>

% equal_set, axiom.
(( forall A B. ( equal_set(A, B) <=> ( subset(A, B) & subset(B, A) ) ) ))

  =>

% power_set, axiom.
(( forall X A. ( member(X, power_set(A)) <=> subset(X, A) ) ))

  =>

% intersection, axiom.
(( forall X A B. ( member(X, intersection(A, B)) <=> ( member(X, A) & member(X, B) ) ) ))

  =>

% union, axiom.
(( forall X A B. ( member(X, union(A, B)) <=> ( member(X, A) | member(X, B) ) ) ))

  =>

% empty_set, axiom.
(( forall X. ( ~ member(X, empty_set) ) ))

  =>

% difference, axiom.
(( forall B A E. ( member(B, difference(E, A)) <=> ( member(B, E) & ( ~ member(B, A) ) ) ) ))

  =>

% singleton, axiom.
(( forall X A. ( member(X, singleton(A)) <=> ( X = A ) ) ))

  =>

% unordered_pair, axiom.
(( forall X A B. ( member(X, unordered_pair(A, B)) <=> ( ( X = A ) | ( X = B ) ) ) ))

  =>

% sum, axiom.
(( forall X A. ( member(X, sum(A)) <=> ( exists Y. ( member(Y, A) & member(X, Y) ) ) ) ))

  =>

% product, axiom.
(( forall X A. ( member(X, product(A)) <=> ( forall Y. ( member(Y, A) => member(X, Y) ) ) ) ))

  =>

% disjoint, axiom.
(( forall A B. ( disjoint(A, B) <=> ( ~ ( exists X. ( member(X, A) & member(X, B) ) ) ) ) ))

  =>

% partition, axiom.
(( forall A E. ( partition(A, E) <=> ( ( forall X. ( member(X, A) => subset(X, E) ) ) & ( ( forall X. ( member(X, E) => ( exists Y. ( member(Y, A) & member(X, Y) ) ) ) ) & ( forall X Y. ( ( member(X, A) & member(Y, A) ) => ( ( exists Z. ( member(Z, X) & member(Z, Y) ) ) => ( X = Y ) ) ) ) ) ) ) ))

  =>

% equivalence, axiom.
(( forall A R. ( equivalence(R, A) <=> ( ( forall X. ( member(X, A) => apply(R, X, X) ) ) & ( ( forall X Y. ( ( member(X, A) & member(Y, A) ) => ( apply(R, X, Y) => apply(R, Y, X) ) ) ) & ( forall X Y Z. ( ( member(X, A) & ( member(Y, A) & member(Z, A) ) ) => ( ( apply(R, X, Y) & apply(R, Y, Z) ) => apply(R, X, Z) ) ) ) ) ) ) ))

  =>

% equivalence_class, axiom.
(( forall R E A X. ( member(X, equivalence_class(A, E, R)) <=> ( member(X, E) & apply(R, A, X) ) ) ))

  =>

% pre_order, axiom.
(( forall R E. ( pre_order(R, E) <=> ( ( forall X. ( member(X, E) => apply(R, X, X) ) ) & ( forall X Y Z. ( ( member(X, E) & ( member(Y, E) & member(Z, E) ) ) => ( ( apply(R, X, Y) & apply(R, Y, Z) ) => apply(R, X, Z) ) ) ) ) ) ))

  =>

% thIII08, conjecture.
(( forall A E R. ( partition(A, E) => ( ( forall X Y. ( ( member(X, E) & member(Y, E) ) => ( apply(R, X, Y) <=> ( exists Z. ( member(Z, A) & ( member(X, Z) & member(Y, Z) ) ) ) ) ) ) => equivalence(R, E) ) ) ))

 

%------------------------------------------------------------------------------
