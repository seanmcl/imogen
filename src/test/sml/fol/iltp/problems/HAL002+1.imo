% File     : HAL002+1 : ILTP v1.1.2
% Domain   : Homological Algebra
% Problem  : Equivalence of injection axioms
% Version  : [TPTP] axioms.
% English  :
% Refs     : [Wei94] Weibel (1994), An Introduction to Homological Algebra
% Source   : [TPTP]
% Names    :
% Status   : Theorem
% Rating   : 0.64 v3.1.0, 0.67 v2.6.0
%
% Status (intuit.) : Open
% Rating (intuit.) : 1.00 v1.0.0
%
% Syntax   : Number of formulae    :   17 (   1 unit)
%            Number of atoms       :   79 (  20 equality)
%            Maximal formula depth :   16 (   9 average)
%            Number of connectives :   62 (   0 ~  ;   0  |;  34  &)
%                                         (   3 <=>;  25 =>;   0 <=)
%                                         (   0 <~>;   0 ~|;   0 ~&)
%            Number of predicates  :    8 (   0 propositional; 1-4 arity)
%            Number of functors    :    6 (   3 constant; 0-3 arity)
%            Number of variables   :   77 (   0 singleton;  73 !;   4 ?)
%            Maximal term depth    :    3 (   1 average)
% Comments : 
%------------------------------------------------------------------------------

 

% reflexivity, axiom.
(( forall X. ( X = X ) ))

  =>

% symmetry, axiom.
(( forall X Y. ( ( X = Y ) => ( Y = X ) ) ))

  =>

% transitivity, axiom.
(( forall X Y Z. ( ( ( X = Y ) & ( Y = Z ) ) => ( X = Z ) ) ))

  =>

% apply_substitution_1, axiom.
(( forall A B C. ( ( A = B ) => ( apply(A, C) = apply(B, C) ) ) ))

  =>

% apply_substitution_2, axiom.
(( forall A B C. ( ( A = B ) => ( apply(C, A) = apply(C, B) ) ) ))

  =>

% subtract_substitution_1, axiom.
(( forall A B C D. ( ( A = B ) => ( subtract(A, C, D) = subtract(B, C, D) ) ) ))

  =>

% subtract_substitution_2, axiom.
(( forall A B C D. ( ( A = B ) => ( subtract(C, A, D) = subtract(C, B, D) ) ) ))

  =>

% subtract_substitution_3, axiom.
(( forall A B C D. ( ( A = B ) => ( subtract(C, D, A) = subtract(C, D, B) ) ) ))

  =>

% zero_substitution_1, axiom.
(( forall A B. ( ( A = B ) => ( zero(A) = zero(B) ) ) ))

  =>

% commute_substitution_1, axiom.
(( forall A B C D E. ( ( ( A = B ) & commute(A, C, D, E) ) => commute(B, C, D, E) ) ))

  =>

% commute_substitution_2, axiom.
(( forall A B C D E. ( ( ( A = B ) & commute(C, A, D, E) ) => commute(C, B, D, E) ) ))

  =>

% commute_substitution_3, axiom.
(( forall A B C D E. ( ( ( A = B ) & commute(C, D, A, E) ) => commute(C, D, B, E) ) ))

  =>

% commute_substitution_4, axiom.
(( forall A B C D E. ( ( ( A = B ) & commute(C, D, E, A) ) => commute(C, D, E, B) ) ))

  =>

% element_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & element(A, C) ) => element(B, C) ) ))

  =>

% element_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & element(C, A) ) => element(C, B) ) ))

  =>

% exact_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & exact(A, C) ) => exact(B, C) ) ))

  =>

% exact_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & exact(C, A) ) => exact(C, B) ) ))

  =>

% injection_substitution_1, axiom.
(( forall A B. ( ( ( A = B ) & injection(A) ) => injection(B) ) ))

  =>

% injection_2_substitution_1, axiom.
(( forall A B. ( ( ( A = B ) & injection_2(A) ) => injection_2(B) ) ))

  =>

% morphism_substitution_1, axiom.
(( forall A B C D. ( ( ( A = B ) & morphism(A, C, D) ) => morphism(B, C, D) ) ))

  =>

% morphism_substitution_2, axiom.
(( forall A B C D. ( ( ( A = B ) & morphism(C, A, D) ) => morphism(C, B, D) ) ))

  =>

% morphism_substitution_3, axiom.
(( forall A B C D. ( ( ( A = B ) & morphism(C, D, A) ) => morphism(C, D, B) ) ))

  =>

% surjection_substitution_1, axiom.
(( forall A B. ( ( ( A = B ) & surjection(A) ) => surjection(B) ) ))

  =>

% morphism, axiom.
(( forall Morphism Dom Cod. ( morphism(Morphism, Dom, Cod) => ( ( forall El. ( element(El, Dom) => element(apply(Morphism, El), Cod) ) ) & ( apply(Morphism, zero(Dom)) = zero(Cod) ) ) ) ))

  =>

% injection_properties, axiom.
(( forall Morphism Dom Cod. ( ( injection(Morphism) & morphism(Morphism, Dom, Cod) ) => ( forall El1 El2. ( ( element(El1, Dom) & ( element(El2, Dom) & ( apply(Morphism, El1) = apply(Morphism, El2) ) ) ) => ( El1 = El2 ) ) ) ) ))

  =>

% properties_for_injection, axiom.
(( forall Morphism Dom Cod. ( ( morphism(Morphism, Dom, Cod) & ( forall El1 El2. ( ( element(El1, Dom) & ( element(El2, Dom) & ( apply(Morphism, El1) = apply(Morphism, El2) ) ) ) => ( El1 = El2 ) ) ) ) => injection(Morphism) ) ))

  =>

% surjection_properties, axiom.
(( forall Morphism Dom Cod. ( ( surjection(Morphism) & morphism(Morphism, Dom, Cod) ) => ( forall ElCod. ( element(ElCod, Cod) => ( exists ElDom. ( element(ElDom, Dom) & ( apply(Morphism, ElDom) = ElCod ) ) ) ) ) ) ))

  =>

% properties_for_surjection, axiom.
(( forall Morphism Dom Cod. ( ( morphism(Morphism, Dom, Cod) & ( forall ElCod. ( element(ElCod, Cod) => ( exists ElDom. ( element(ElDom, Dom) & ( apply(Morphism, ElDom) = ElCod ) ) ) ) ) ) => surjection(Morphism) ) ))

  =>

% exact_properties, axiom.
(( forall Morphism1 Morphism2 Dom CodDom Cod. ( ( exact(Morphism1, Morphism2) & ( morphism(Morphism1, Dom, CodDom) & morphism(Morphism2, CodDom, Cod) ) ) => ( forall ElCodDom. ( ( element(ElCodDom, CodDom) & ( apply(Morphism2, ElCodDom) = zero(Cod) ) ) <=> ( exists ElDom. ( element(ElDom, Dom) & ( apply(Morphism1, ElDom) = ElCodDom ) ) ) ) ) ) ))

  =>

% properties_for_exact, axiom.
(( forall Morphism1 Morphism2 Dom CodDom Cod. ( ( morphism(Morphism1, Dom, CodDom) & ( morphism(Morphism2, CodDom, Cod) & ( forall ElCodDom. ( ( element(ElCodDom, CodDom) & ( apply(Morphism2, ElCodDom) = zero(Cod) ) ) <=> ( exists ElDom. ( element(ElDom, Dom) & ( apply(Morphism1, ElDom) = ElCodDom ) ) ) ) ) ) ) => exact(Morphism1, Morphism2) ) ))

  =>

% commute_properties, axiom.
(( forall M1 M2 M3 M4 Dom DomCod1 DomCod2 Cod. ( ( commute(M1, M2, M3, M4) & ( morphism(M1, Dom, DomCod1) & ( morphism(M2, DomCod1, Cod) & ( morphism(M3, Dom, DomCod2) & morphism(M4, DomCod2, Cod) ) ) ) ) => ( forall ElDom. ( element(ElDom, Dom) => ( apply(M2, apply(M1, ElDom)) = apply(M4, apply(M3, ElDom)) ) ) ) ) ))

  =>

% properties_for_commute, axiom.
(( forall M1 M2 M3 M4 Dom DomCod1 DomCod2 Cod. ( ( morphism(M1, Dom, DomCod1) & ( morphism(M2, DomCod1, Cod) & ( morphism(M3, Dom, DomCod2) & ( morphism(M4, DomCod2, Cod) & ( forall ElDom. ( element(ElDom, Dom) => ( apply(M2, apply(M1, ElDom)) = apply(M4, apply(M3, ElDom)) ) ) ) ) ) ) ) => commute(M1, M2, M3, M4) ) ))

  =>

% subtract_in_domain, axiom.
(( forall Dom El1 El2. ( ( element(El1, Dom) & element(El2, Dom) ) => element(subtract(Dom, El1, El2), Dom) ) ))

  =>

% subtract_to_0, axiom.
(( forall Dom El. ( element(El, Dom) => ( subtract(Dom, El, El) = zero(Dom) ) ) ))

  =>

% subtract_cancellation, axiom.
(( forall Dom El1 El2. ( ( element(El1, Dom) & element(El2, Dom) ) => ( subtract(Dom, El1, subtract(Dom, El1, El2)) = El2 ) ) ))

  =>

% subtract_distribution, axiom.
(( forall Morphism Dom Cod. ( morphism(Morphism, Dom, Cod) => ( forall El1 El2. ( ( element(El1, Dom) & element(El2, Dom) ) => ( apply(Morphism, subtract(Dom, El1, El2)) = subtract(Cod, apply(Morphism, El1), apply(Morphism, El2)) ) ) ) ) ))

  =>

% injection_properties_2, axiom.
(( forall Morphism Dom Cod. ( ( injection_2(Morphism) & morphism(Morphism, Dom, Cod) ) => ( forall El. ( ( element(El, Dom) & ( apply(Morphism, El) = zero(Cod) ) ) => ( El = zero(Dom) ) ) ) ) ))

  =>

% properties_for_injection_2, axiom.
(( forall Morphism Dom Cod. ( ( morphism(Morphism, Dom, Cod) & ( forall El. ( ( element(El, Dom) & ( apply(Morphism, El) = zero(Cod) ) ) => ( El = zero(Dom) ) ) ) ) => injection_2(Morphism) ) ))

  =>

% x_morphism, hypothesis.
(morphism(x, any1, any2))

  =>

% my, conjecture.
(( injection(x) <=> injection_2(x) ))

 

%------------------------------------------------------------------------------
