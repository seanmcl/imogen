% File     : PUZ047+1 : ILTP v1.1.2
% Domain   : Syntactic
% Problem  : Taking the wolf, goat, and cabbage across river
% Version  : Especial.
% English  : 
% Refs     : [And97] Andrews (1994), Email to G. Sutcliffe
% Source   : [And97]
% Names    : THM100 [And97]
% Status   : Theorem
% Rating   : 0.00 v2.5.0
%
% Status (intuit.) : Theorem
% Rating (intuit.) : 0.75 v1.0.0
%
% Syntax   : Number of formulae    :    1 (   0 unit)
%            Number of atoms       :   30 (   0 equality)
%            Maximal formula depth :   18 (  18 average)
%            Number of connectives :   29 (   0 ~  ;   0  |;  14  &)
%                                         (   0 <=>;  15 =>;   0 <=)
%                                         (   0 <~>;   0 ~|;   0 ~&)
%            Number of predicates  :    1 (   0 propositional; 5-5 arity)
%            Number of functors    :    7 (   3 constant; 0-1 arity)
%            Number of variables   :   19 (   0 singleton;  18 !;   1 ?)
%            Maximal term depth    :    2 (   1 average)
% Comments : 
%------------------------------------------------------------------------------

 

% thm100, conjecture.
(( ( p(south, south, south, south, start) & ( ( forall T. ( p(south, north, south, north, T) => p(north, north, south, north, go_alone(T)) ) ) & ( ( forall T1. ( p(north, north, south, north, T1) => p(south, north, south, north, go_alone(T1)) ) ) & ( ( forall T2. ( p(south, south, north, south, T2) => p(north, south, north, south, go_alone(T2)) ) ) & ( ( forall T3. ( p(north, south, north, south, T3) => p(south, south, north, south, go_alone(T3)) ) ) & ( ( forall T4. ( p(south, south, south, north, T4) => p(north, north, south, north, take_wolf(T4)) ) ) & ( ( forall T5. ( p(north, north, south, north, T5) => p(south, south, south, north, take_wolf(T5)) ) ) & ( ( forall T6. ( p(south, south, north, south, T6) => p(north, north, north, south, take_wolf(T6)) ) ) & ( ( forall T7. ( p(north, north, north, south, T7) => p(south, south, north, south, take_wolf(T7)) ) ) & ( ( forall X Y U. ( p(south, X, south, Y, U) => p(north, X, north, Y, take_goat(U)) ) ) & ( ( forall X1 Y1 V. ( p(north, X1, north, Y1, V) => p(south, X1, south, Y1, take_goat(V)) ) ) & ( ( forall T8. ( p(south, north, south, south, T8) => p(north, north, south, north, take_cabbage(T8)) ) ) & ( ( forall T9. ( p(north, north, south, north, T9) => p(south, north, south, south, take_cabbage(T9)) ) ) & ( ( forall U1. ( p(south, south, north, south, U1) => p(north, south, north, north, take_cabbage(U1)) ) ) & ( forall V1. ( p(north, south, north, north, V1) => p(south, south, north, south, take_cabbage(V1)) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) => ( exists Z. p(north, north, north, north, Z) ) ))

 

%------------------------------------------------------------------------------
