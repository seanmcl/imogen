% File     : MGT039+1 : ILTP v1.1.2
% Domain   : Management (Organisation Theory)
% Problem  : Selection favours EPs above Fms if change is slow
% Version  : [PB+94] axioms : Reduced & Augmented > Complete.
% English  : Selection favors efficient producers above first movers if
%            environmental change is slow. 
% Refs     : [PM93]  Peli & Masuch (1993), The Logic of Propogation Strateg
%          : [PM94]  Peli & Masuch (1994), The Logic of Propogation Strateg
%          : [Kam95] Kamps (1995), Email to G. Sutcliffe
% Source   : [Kam95]
% Names    : 
% Status   : Theorem
% Rating   : 0.18 v3.1.0, 0.22 v2.7.0, 0.33 v2.6.0, 0.43 v2.5.0, 0.38 v2.4.0, 0.25 v2.3.0, 0.33 v2.2.1, 0.00 v2.1.0
%
% Status (intuit.) : Open
% Rating (intuit.) : 1.00 v1.0.0
%
% Syntax   : Number of formulae    :   12 (   2 unit)
%            Number of atoms       :   41 (   1 equality)
%            Maximal formula depth :    9 (   5 average)
%            Number of connectives :   30 (   1 ~  ;   1  |;  16  &)
%                                         (   1 <=>;  11 =>;   0 <=)
%                                         (   0 <~>;   0 ~|;   0 ~&)
%            Number of predicates  :    9 (   0 propositional; 1-3 arity)
%            Number of functors    :    5 (   2 constant; 0-1 arity)
%            Number of variables   :   20 (   0 singleton;  19 !;   1 ?)
%            Maximal term depth    :    2 (   1 average)
% Comments : 
%------------------------------------------------------------------------------

 

% reflexivity, axiom.
(( forall X. ( X = X ) ))

  =>

% symmetry, axiom.
(( forall X Y. ( ( X = Y ) => ( Y = X ) ) ))

  =>

% transitivity, axiom.
(( forall X Y Z. ( ( ( X = Y ) & ( Y = Z ) ) => ( X = Z ) ) ))

  =>

% critical_point_substitution_1, axiom.
(( forall A B. ( ( A = B ) => ( critical_point(A) = critical_point(B) ) ) ))

  =>

% end_time_substitution_1, axiom.
(( forall A B. ( ( A = B ) => ( end_time(A) = end_time(B) ) ) ))

  =>

% start_time_substitution_1, axiom.
(( forall A B. ( ( A = B ) => ( start_time(A) = start_time(B) ) ) ))

  =>

% environment_substitution_1, axiom.
(( forall A B. ( ( ( A = B ) & environment(A) ) => environment(B) ) ))

  =>

% greater_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & greater(A, C) ) => greater(B, C) ) ))

  =>

% greater_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & greater(C, A) ) => greater(C, B) ) ))

  =>

% greater_or_equal_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & greater_or_equal(A, C) ) => greater_or_equal(B, C) ) ))

  =>

% greater_or_equal_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & greater_or_equal(C, A) ) => greater_or_equal(C, B) ) ))

  =>

% in_environment_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & in_environment(A, C) ) => in_environment(B, C) ) ))

  =>

% in_environment_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & in_environment(C, A) ) => in_environment(C, B) ) ))

  =>

% observational_period_substitution_1, axiom.
(( forall A B. ( ( ( A = B ) & observational_period(A) ) => observational_period(B) ) ))

  =>

% propagation_strategy_substitution_1, axiom.
(( forall A B. ( ( ( A = B ) & propagation_strategy(A) ) => propagation_strategy(B) ) ))

  =>

% selection_favors_substitution_1, axiom.
(( forall A B C D. ( ( ( A = B ) & selection_favors(A, C, D) ) => selection_favors(B, C, D) ) ))

  =>

% selection_favors_substitution_2, axiom.
(( forall A B C D. ( ( ( A = B ) & selection_favors(C, A, D) ) => selection_favors(C, B, D) ) ))

  =>

% selection_favors_substitution_3, axiom.
(( forall A B C D. ( ( ( A = B ) & selection_favors(C, D, A) ) => selection_favors(C, D, B) ) ))

  =>

% slow_change_substitution_1, axiom.
(( forall A B. ( ( ( A = B ) & slow_change(A) ) => slow_change(B) ) ))

  =>

% mp3_favoured_trategy, axiom.
(( forall P. ( ( observational_period(P) & ( propagation_strategy(first_movers) & ( propagation_strategy(efficient_producers) & ( forall E. ( ( environment(E) & in_environment(P, E) ) => selection_favors(efficient_producers, first_movers, end_time(E)) ) ) ) ) ) => selection_favors(efficient_producers, first_movers, P) ) ))

  =>

% mp4_critical_point, axiom.
(( forall P. ( ( observational_period(P) & slow_change(P) ) => ( forall E. ( ( environment(E) & in_environment(P, E) ) => ( exists T. ( in_environment(E, T) & greater(T, critical_point(E)) ) ) ) ) ) ))

  =>

% mp_organizational_sets1, axiom.
(propagation_strategy(first_movers))

  =>

% mp_organizational_sets2, axiom.
(propagation_strategy(efficient_producers))

  =>

% mp_time_in_environment, axiom.
(( forall E T. ( ( environment(E) & ( greater_or_equal(T, start_time(E)) & greater_or_equal(end_time(E), T) ) ) => in_environment(E, T) ) ))

  =>

% mp_environment_end_point, axiom.
(( forall E T. ( ( environment(E) & in_environment(E, T) ) => greater_or_equal(end_time(E), T) ) ))

  =>

% mp_time_of_critical_point, axiom.
(( forall E. ( environment(E) => greater_or_equal(critical_point(E), start_time(E)) ) ))

  =>

% mp_greater_transitivity, axiom.
(( forall X Y Z. ( ( greater(X, Y) & greater(Y, Z) ) => greater(X, Z) ) ))

  =>

% mp_greater_or_equal, axiom.
(( forall X Y. ( greater_or_equal(X, Y) <=> ( greater(X, Y) | ( X = Y ) ) ) ))

  =>

% mp_beginning_and_ending, axiom.
(( forall E T. ( ( environment(E) & ( greater(T, start_time(E)) & ( ~ greater(T, end_time(E)) ) ) ) => greater_or_equal(end_time(E), T) ) ))

  =>

% l8, hypothesis.
(( forall E T. ( ( environment(E) & ( in_environment(E, T) & greater(T, critical_point(E)) ) ) => selection_favors(efficient_producers, first_movers, T) ) ))

  =>

% prove_t8, conjecture.
(( forall P. ( ( observational_period(P) & slow_change(P) ) => selection_favors(efficient_producers, first_movers, P) ) ))

 

%------------------------------------------------------------------------------
