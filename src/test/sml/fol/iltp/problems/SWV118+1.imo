% File     : SWV118+1 : ILTP v1.1.2
% Domain   : Software Verification
% Problem  : Unsimplified proof obligation quaternion_ds1_symm_0011
% Version  : [DFS04] axioms : Especial.
% English  : Proof obligation emerging from the symm-safety verification for
%            the quaternion_ds1 program. symmetry-safety ensures that certain
%            two-dimensional arrays remain symmetric.
% Refs     : [Fis04] Fischer (2004), Email to G. Sutcliffe
%          : [DFS04] Denney et al. (2004), Using Automated Theorem Provers
% Source   : [Fis04]
% Names    : quaternion_ds1_symm_0011 [Fis04]
% Status   : Theorem
% Rating   : 1.00 v3.1.0
%
% Status (intuit.) : Open
% Rating (intuit.) : 1.00 v1.1.0
%
% Syntax   : Number of formulae    :  109 (  73 unit)
%            Number of atoms       :  370 ( 109 equality)
%            Maximal formula depth :   24 (   4 average)
%            Number of connectives :  269 (   8 ~  ;  23  |; 166  &)
%                                         (   5 <=>;  67 =>;   0 <=)
%                                         (   0 <~>;   0 ~|;   0 ~&)
%            Number of predicates  :    6 (   1 propositional; 0-2 arity)
%            Number of functors    :   41 (  21 constant; 0-4 arity)
%            Number of variables   :  190 (   0 singleton; 190 !;   0 ?)
%            Maximal term depth    :   18 (   2 average)
% Comments : 
%------------------------------------------------------------------------------

 

% reflexivity, axiom.
(( forall X. ( X = X ) ))

  =>

% symmetry, axiom.
(( forall X Y. ( ( X = Y ) => ( Y = X ) ) ))

  =>

% transitivity, axiom.
(( forall X Y Z. ( ( ( X = Y ) & ( Y = Z ) ) => ( X = Z ) ) ))

  =>

% a_select2_substitution_1, axiom.
(( forall A B C. ( ( A = B ) => ( a_select2(A, C) = a_select2(B, C) ) ) ))

  =>

% a_select2_substitution_2, axiom.
(( forall A B C. ( ( A = B ) => ( a_select2(C, A) = a_select2(C, B) ) ) ))

  =>

% a_select3_substitution_1, axiom.
(( forall A B C D. ( ( A = B ) => ( a_select3(A, C, D) = a_select3(B, C, D) ) ) ))

  =>

% a_select3_substitution_2, axiom.
(( forall A B C D. ( ( A = B ) => ( a_select3(C, A, D) = a_select3(C, B, D) ) ) ))

  =>

% a_select3_substitution_3, axiom.
(( forall A B C D. ( ( A = B ) => ( a_select3(C, D, A) = a_select3(C, D, B) ) ) ))

  =>

% dim_substitution_1, axiom.
(( forall A B C. ( ( A = B ) => ( dim(A, C) = dim(B, C) ) ) ))

  =>

% dim_substitution_2, axiom.
(( forall A B C. ( ( A = B ) => ( dim(C, A) = dim(C, B) ) ) ))

  =>

% divide_substitution_1, axiom.
(( forall A B C. ( ( A = B ) => ( divide(A, C) = divide(B, C) ) ) ))

  =>

% divide_substitution_2, axiom.
(( forall A B C. ( ( A = B ) => ( divide(C, A) = divide(C, B) ) ) ))

  =>

% inv_substitution_1, axiom.
(( forall A B. ( ( A = B ) => ( inv(A) = inv(B) ) ) ))

  =>

% minus_substitution_1, axiom.
(( forall A B C. ( ( A = B ) => ( minus(A, C) = minus(B, C) ) ) ))

  =>

% minus_substitution_2, axiom.
(( forall A B C. ( ( A = B ) => ( minus(C, A) = minus(C, B) ) ) ))

  =>

% plus_substitution_1, axiom.
(( forall A B C. ( ( A = B ) => ( plus(A, C) = plus(B, C) ) ) ))

  =>

% plus_substitution_2, axiom.
(( forall A B C. ( ( A = B ) => ( plus(C, A) = plus(C, B) ) ) ))

  =>

% pred_substitution_1, axiom.
(( forall A B. ( ( A = B ) => ( pred(A) = pred(B) ) ) ))

  =>

% succ_substitution_1, axiom.
(( forall A B. ( ( A = B ) => ( succ(A) = succ(B) ) ) ))

  =>

% sum_substitution_1, axiom.
(( forall A B C D. ( ( A = B ) => ( sum(A, C, D) = sum(B, C, D) ) ) ))

  =>

% sum_substitution_2, axiom.
(( forall A B C D. ( ( A = B ) => ( sum(C, A, D) = sum(C, B, D) ) ) ))

  =>

% sum_substitution_3, axiom.
(( forall A B C D. ( ( A = B ) => ( sum(C, D, A) = sum(C, D, B) ) ) ))

  =>

% times_substitution_1, axiom.
(( forall A B C. ( ( A = B ) => ( times(A, C) = times(B, C) ) ) ))

  =>

% times_substitution_2, axiom.
(( forall A B C. ( ( A = B ) => ( times(C, A) = times(C, B) ) ) ))

  =>

% tptp_const_array1_substitution_1, axiom.
(( forall A B C. ( ( A = B ) => ( tptp_const_array1(A, C) = tptp_const_array1(B, C) ) ) ))

  =>

% tptp_const_array1_substitution_2, axiom.
(( forall A B C. ( ( A = B ) => ( tptp_const_array1(C, A) = tptp_const_array1(C, B) ) ) ))

  =>

% tptp_const_array2_substitution_1, axiom.
(( forall A B C D. ( ( A = B ) => ( tptp_const_array2(A, C, D) = tptp_const_array2(B, C, D) ) ) ))

  =>

% tptp_const_array2_substitution_2, axiom.
(( forall A B C D. ( ( A = B ) => ( tptp_const_array2(C, A, D) = tptp_const_array2(C, B, D) ) ) ))

  =>

% tptp_const_array2_substitution_3, axiom.
(( forall A B C D. ( ( A = B ) => ( tptp_const_array2(C, D, A) = tptp_const_array2(C, D, B) ) ) ))

  =>

% tptp_madd_substitution_1, axiom.
(( forall A B C. ( ( A = B ) => ( tptp_madd(A, C) = tptp_madd(B, C) ) ) ))

  =>

% tptp_madd_substitution_2, axiom.
(( forall A B C. ( ( A = B ) => ( tptp_madd(C, A) = tptp_madd(C, B) ) ) ))

  =>

% tptp_mmul_substitution_1, axiom.
(( forall A B C. ( ( A = B ) => ( tptp_mmul(A, C) = tptp_mmul(B, C) ) ) ))

  =>

% tptp_mmul_substitution_2, axiom.
(( forall A B C. ( ( A = B ) => ( tptp_mmul(C, A) = tptp_mmul(C, B) ) ) ))

  =>

% tptp_msub_substitution_1, axiom.
(( forall A B C. ( ( A = B ) => ( tptp_msub(A, C) = tptp_msub(B, C) ) ) ))

  =>

% tptp_msub_substitution_2, axiom.
(( forall A B C. ( ( A = B ) => ( tptp_msub(C, A) = tptp_msub(C, B) ) ) ))

  =>

% tptp_update2_substitution_1, axiom.
(( forall A B C D. ( ( A = B ) => ( tptp_update2(A, C, D) = tptp_update2(B, C, D) ) ) ))

  =>

% tptp_update2_substitution_2, axiom.
(( forall A B C D. ( ( A = B ) => ( tptp_update2(C, A, D) = tptp_update2(C, B, D) ) ) ))

  =>

% tptp_update2_substitution_3, axiom.
(( forall A B C D. ( ( A = B ) => ( tptp_update2(C, D, A) = tptp_update2(C, D, B) ) ) ))

  =>

% tptp_update3_substitution_1, axiom.
(( forall A B C D E. ( ( A = B ) => ( tptp_update3(A, C, D, E) = tptp_update3(B, C, D, E) ) ) ))

  =>

% tptp_update3_substitution_2, axiom.
(( forall A B C D E. ( ( A = B ) => ( tptp_update3(C, A, D, E) = tptp_update3(C, B, D, E) ) ) ))

  =>

% tptp_update3_substitution_3, axiom.
(( forall A B C D E. ( ( A = B ) => ( tptp_update3(C, D, A, E) = tptp_update3(C, D, B, E) ) ) ))

  =>

% tptp_update3_substitution_4, axiom.
(( forall A B C D E. ( ( A = B ) => ( tptp_update3(C, D, E, A) = tptp_update3(C, D, E, B) ) ) ))

  =>

% trans_substitution_1, axiom.
(( forall A B. ( ( A = B ) => ( trans(A) = trans(B) ) ) ))

  =>

% uniform_int_rnd_substitution_1, axiom.
(( forall A B C. ( ( A = B ) => ( uniform_int_rnd(A, C) = uniform_int_rnd(B, C) ) ) ))

  =>

% uniform_int_rnd_substitution_2, axiom.
(( forall A B C. ( ( A = B ) => ( uniform_int_rnd(C, A) = uniform_int_rnd(C, B) ) ) ))

  =>

% geq_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & geq(A, C) ) => geq(B, C) ) ))

  =>

% geq_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & geq(C, A) ) => geq(C, B) ) ))

  =>

% gt_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & gt(A, C) ) => gt(B, C) ) ))

  =>

% gt_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & gt(C, A) ) => gt(C, B) ) ))

  =>

% leq_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & leq(A, C) ) => leq(B, C) ) ))

  =>

% leq_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & leq(C, A) ) => leq(C, B) ) ))

  =>

% lt_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & lt(A, C) ) => lt(B, C) ) ))

  =>

% lt_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & lt(C, A) ) => lt(C, B) ) ))

  =>

% totality, axiom.
(( forall X Y. ( gt(X, Y) | ( gt(Y, X) | ( X = Y ) ) ) ))

  =>

% transitivity_gt, axiom.
(( forall X Y Z. ( ( gt(X, Y) & gt(Y, Z) ) => gt(X, Z) ) ))

  =>

% irreflexivity_gt, axiom.
(( forall X. ( ~ gt(X, X) ) ))

  =>

% reflexivity_leq, axiom.
(( forall X. leq(X, X) ))

  =>

% transitivity_leq, axiom.
(( forall X Y Z. ( ( leq(X, Y) & leq(Y, Z) ) => leq(X, Z) ) ))

  =>

% lt_gt, axiom.
(( forall X Y. ( lt(X, Y) <=> gt(Y, X) ) ))

  =>

% leq_geq, axiom.
(( forall X Y. ( geq(X, Y) <=> leq(Y, X) ) ))

  =>

% leq_gt1, axiom.
(( forall X Y. ( gt(Y, X) => leq(X, Y) ) ))

  =>

% leq_gt2, axiom.
(( forall X Y. ( ( leq(X, Y) & ( ~ ( X = Y ) ) ) => gt(Y, X) ) ))

  =>

% leq_gt_pred, axiom.
(( forall X Y. ( leq(X, pred(Y)) <=> gt(Y, X) ) ))

  =>

% gt_succ, axiom.
(( forall X. gt(succ(X), X) ))

  =>

% leq_succ, axiom.
(( forall X Y. ( leq(X, Y) => leq(X, succ(Y)) ) ))

  =>

% leq_succ_gt_equiv, axiom.
(( forall X Y. ( leq(X, Y) <=> gt(succ(Y), X) ) ))

  =>

% uniform_int_rand_ranges_hi, axiom.
(( forall X C. ( leq(n0, X) => leq(uniform_int_rnd(C, X), X) ) ))

  =>

% uniform_int_rand_ranges_lo, axiom.
(( forall X C. ( leq(n0, X) => leq(n0, uniform_int_rnd(C, X)) ) ))

  =>

% const_array1_select, axiom.
(( forall I L U Val. ( ( leq(L, I) & leq(I, U) ) => ( a_select2(tptp_const_array1(dim(L, U), Val), I) = Val ) ) ))

  =>

% const_array2_select, axiom.
(( forall I L1 U1 J L2 U2 Val. ( ( leq(L1, I) & ( leq(I, U1) & ( leq(L2, J) & leq(J, U2) ) ) ) => ( a_select3(tptp_const_array2(dim(L1, U1), dim(L2, U2), Val), I, J) = Val ) ) ))

  =>

% matrix_symm_aba1, axiom.
(( forall I0 J0 A B N. ( ( leq(n0, I0) & ( leq(I0, N) & ( leq(n0, J0) & ( leq(J0, N) & ( a_select3(B, I0, J0) = a_select3(B, J0, I0) ) ) ) ) ) => ( a_select3(tptp_mmul(A, tptp_mmul(B, trans(A))), I0, J0) = a_select3(tptp_mmul(A, tptp_mmul(B, trans(A))), J0, I0) ) ) ))

  =>

% matrix_symm_aba2, axiom.
(( forall I0 J0 I J A B N M. ( ( leq(n0, I0) & ( leq(I0, N) & ( leq(n0, J0) & ( leq(J0, N) & ( leq(n0, I) & ( leq(I, M) & ( leq(n0, J) & ( leq(J, M) & ( a_select3(B, I, J) = a_select3(B, J, I) ) ) ) ) ) ) ) ) ) => ( a_select3(tptp_mmul(A, tptp_mmul(B, trans(A))), I0, J0) = a_select3(tptp_mmul(A, tptp_mmul(B, trans(A))), J0, I0) ) ) ))

  =>

% matrix_symm_add, axiom.
(( forall I J A B N. ( ( leq(n0, I) & ( leq(I, N) & ( leq(n0, J) & ( leq(J, N) & ( ( a_select3(A, I, J) = a_select3(A, J, I) ) & ( a_select3(B, I, J) = a_select3(B, J, I) ) ) ) ) ) ) => ( a_select3(tptp_madd(A, B), I, J) = a_select3(tptp_madd(A, B), J, I) ) ) ))

  =>

% matrix_symm_sub, axiom.
(( forall I J A B N. ( ( leq(n0, I) & ( leq(I, N) & ( leq(n0, J) & ( leq(J, N) & ( ( a_select3(A, I, J) = a_select3(A, J, I) ) & ( a_select3(B, I, J) = a_select3(B, J, I) ) ) ) ) ) ) => ( a_select3(tptp_msub(A, B), I, J) = a_select3(tptp_msub(A, B), J, I) ) ) ))

  =>

% matrix_symm_trans, axiom.
(( forall I J A N. ( ( leq(n0, I) & ( leq(I, N) & ( leq(n0, J) & ( leq(J, N) & ( a_select3(A, I, J) = a_select3(A, J, I) ) ) ) ) ) => ( a_select3(trans(A), I, J) = a_select3(trans(A), J, I) ) ) ))

  =>

% matrix_symm_inv, axiom.
(( forall I J A N. ( ( leq(n0, I) & ( leq(I, N) & ( leq(n0, J) & ( leq(J, N) & ( a_select3(A, I, J) = a_select3(A, J, I) ) ) ) ) ) => ( a_select3(inv(A), I, J) = a_select3(inv(A), J, I) ) ) ))

  =>

% matrix_symm_joseph_update, axiom.
(( forall I0 J0 I J A B C D E F N M. ( ( leq(n0, I0) & ( leq(I0, N) & ( leq(n0, J0) & ( leq(J0, N) & ( leq(n0, I) & ( leq(I, M) & ( leq(n0, J) & ( leq(J, M) & ( ( a_select3(D, I, J) = a_select3(D, J, I) ) & ( ( a_select3(A, I0, J0) = a_select3(A, J0, I0) ) & ( a_select3(F, I0, J0) = a_select3(F, J0, I0) ) ) ) ) ) ) ) ) ) ) ) => ( a_select3(tptp_madd(A, tptp_mmul(B, tptp_mmul(tptp_madd(tptp_mmul(C, tptp_mmul(D, trans(C))), tptp_mmul(E, tptp_mmul(F, trans(E)))), trans(B)))), I0, J0) = a_select3(tptp_madd(A, tptp_mmul(B, tptp_mmul(tptp_madd(tptp_mmul(C, tptp_mmul(D, trans(C))), tptp_mmul(E, tptp_mmul(F, trans(E)))), trans(B)))), J0, I0) ) ) ))

  =>

% sum_plus_base, axiom.
(( forall Body. ( sum(n0, tptp_minus_1, Body) = n0 ) ))

  =>

% succ_tptp_minus_1, axiom.
(( succ(tptp_minus_1) = n0 ))

  =>

% succ_plus_1_r, axiom.
(( forall X. ( plus(X, n1) = succ(X) ) ))

  =>

% succ_plus_1_l, axiom.
(( forall X. ( plus(n1, X) = succ(X) ) ))

  =>

% succ_plus_2_r, axiom.
(( forall X. ( plus(X, n2) = succ(succ(X)) ) ))

  =>

% succ_plus_2_l, axiom.
(( forall X. ( plus(n2, X) = succ(succ(X)) ) ))

  =>

% succ_plus_3_r, axiom.
(( forall X. ( plus(X, n3) = succ(succ(succ(X))) ) ))

  =>

% succ_plus_3_l, axiom.
(( forall X. ( plus(n3, X) = succ(succ(succ(X))) ) ))

  =>

% succ_plus_4_r, axiom.
(( forall X. ( plus(X, n4) = succ(succ(succ(succ(X)))) ) ))

  =>

% succ_plus_4_l, axiom.
(( forall X. ( plus(n4, X) = succ(succ(succ(succ(X)))) ) ))

  =>

% succ_plus_5_r, axiom.
(( forall X. ( plus(X, n5) = succ(succ(succ(succ(succ(X))))) ) ))

  =>

% succ_plus_5_l, axiom.
(( forall X. ( plus(n5, X) = succ(succ(succ(succ(succ(X))))) ) ))

  =>

% pred_minus_1, axiom.
(( forall X. ( minus(X, n1) = pred(X) ) ))

  =>

% pred_succ, axiom.
(( forall X. ( pred(succ(X)) = X ) ))

  =>

% succ_pred, axiom.
(( forall X. ( succ(pred(X)) = X ) ))

  =>

% leq_succ_succ, axiom.
(( forall X Y. ( leq(succ(X), succ(Y)) <=> leq(X, Y) ) ))

  =>

% leq_succ_gt, axiom.
(( forall X Y. ( leq(succ(X), Y) => gt(Y, X) ) ))

  =>

% leq_minus, axiom.
(( forall X Y. ( leq(minus(X, Y), X) => leq(n0, Y) ) ))

  =>

% sel3_update_1, axiom.
(( forall X U V VAL. ( a_select3(tptp_update3(X, U, V, VAL), U, V) = VAL ) ))

  =>

% sel3_update_2, axiom.
(( forall I J U V X VAL VAL2. ( ( ( ~ ( I = U ) ) & ( ( J = V ) & ( a_select3(X, U, V) = VAL ) ) ) => ( a_select3(tptp_update3(X, I, J, VAL2), U, V) = VAL ) ) ))

  =>

% sel3_update_3, axiom.
(( forall I J U V X VAL. ( ( ( forall I0 J0. ( ( leq(n0, I0) & ( leq(n0, J0) & ( leq(I0, U) & leq(J0, V) ) ) ) => ( a_select3(X, I0, J0) = VAL ) ) ) & ( leq(n0, I) & ( leq(I, U) & ( leq(n0, J) & leq(J, V) ) ) ) ) => ( a_select3(tptp_update3(X, U, V, VAL), I, J) = VAL ) ) ))

  =>

% sel2_update_1, axiom.
(( forall X U VAL. ( a_select2(tptp_update2(X, U, VAL), U) = VAL ) ))

  =>

% sel2_update_2, axiom.
(( forall I U X VAL VAL2. ( ( ( ~ ( I = U ) ) & ( a_select2(X, U) = VAL ) ) => ( a_select2(tptp_update2(X, I, VAL2), U) = VAL ) ) ))

  =>

% sel2_update_3, axiom.
(( forall I U X VAL. ( ( ( forall I0. ( ( leq(n0, I0) & leq(I0, U) ) => ( a_select2(X, I0) = VAL ) ) ) & ( leq(n0, I) & leq(I, U) ) ) => ( a_select2(tptp_update2(X, U, VAL), I) = VAL ) ) ))

  =>

% ttrue, axiom.
(true)

  =>

% defuse, axiom.
(( ~ ( def = use ) ))

  =>

% gt_5_4, axiom.
(gt(n5, n4))

  =>

% gt_6_4, axiom.
(gt(n6, n4))

  =>

% gt_400_4, axiom.
(gt(n400, n4))

  =>

% gt_999_4, axiom.
(gt(n999, n4))

  =>

% gt_6_5, axiom.
(gt(n6, n5))

  =>

% gt_400_5, axiom.
(gt(n400, n5))

  =>

% gt_999_5, axiom.
(gt(n999, n5))

  =>

% gt_400_6, axiom.
(gt(n400, n6))

  =>

% gt_999_6, axiom.
(gt(n999, n6))

  =>

% gt_4_tptp_minus_1, axiom.
(gt(n4, tptp_minus_1))

  =>

% gt_5_tptp_minus_1, axiom.
(gt(n5, tptp_minus_1))

  =>

% gt_6_tptp_minus_1, axiom.
(gt(n6, tptp_minus_1))

  =>

% gt_400_tptp_minus_1, axiom.
(gt(n400, tptp_minus_1))

  =>

% gt_999_tptp_minus_1, axiom.
(gt(n999, tptp_minus_1))

  =>

% gt_0_tptp_minus_1, axiom.
(gt(n0, tptp_minus_1))

  =>

% gt_1_tptp_minus_1, axiom.
(gt(n1, tptp_minus_1))

  =>

% gt_2_tptp_minus_1, axiom.
(gt(n2, tptp_minus_1))

  =>

% gt_3_tptp_minus_1, axiom.
(gt(n3, tptp_minus_1))

  =>

% gt_999_400, axiom.
(gt(n999, n400))

  =>

% gt_4_0, axiom.
(gt(n4, n0))

  =>

% gt_5_0, axiom.
(gt(n5, n0))

  =>

% gt_6_0, axiom.
(gt(n6, n0))

  =>

% gt_400_0, axiom.
(gt(n400, n0))

  =>

% gt_999_0, axiom.
(gt(n999, n0))

  =>

% gt_1_0, axiom.
(gt(n1, n0))

  =>

% gt_2_0, axiom.
(gt(n2, n0))

  =>

% gt_3_0, axiom.
(gt(n3, n0))

  =>

% gt_4_1, axiom.
(gt(n4, n1))

  =>

% gt_5_1, axiom.
(gt(n5, n1))

  =>

% gt_6_1, axiom.
(gt(n6, n1))

  =>

% gt_400_1, axiom.
(gt(n400, n1))

  =>

% gt_999_1, axiom.
(gt(n999, n1))

  =>

% gt_2_1, axiom.
(gt(n2, n1))

  =>

% gt_3_1, axiom.
(gt(n3, n1))

  =>

% gt_4_2, axiom.
(gt(n4, n2))

  =>

% gt_5_2, axiom.
(gt(n5, n2))

  =>

% gt_6_2, axiom.
(gt(n6, n2))

  =>

% gt_400_2, axiom.
(gt(n400, n2))

  =>

% gt_999_2, axiom.
(gt(n999, n2))

  =>

% gt_3_2, axiom.
(gt(n3, n2))

  =>

% gt_4_3, axiom.
(gt(n4, n3))

  =>

% gt_5_3, axiom.
(gt(n5, n3))

  =>

% gt_6_3, axiom.
(gt(n6, n3))

  =>

% gt_400_3, axiom.
(gt(n400, n3))

  =>

% gt_999_3, axiom.
(gt(n999, n3))

  =>

% finite_domain_4, axiom.
(( forall X. ( ( leq(n0, X) & leq(X, n4) ) => ( ( X = n0 ) | ( ( X = n1 ) | ( ( X = n2 ) | ( ( X = n3 ) | ( X = n4 ) ) ) ) ) ) ))

  =>

% finite_domain_5, axiom.
(( forall X. ( ( leq(n0, X) & leq(X, n5) ) => ( ( X = n0 ) | ( ( X = n1 ) | ( ( X = n2 ) | ( ( X = n3 ) | ( ( X = n4 ) | ( X = n5 ) ) ) ) ) ) ) ))

  =>

% finite_domain_6, axiom.
(( forall X. ( ( leq(n0, X) & leq(X, n6) ) => ( ( X = n0 ) | ( ( X = n1 ) | ( ( X = n2 ) | ( ( X = n3 ) | ( ( X = n4 ) | ( ( X = n5 ) | ( X = n6 ) ) ) ) ) ) ) ) ))

  =>

% finite_domain_0, axiom.
(( forall X. ( ( leq(n0, X) & leq(X, n0) ) => ( X = n0 ) ) ))

  =>

% finite_domain_1, axiom.
(( forall X. ( ( leq(n0, X) & leq(X, n1) ) => ( ( X = n0 ) | ( X = n1 ) ) ) ))

  =>

% finite_domain_2, axiom.
(( forall X. ( ( leq(n0, X) & leq(X, n2) ) => ( ( X = n0 ) | ( ( X = n1 ) | ( X = n2 ) ) ) ) ))

  =>

% finite_domain_3, axiom.
(( forall X. ( ( leq(n0, X) & leq(X, n3) ) => ( ( X = n0 ) | ( ( X = n1 ) | ( ( X = n2 ) | ( X = n3 ) ) ) ) ) ))

  =>

% successor_4, axiom.
(( succ(succ(succ(succ(n0)))) = n4 ))

  =>

% successor_5, axiom.
(( succ(succ(succ(succ(succ(n0))))) = n5 ))

  =>

% successor_6, axiom.
(( succ(succ(succ(succ(succ(succ(n0)))))) = n6 ))

  =>

% successor_1, axiom.
(( succ(n0) = n1 ))

  =>

% successor_2, axiom.
(( succ(succ(n0)) = n2 ))

  =>

% successor_3, axiom.
(( succ(succ(succ(n0))) = n3 ))

  =>

% quaternion_ds1_symm_0011, conjecture.
(( ( leq(n0, pv5) & ( leq(pv5, minus(n999, n1)) & ( ( forall A B. ( ( leq(n0, A) & ( leq(n0, B) & ( leq(A, minus(n6, n1)) & leq(B, minus(n6, n1)) ) ) ) => ( a_select3(q_ds1_filter, A, B) = a_select3(q_ds1_filter, B, A) ) ) ) & ( ( forall C D. ( ( leq(n0, C) & ( leq(n0, D) & ( leq(C, minus(n3, n1)) & leq(D, minus(n3, n1)) ) ) ) => ( a_select3(r_ds1_filter, C, D) = a_select3(r_ds1_filter, D, C) ) ) ) & ( ( forall E F. ( ( leq(n0, E) & ( leq(n0, F) & ( leq(E, minus(n6, n1)) & leq(F, minus(n6, n1)) ) ) ) => ( a_select3(pminus_ds1_filter, E, F) = a_select3(pminus_ds1_filter, F, E) ) ) ) & ( forall G. ( ( leq(n0, G) & leq(G, minus(n6, n1)) ) => ( forall H. ( ( leq(n0, H) & leq(H, minus(n6, n1)) ) => ( a_select3(id_ds1_filter, G, H) = a_select3(id_ds1_filter, H, G) ) ) ) ) ) ) ) ) ) ) => ( ( ( ~ gt(pv5, n0) ) => ( ( ( ~ gt(pv5, n0) ) => ( leq(n0, pv5) & ( leq(pv5, minus(n999, n1)) & ( ( forall I J. ( ( leq(n0, I) & ( leq(n0, J) & ( leq(I, minus(n6, n1)) & leq(J, minus(n6, n1)) ) ) ) => ( a_select3(q_ds1_filter, I, J) = a_select3(q_ds1_filter, J, I) ) ) ) & ( ( forall K L. ( ( leq(n0, K) & ( leq(n0, L) & ( leq(K, minus(n3, n1)) & leq(L, minus(n3, n1)) ) ) ) => ( a_select3(r_ds1_filter, K, L) = a_select3(r_ds1_filter, L, K) ) ) ) & ( ( forall M N. ( ( leq(n0, M) & ( leq(n0, N) & ( leq(M, minus(n6, n1)) & leq(N, minus(n6, n1)) ) ) ) => ( a_select3(tptp_madd(q_ds1_filter, tptp_mmul(phi_ds1_filter, tptp_mmul(tptp_madd(tptp_mmul(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter))))))), tptp_mmul(r_ds1_filter, trans(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter)))))))))), tptp_mmul(tptp_msub(id_ds1_filter, tptp_mmul(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter))))))), h_ds1_filter)), tptp_mmul(pminus_ds1_filter, trans(tptp_msub(id_ds1_filter, tptp_mmul(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter))))))), h_ds1_filter)))))), trans(phi_ds1_filter)))), M, N) = a_select3(tptp_madd(q_ds1_filter, tptp_mmul(phi_ds1_filter, tptp_mmul(tptp_madd(tptp_mmul(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter))))))), tptp_mmul(r_ds1_filter, trans(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter)))))))))), tptp_mmul(tptp_msub(id_ds1_filter, tptp_mmul(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter))))))), h_ds1_filter)), tptp_mmul(pminus_ds1_filter, trans(tptp_msub(id_ds1_filter, tptp_mmul(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter))))))), h_ds1_filter)))))), trans(phi_ds1_filter)))), N, M) ) ) ) & ( ( forall O P. ( ( leq(n0, O) & ( leq(n0, P) & ( leq(O, minus(n6, n1)) & leq(P, minus(n6, n1)) ) ) ) => ( a_select3(tptp_madd(q_ds1_filter, tptp_mmul(phi_ds1_filter, tptp_mmul(tptp_madd(tptp_mmul(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter))))))), tptp_mmul(r_ds1_filter, trans(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter)))))))))), tptp_mmul(tptp_msub(id_ds1_filter, tptp_mmul(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter))))))), h_ds1_filter)), tptp_mmul(pminus_ds1_filter, trans(tptp_msub(id_ds1_filter, tptp_mmul(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter))))))), h_ds1_filter)))))), trans(phi_ds1_filter)))), O, P) = a_select3(tptp_madd(q_ds1_filter, tptp_mmul(phi_ds1_filter, tptp_mmul(tptp_madd(tptp_mmul(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter))))))), tptp_mmul(r_ds1_filter, trans(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter)))))))))), tptp_mmul(tptp_msub(id_ds1_filter, tptp_mmul(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter))))))), h_ds1_filter)), tptp_mmul(pminus_ds1_filter, trans(tptp_msub(id_ds1_filter, tptp_mmul(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter))))))), h_ds1_filter)))))), trans(phi_ds1_filter)))), P, O) ) ) ) & ( forall Q. ( ( leq(n0, Q) & leq(Q, minus(n6, n1)) ) => ( forall R. ( ( leq(n0, R) & leq(R, minus(n6, n1)) ) => ( a_select3(id_ds1_filter, Q, R) = a_select3(id_ds1_filter, R, Q) ) ) ) ) ) ) ) ) ) ) ) ) & ( gt(pv5, n0) => ( leq(n0, pv5) & ( leq(pv5, minus(n999, n1)) & ( ( forall S T. ( ( leq(n0, S) & ( leq(n0, T) & ( leq(S, minus(n6, n1)) & leq(T, minus(n6, n1)) ) ) ) => ( a_select3(q_ds1_filter, S, T) = a_select3(q_ds1_filter, T, S) ) ) ) & ( ( forall U V. ( ( leq(n0, U) & ( leq(n0, V) & ( leq(U, minus(n3, n1)) & leq(V, minus(n3, n1)) ) ) ) => ( a_select3(r_ds1_filter, U, V) = a_select3(r_ds1_filter, V, U) ) ) ) & ( ( forall W X. ( ( leq(n0, W) & ( leq(n0, X) & ( leq(W, minus(n6, n1)) & leq(X, minus(n6, n1)) ) ) ) => ( a_select3(tptp_madd(q_ds1_filter, tptp_mmul(phi_ds1_filter, tptp_mmul(tptp_madd(tptp_mmul(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter))))))), tptp_mmul(r_ds1_filter, trans(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter)))))))))), tptp_mmul(tptp_msub(id_ds1_filter, tptp_mmul(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter))))))), h_ds1_filter)), tptp_mmul(pminus_ds1_filter, trans(tptp_msub(id_ds1_filter, tptp_mmul(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter))))))), h_ds1_filter)))))), trans(phi_ds1_filter)))), W, X) = a_select3(tptp_madd(q_ds1_filter, tptp_mmul(phi_ds1_filter, tptp_mmul(tptp_madd(tptp_mmul(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter))))))), tptp_mmul(r_ds1_filter, trans(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter)))))))))), tptp_mmul(tptp_msub(id_ds1_filter, tptp_mmul(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter))))))), h_ds1_filter)), tptp_mmul(pminus_ds1_filter, trans(tptp_msub(id_ds1_filter, tptp_mmul(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter))))))), h_ds1_filter)))))), trans(phi_ds1_filter)))), X, W) ) ) ) & ( ( forall Y Z. ( ( leq(n0, Y) & ( leq(n0, Z) & ( leq(Y, minus(n6, n1)) & leq(Z, minus(n6, n1)) ) ) ) => ( a_select3(tptp_madd(q_ds1_filter, tptp_mmul(phi_ds1_filter, tptp_mmul(tptp_madd(tptp_mmul(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter))))))), tptp_mmul(r_ds1_filter, trans(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter)))))))))), tptp_mmul(tptp_msub(id_ds1_filter, tptp_mmul(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter))))))), h_ds1_filter)), tptp_mmul(pminus_ds1_filter, trans(tptp_msub(id_ds1_filter, tptp_mmul(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter))))))), h_ds1_filter)))))), trans(phi_ds1_filter)))), Y, Z) = a_select3(tptp_madd(q_ds1_filter, tptp_mmul(phi_ds1_filter, tptp_mmul(tptp_madd(tptp_mmul(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter))))))), tptp_mmul(r_ds1_filter, trans(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter)))))))))), tptp_mmul(tptp_msub(id_ds1_filter, tptp_mmul(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter))))))), h_ds1_filter)), tptp_mmul(pminus_ds1_filter, trans(tptp_msub(id_ds1_filter, tptp_mmul(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter))))))), h_ds1_filter)))))), trans(phi_ds1_filter)))), Z, Y) ) ) ) & ( forall A1. ( ( leq(n0, A1) & leq(A1, minus(n6, n1)) ) => ( forall B1. ( ( leq(n0, B1) & leq(B1, minus(n6, n1)) ) => ( a_select3(id_ds1_filter, A1, B1) = a_select3(id_ds1_filter, B1, A1) ) ) ) ) ) ) ) ) ) ) ) ) ) ) & ( gt(pv5, n0) => ( ( ( ~ gt(pv5, n0) ) => ( leq(n0, pv5) & ( leq(pv5, minus(n999, n1)) & ( ( forall C1 D1. ( ( leq(n0, C1) & ( leq(n0, D1) & ( leq(C1, minus(n6, n1)) & leq(D1, minus(n6, n1)) ) ) ) => ( a_select3(q_ds1_filter, C1, D1) = a_select3(q_ds1_filter, D1, C1) ) ) ) & ( ( forall E1 F1. ( ( leq(n0, E1) & ( leq(n0, F1) & ( leq(E1, minus(n3, n1)) & leq(F1, minus(n3, n1)) ) ) ) => ( a_select3(r_ds1_filter, E1, F1) = a_select3(r_ds1_filter, F1, E1) ) ) ) & ( ( forall G1 H1. ( ( leq(n0, G1) & ( leq(n0, H1) & ( leq(G1, minus(n6, n1)) & leq(H1, minus(n6, n1)) ) ) ) => ( a_select3(tptp_madd(q_ds1_filter, tptp_mmul(tptp_update3(tptp_update3(tptp_update3(tptp_update3(tptp_update3(tptp_update3(phi_ds1_filter, n2, n1, times(minus(a_select3(xhatmin_ds1_filter, n3, n0), a_select3(u, n0, pv5)), divide(n1, n400))), n2, n0, times(minus(a_select3(u, n1, pv5), a_select3(xhatmin_ds1_filter, n4, n0)), divide(n1, n400))), n1, n2, times(minus(a_select3(u, n0, pv5), a_select3(xhatmin_ds1_filter, n3, n0)), divide(n1, n400))), n1, n0, times(minus(a_select3(xhatmin_ds1_filter, n5, n0), a_select3(u, n2, pv5)), divide(n1, n400))), n0, n2, times(minus(a_select3(xhatmin_ds1_filter, n4, n0), a_select3(u, n1, pv5)), divide(n1, n400))), n0, n1, times(minus(a_select3(u, n2, pv5), a_select3(xhatmin_ds1_filter, n5, n0)), divide(n1, n400))), tptp_mmul(tptp_madd(tptp_mmul(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter))))))), tptp_mmul(r_ds1_filter, trans(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter)))))))))), tptp_mmul(tptp_msub(id_ds1_filter, tptp_mmul(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter))))))), h_ds1_filter)), tptp_mmul(pminus_ds1_filter, trans(tptp_msub(id_ds1_filter, tptp_mmul(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter))))))), h_ds1_filter)))))), trans(tptp_update3(tptp_update3(tptp_update3(tptp_update3(tptp_update3(tptp_update3(phi_ds1_filter, n2, n1, times(minus(a_select3(xhatmin_ds1_filter, n3, n0), a_select3(u, n0, pv5)), divide(n1, n400))), n2, n0, times(minus(a_select3(u, n1, pv5), a_select3(xhatmin_ds1_filter, n4, n0)), divide(n1, n400))), n1, n2, times(minus(a_select3(u, n0, pv5), a_select3(xhatmin_ds1_filter, n3, n0)), divide(n1, n400))), n1, n0, times(minus(a_select3(xhatmin_ds1_filter, n5, n0), a_select3(u, n2, pv5)), divide(n1, n400))), n0, n2, times(minus(a_select3(xhatmin_ds1_filter, n4, n0), a_select3(u, n1, pv5)), divide(n1, n400))), n0, n1, times(minus(a_select3(u, n2, pv5), a_select3(xhatmin_ds1_filter, n5, n0)), divide(n1, n400))))))), G1, H1) = a_select3(tptp_madd(q_ds1_filter, tptp_mmul(tptp_update3(tptp_update3(tptp_update3(tptp_update3(tptp_update3(tptp_update3(phi_ds1_filter, n2, n1, times(minus(a_select3(xhatmin_ds1_filter, n3, n0), a_select3(u, n0, pv5)), divide(n1, n400))), n2, n0, times(minus(a_select3(u, n1, pv5), a_select3(xhatmin_ds1_filter, n4, n0)), divide(n1, n400))), n1, n2, times(minus(a_select3(u, n0, pv5), a_select3(xhatmin_ds1_filter, n3, n0)), divide(n1, n400))), n1, n0, times(minus(a_select3(xhatmin_ds1_filter, n5, n0), a_select3(u, n2, pv5)), divide(n1, n400))), n0, n2, times(minus(a_select3(xhatmin_ds1_filter, n4, n0), a_select3(u, n1, pv5)), divide(n1, n400))), n0, n1, times(minus(a_select3(u, n2, pv5), a_select3(xhatmin_ds1_filter, n5, n0)), divide(n1, n400))), tptp_mmul(tptp_madd(tptp_mmul(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter))))))), tptp_mmul(r_ds1_filter, trans(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter)))))))))), tptp_mmul(tptp_msub(id_ds1_filter, tptp_mmul(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter))))))), h_ds1_filter)), tptp_mmul(pminus_ds1_filter, trans(tptp_msub(id_ds1_filter, tptp_mmul(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter))))))), h_ds1_filter)))))), trans(tptp_update3(tptp_update3(tptp_update3(tptp_update3(tptp_update3(tptp_update3(phi_ds1_filter, n2, n1, times(minus(a_select3(xhatmin_ds1_filter, n3, n0), a_select3(u, n0, pv5)), divide(n1, n400))), n2, n0, times(minus(a_select3(u, n1, pv5), a_select3(xhatmin_ds1_filter, n4, n0)), divide(n1, n400))), n1, n2, times(minus(a_select3(u, n0, pv5), a_select3(xhatmin_ds1_filter, n3, n0)), divide(n1, n400))), n1, n0, times(minus(a_select3(xhatmin_ds1_filter, n5, n0), a_select3(u, n2, pv5)), divide(n1, n400))), n0, n2, times(minus(a_select3(xhatmin_ds1_filter, n4, n0), a_select3(u, n1, pv5)), divide(n1, n400))), n0, n1, times(minus(a_select3(u, n2, pv5), a_select3(xhatmin_ds1_filter, n5, n0)), divide(n1, n400))))))), H1, G1) ) ) ) & ( ( forall I1 J1. ( ( leq(n0, I1) & ( leq(n0, J1) & ( leq(I1, minus(n6, n1)) & leq(J1, minus(n6, n1)) ) ) ) => ( a_select3(tptp_madd(q_ds1_filter, tptp_mmul(tptp_update3(tptp_update3(tptp_update3(tptp_update3(tptp_update3(tptp_update3(phi_ds1_filter, n2, n1, times(minus(a_select3(xhatmin_ds1_filter, n3, n0), a_select3(u, n0, pv5)), divide(n1, n400))), n2, n0, times(minus(a_select3(u, n1, pv5), a_select3(xhatmin_ds1_filter, n4, n0)), divide(n1, n400))), n1, n2, times(minus(a_select3(u, n0, pv5), a_select3(xhatmin_ds1_filter, n3, n0)), divide(n1, n400))), n1, n0, times(minus(a_select3(xhatmin_ds1_filter, n5, n0), a_select3(u, n2, pv5)), divide(n1, n400))), n0, n2, times(minus(a_select3(xhatmin_ds1_filter, n4, n0), a_select3(u, n1, pv5)), divide(n1, n400))), n0, n1, times(minus(a_select3(u, n2, pv5), a_select3(xhatmin_ds1_filter, n5, n0)), divide(n1, n400))), tptp_mmul(tptp_madd(tptp_mmul(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter))))))), tptp_mmul(r_ds1_filter, trans(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter)))))))))), tptp_mmul(tptp_msub(id_ds1_filter, tptp_mmul(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter))))))), h_ds1_filter)), tptp_mmul(pminus_ds1_filter, trans(tptp_msub(id_ds1_filter, tptp_mmul(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter))))))), h_ds1_filter)))))), trans(tptp_update3(tptp_update3(tptp_update3(tptp_update3(tptp_update3(tptp_update3(phi_ds1_filter, n2, n1, times(minus(a_select3(xhatmin_ds1_filter, n3, n0), a_select3(u, n0, pv5)), divide(n1, n400))), n2, n0, times(minus(a_select3(u, n1, pv5), a_select3(xhatmin_ds1_filter, n4, n0)), divide(n1, n400))), n1, n2, times(minus(a_select3(u, n0, pv5), a_select3(xhatmin_ds1_filter, n3, n0)), divide(n1, n400))), n1, n0, times(minus(a_select3(xhatmin_ds1_filter, n5, n0), a_select3(u, n2, pv5)), divide(n1, n400))), n0, n2, times(minus(a_select3(xhatmin_ds1_filter, n4, n0), a_select3(u, n1, pv5)), divide(n1, n400))), n0, n1, times(minus(a_select3(u, n2, pv5), a_select3(xhatmin_ds1_filter, n5, n0)), divide(n1, n400))))))), I1, J1) = a_select3(tptp_madd(q_ds1_filter, tptp_mmul(tptp_update3(tptp_update3(tptp_update3(tptp_update3(tptp_update3(tptp_update3(phi_ds1_filter, n2, n1, times(minus(a_select3(xhatmin_ds1_filter, n3, n0), a_select3(u, n0, pv5)), divide(n1, n400))), n2, n0, times(minus(a_select3(u, n1, pv5), a_select3(xhatmin_ds1_filter, n4, n0)), divide(n1, n400))), n1, n2, times(minus(a_select3(u, n0, pv5), a_select3(xhatmin_ds1_filter, n3, n0)), divide(n1, n400))), n1, n0, times(minus(a_select3(xhatmin_ds1_filter, n5, n0), a_select3(u, n2, pv5)), divide(n1, n400))), n0, n2, times(minus(a_select3(xhatmin_ds1_filter, n4, n0), a_select3(u, n1, pv5)), divide(n1, n400))), n0, n1, times(minus(a_select3(u, n2, pv5), a_select3(xhatmin_ds1_filter, n5, n0)), divide(n1, n400))), tptp_mmul(tptp_madd(tptp_mmul(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter))))))), tptp_mmul(r_ds1_filter, trans(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter)))))))))), tptp_mmul(tptp_msub(id_ds1_filter, tptp_mmul(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter))))))), h_ds1_filter)), tptp_mmul(pminus_ds1_filter, trans(tptp_msub(id_ds1_filter, tptp_mmul(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter))))))), h_ds1_filter)))))), trans(tptp_update3(tptp_update3(tptp_update3(tptp_update3(tptp_update3(tptp_update3(phi_ds1_filter, n2, n1, times(minus(a_select3(xhatmin_ds1_filter, n3, n0), a_select3(u, n0, pv5)), divide(n1, n400))), n2, n0, times(minus(a_select3(u, n1, pv5), a_select3(xhatmin_ds1_filter, n4, n0)), divide(n1, n400))), n1, n2, times(minus(a_select3(u, n0, pv5), a_select3(xhatmin_ds1_filter, n3, n0)), divide(n1, n400))), n1, n0, times(minus(a_select3(xhatmin_ds1_filter, n5, n0), a_select3(u, n2, pv5)), divide(n1, n400))), n0, n2, times(minus(a_select3(xhatmin_ds1_filter, n4, n0), a_select3(u, n1, pv5)), divide(n1, n400))), n0, n1, times(minus(a_select3(u, n2, pv5), a_select3(xhatmin_ds1_filter, n5, n0)), divide(n1, n400))))))), J1, I1) ) ) ) & ( forall K1. ( ( leq(n0, K1) & leq(K1, minus(n6, n1)) ) => ( forall L1. ( ( leq(n0, L1) & leq(L1, minus(n6, n1)) ) => ( a_select3(id_ds1_filter, K1, L1) = a_select3(id_ds1_filter, L1, K1) ) ) ) ) ) ) ) ) ) ) ) ) & ( gt(pv5, n0) => ( leq(n0, pv5) & ( leq(pv5, minus(n999, n1)) & ( ( forall M1 N1. ( ( leq(n0, M1) & ( leq(n0, N1) & ( leq(M1, minus(n6, n1)) & leq(N1, minus(n6, n1)) ) ) ) => ( a_select3(q_ds1_filter, M1, N1) = a_select3(q_ds1_filter, N1, M1) ) ) ) & ( ( forall O1 P1. ( ( leq(n0, O1) & ( leq(n0, P1) & ( leq(O1, minus(n3, n1)) & leq(P1, minus(n3, n1)) ) ) ) => ( a_select3(r_ds1_filter, O1, P1) = a_select3(r_ds1_filter, P1, O1) ) ) ) & ( ( forall Q1 R1. ( ( leq(n0, Q1) & ( leq(n0, R1) & ( leq(Q1, minus(n6, n1)) & leq(R1, minus(n6, n1)) ) ) ) => ( a_select3(tptp_madd(q_ds1_filter, tptp_mmul(tptp_update3(tptp_update3(tptp_update3(tptp_update3(tptp_update3(tptp_update3(phi_ds1_filter, n2, n1, times(minus(a_select3(xhatmin_ds1_filter, n3, n0), a_select3(u, n0, pv5)), divide(n1, n400))), n2, n0, times(minus(a_select3(u, n1, pv5), a_select3(xhatmin_ds1_filter, n4, n0)), divide(n1, n400))), n1, n2, times(minus(a_select3(u, n0, pv5), a_select3(xhatmin_ds1_filter, n3, n0)), divide(n1, n400))), n1, n0, times(minus(a_select3(xhatmin_ds1_filter, n5, n0), a_select3(u, n2, pv5)), divide(n1, n400))), n0, n2, times(minus(a_select3(xhatmin_ds1_filter, n4, n0), a_select3(u, n1, pv5)), divide(n1, n400))), n0, n1, times(minus(a_select3(u, n2, pv5), a_select3(xhatmin_ds1_filter, n5, n0)), divide(n1, n400))), tptp_mmul(tptp_madd(tptp_mmul(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter))))))), tptp_mmul(r_ds1_filter, trans(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter)))))))))), tptp_mmul(tptp_msub(id_ds1_filter, tptp_mmul(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter))))))), h_ds1_filter)), tptp_mmul(pminus_ds1_filter, trans(tptp_msub(id_ds1_filter, tptp_mmul(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter))))))), h_ds1_filter)))))), trans(tptp_update3(tptp_update3(tptp_update3(tptp_update3(tptp_update3(tptp_update3(phi_ds1_filter, n2, n1, times(minus(a_select3(xhatmin_ds1_filter, n3, n0), a_select3(u, n0, pv5)), divide(n1, n400))), n2, n0, times(minus(a_select3(u, n1, pv5), a_select3(xhatmin_ds1_filter, n4, n0)), divide(n1, n400))), n1, n2, times(minus(a_select3(u, n0, pv5), a_select3(xhatmin_ds1_filter, n3, n0)), divide(n1, n400))), n1, n0, times(minus(a_select3(xhatmin_ds1_filter, n5, n0), a_select3(u, n2, pv5)), divide(n1, n400))), n0, n2, times(minus(a_select3(xhatmin_ds1_filter, n4, n0), a_select3(u, n1, pv5)), divide(n1, n400))), n0, n1, times(minus(a_select3(u, n2, pv5), a_select3(xhatmin_ds1_filter, n5, n0)), divide(n1, n400))))))), Q1, R1) = a_select3(tptp_madd(q_ds1_filter, tptp_mmul(tptp_update3(tptp_update3(tptp_update3(tptp_update3(tptp_update3(tptp_update3(phi_ds1_filter, n2, n1, times(minus(a_select3(xhatmin_ds1_filter, n3, n0), a_select3(u, n0, pv5)), divide(n1, n400))), n2, n0, times(minus(a_select3(u, n1, pv5), a_select3(xhatmin_ds1_filter, n4, n0)), divide(n1, n400))), n1, n2, times(minus(a_select3(u, n0, pv5), a_select3(xhatmin_ds1_filter, n3, n0)), divide(n1, n400))), n1, n0, times(minus(a_select3(xhatmin_ds1_filter, n5, n0), a_select3(u, n2, pv5)), divide(n1, n400))), n0, n2, times(minus(a_select3(xhatmin_ds1_filter, n4, n0), a_select3(u, n1, pv5)), divide(n1, n400))), n0, n1, times(minus(a_select3(u, n2, pv5), a_select3(xhatmin_ds1_filter, n5, n0)), divide(n1, n400))), tptp_mmul(tptp_madd(tptp_mmul(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter))))))), tptp_mmul(r_ds1_filter, trans(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter)))))))))), tptp_mmul(tptp_msub(id_ds1_filter, tptp_mmul(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter))))))), h_ds1_filter)), tptp_mmul(pminus_ds1_filter, trans(tptp_msub(id_ds1_filter, tptp_mmul(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter))))))), h_ds1_filter)))))), trans(tptp_update3(tptp_update3(tptp_update3(tptp_update3(tptp_update3(tptp_update3(phi_ds1_filter, n2, n1, times(minus(a_select3(xhatmin_ds1_filter, n3, n0), a_select3(u, n0, pv5)), divide(n1, n400))), n2, n0, times(minus(a_select3(u, n1, pv5), a_select3(xhatmin_ds1_filter, n4, n0)), divide(n1, n400))), n1, n2, times(minus(a_select3(u, n0, pv5), a_select3(xhatmin_ds1_filter, n3, n0)), divide(n1, n400))), n1, n0, times(minus(a_select3(xhatmin_ds1_filter, n5, n0), a_select3(u, n2, pv5)), divide(n1, n400))), n0, n2, times(minus(a_select3(xhatmin_ds1_filter, n4, n0), a_select3(u, n1, pv5)), divide(n1, n400))), n0, n1, times(minus(a_select3(u, n2, pv5), a_select3(xhatmin_ds1_filter, n5, n0)), divide(n1, n400))))))), R1, Q1) ) ) ) & ( ( forall S1 T1. ( ( leq(n0, S1) & ( leq(n0, T1) & ( leq(S1, minus(n6, n1)) & leq(T1, minus(n6, n1)) ) ) ) => ( a_select3(tptp_madd(q_ds1_filter, tptp_mmul(tptp_update3(tptp_update3(tptp_update3(tptp_update3(tptp_update3(tptp_update3(phi_ds1_filter, n2, n1, times(minus(a_select3(xhatmin_ds1_filter, n3, n0), a_select3(u, n0, pv5)), divide(n1, n400))), n2, n0, times(minus(a_select3(u, n1, pv5), a_select3(xhatmin_ds1_filter, n4, n0)), divide(n1, n400))), n1, n2, times(minus(a_select3(u, n0, pv5), a_select3(xhatmin_ds1_filter, n3, n0)), divide(n1, n400))), n1, n0, times(minus(a_select3(xhatmin_ds1_filter, n5, n0), a_select3(u, n2, pv5)), divide(n1, n400))), n0, n2, times(minus(a_select3(xhatmin_ds1_filter, n4, n0), a_select3(u, n1, pv5)), divide(n1, n400))), n0, n1, times(minus(a_select3(u, n2, pv5), a_select3(xhatmin_ds1_filter, n5, n0)), divide(n1, n400))), tptp_mmul(tptp_madd(tptp_mmul(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter))))))), tptp_mmul(r_ds1_filter, trans(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter)))))))))), tptp_mmul(tptp_msub(id_ds1_filter, tptp_mmul(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter))))))), h_ds1_filter)), tptp_mmul(pminus_ds1_filter, trans(tptp_msub(id_ds1_filter, tptp_mmul(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter))))))), h_ds1_filter)))))), trans(tptp_update3(tptp_update3(tptp_update3(tptp_update3(tptp_update3(tptp_update3(phi_ds1_filter, n2, n1, times(minus(a_select3(xhatmin_ds1_filter, n3, n0), a_select3(u, n0, pv5)), divide(n1, n400))), n2, n0, times(minus(a_select3(u, n1, pv5), a_select3(xhatmin_ds1_filter, n4, n0)), divide(n1, n400))), n1, n2, times(minus(a_select3(u, n0, pv5), a_select3(xhatmin_ds1_filter, n3, n0)), divide(n1, n400))), n1, n0, times(minus(a_select3(xhatmin_ds1_filter, n5, n0), a_select3(u, n2, pv5)), divide(n1, n400))), n0, n2, times(minus(a_select3(xhatmin_ds1_filter, n4, n0), a_select3(u, n1, pv5)), divide(n1, n400))), n0, n1, times(minus(a_select3(u, n2, pv5), a_select3(xhatmin_ds1_filter, n5, n0)), divide(n1, n400))))))), S1, T1) = a_select3(tptp_madd(q_ds1_filter, tptp_mmul(tptp_update3(tptp_update3(tptp_update3(tptp_update3(tptp_update3(tptp_update3(phi_ds1_filter, n2, n1, times(minus(a_select3(xhatmin_ds1_filter, n3, n0), a_select3(u, n0, pv5)), divide(n1, n400))), n2, n0, times(minus(a_select3(u, n1, pv5), a_select3(xhatmin_ds1_filter, n4, n0)), divide(n1, n400))), n1, n2, times(minus(a_select3(u, n0, pv5), a_select3(xhatmin_ds1_filter, n3, n0)), divide(n1, n400))), n1, n0, times(minus(a_select3(xhatmin_ds1_filter, n5, n0), a_select3(u, n2, pv5)), divide(n1, n400))), n0, n2, times(minus(a_select3(xhatmin_ds1_filter, n4, n0), a_select3(u, n1, pv5)), divide(n1, n400))), n0, n1, times(minus(a_select3(u, n2, pv5), a_select3(xhatmin_ds1_filter, n5, n0)), divide(n1, n400))), tptp_mmul(tptp_madd(tptp_mmul(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter))))))), tptp_mmul(r_ds1_filter, trans(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter)))))))))), tptp_mmul(tptp_msub(id_ds1_filter, tptp_mmul(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter))))))), h_ds1_filter)), tptp_mmul(pminus_ds1_filter, trans(tptp_msub(id_ds1_filter, tptp_mmul(tptp_mmul(pminus_ds1_filter, tptp_mmul(trans(h_ds1_filter), inv(tptp_madd(r_ds1_filter, tptp_mmul(h_ds1_filter, tptp_mmul(pminus_ds1_filter, trans(h_ds1_filter))))))), h_ds1_filter)))))), trans(tptp_update3(tptp_update3(tptp_update3(tptp_update3(tptp_update3(tptp_update3(phi_ds1_filter, n2, n1, times(minus(a_select3(xhatmin_ds1_filter, n3, n0), a_select3(u, n0, pv5)), divide(n1, n400))), n2, n0, times(minus(a_select3(u, n1, pv5), a_select3(xhatmin_ds1_filter, n4, n0)), divide(n1, n400))), n1, n2, times(minus(a_select3(u, n0, pv5), a_select3(xhatmin_ds1_filter, n3, n0)), divide(n1, n400))), n1, n0, times(minus(a_select3(xhatmin_ds1_filter, n5, n0), a_select3(u, n2, pv5)), divide(n1, n400))), n0, n2, times(minus(a_select3(xhatmin_ds1_filter, n4, n0), a_select3(u, n1, pv5)), divide(n1, n400))), n0, n1, times(minus(a_select3(u, n2, pv5), a_select3(xhatmin_ds1_filter, n5, n0)), divide(n1, n400))))))), T1, S1) ) ) ) & ( forall U1. ( ( leq(n0, U1) & leq(U1, minus(n6, n1)) ) => ( forall V1. ( ( leq(n0, V1) & leq(V1, minus(n6, n1)) ) => ( a_select3(id_ds1_filter, U1, V1) = a_select3(id_ds1_filter, V1, U1) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ))

 

%------------------------------------------------------------------------------
