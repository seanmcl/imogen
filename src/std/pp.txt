
Hi,

Just following up about the pretty printing library and laziness.  An element of
type Doc represents the set of all possible layouts.  The most interesting
branch is Union, which is the union of sets of layouts.  The other
branches are single layouts.

data Doc
  = Empty                                            -- empty
  | NilAbove Doc                                     -- text "" $$ x
  | TextBeside !TextDetails {-# UNPACK #-} !Int Doc  -- text s <> x
  | Nest {-# UNPACK #-} !Int Doc                     -- nest k x
  | Union Doc Doc                                    -- ul `union` ur
  | NoDoc                                            -- The empty set of documents
  | Beside Doc Bool Doc                              -- True <=> space between
  | Above Doc Bool Doc                               -- True <=> never overlap
    deriving Show

The sml definition makes the laziness more clear.

 datatype doc =
    Empty
  | Nil_above of doc'
  | Text_beside of text_details * int * doc'
  | Nest of int * doc'
  | Union of doc' * doc'
  | No_doc
  | Beside of doc' * bool * doc'
  | Above of doc' * bool * doc'
 withtype doc' = doc Lazy.t

The most interesting function in the library is 'best'

best :: Int     -- Line length
     -> Int     -- Ribbon length
     -> Doc
     -> Doc     -- No unions in here!

which selects the 'best' layout based on some metric.  It searches through the
possible layouts until it finds one that is 'good enough' based on how much text
has been displayed on the current line.  The interesting thing is that since Doc
is lazy, it can include an exponential number of possible layouts, but you only
need to find the first one that satisfies the constraints.  The idea of
collecting the suspended possibilities in the lazy datatype is pretty.

The sml translation is awkward.  There are a lot of manual suspensions and
forcing, and you have to think very carefully about where you need to suspend.
If you just suspend and force everywhere, you get a very slow pretty printer.  I
had to experiment a lot to get the performance to be on par with Haskell.  The
code still has a bug I haven't yet tracked down where printing is very slow.
For example:

Haskell:

  get _ Empty               = Empty
  get _ NoDoc               = NoDoc
  get w (NilAbove p)        = nilAbove_ (get w p)
  get w (TextBeside s sl p) = textBeside_ s sl (get1 w sl p)
  get w (Nest k p)          = nest_ k (get (w - k) p)
  get w (p `Union` q)       = nicest w r (get w p) (get w q)

vs SML: (! means force and % means suspend)

  fun get w = fn
     Empty => Empty
   | No_doc => No_doc
   | Nil_above p => Nil_above (%(fn () => get w (!p)))
   | Text_beside (s, sl, p) => Text_beside (s, sl, %(fn () => get1 w sl (!p)))
   | Nest (k, p) => Nest (k, %(fn () => get (w - k) (!p)))
   | Union (p, q) => nicest w r (get w (!p)) (%(fn () => get w (!q)))
   | _ => fail ()

I'm not sure what this means in terms of the value of laziness.  I'm not a good
enough Haskell programmer to understand it well enough to write the correct ML
code.  I don't necessarily think this reflects poorly on Haskell; in the same
way I don't fault SML when I don't understand programs written with first-class
continuations without significant effort.  Maybe laziness, like continuations,
is simply a very powerful feature that requires more sophisticated thought than
is required in most programming we do in SML or C.

I think of it as an interesting data point; an elegant Haskell library
that is less inelegant and more error prone (and currently less efficient) in
ML.

