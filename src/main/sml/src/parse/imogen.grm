
structure T = Types
val unicode_le = "\226\137\164" (* â‰¤ : u2264 *)

%%

%name Imogen
%eop EOF
%pos int
%verbose
%pure

%term

(* imogen.Parser utils *)

  PARSE_VAR
| PARSE_PARAM
| PARSE_FUNC
| PARSE_TERM
| PARSE_PRED
| PARSE_REL
| PARSE_FORMULA
| PARSE_SUBST
| PARSE_SEQ
| PARSE_RSEQ
| PARSE_RULE

(* Dummy*)

| EOF
| UNOP_PREC

(* Identifiers *)

| VAR_NEG_PRED_ID of string | PARAM_ID of string | FUNC_POS_PRED_ID of string
| HASH

(* Punctuation *)

| LPAREN | RPAREN | LBRACE | RBRACE | LBRACK | RBRACK | COMMA | DOT | COLON
| SEMICOLON | COLONCOLON

(* Logical connectives *)

| TRUE | FALSE | TOP | L_ONE | L_ZERO | AND | OR | NOT | IMP | LEFT_IMP | IFF
| EQ

(* Quantifiers *)

| FORALL | EXISTS

(* Arithmetic *)

| PLUS | MINUS | TIMES | LT | GT | LE | GE | INT of string

(* Polarization operators *)

| DOWN_SHIFT | UP_SHIFT

(* Linear operators *)

| LOLLI | LEFT_LOLLI | BI_LOLLI | OPLUS | OTIMES | BANG | AMP

(* Ordered operators *)

| ORD_IMP1 | ORD_IMP2 | UBANG

(* Modal operators *)

| BOX | DIA

(* Types *)

| SORT_INT

(* Sequents *)

| VDASH

(* Rules *)

| LINE

%nonterm
  start of T.Parse.t
| bind of T.Subst.one
| bindlist of T.Subst.one list
| cons of T.Rel.t option
| const of T.Const.t
| form of T.imogen.Formula.t
| func of T.Func.t
| id of string * { lower : bool }
| param of T.Param.t
| paramlist of T.Param.t list
| pred of T.Pred.t
| quant of T.Quant.t
| rel of T.Rel.t
| rellist of T.Rel.t list
| rule of T.Rule.t
| rseq of T.RSeq.t
| seq of T.Seq.t
| seqlist of T.Seq.t list
| sort of T.Sort.t
| subst of T.Subst.one list
| term of T.Term.t
| termlist of T.Term.t list
| unop of T.Unop.t
| var of T.Var.t
| varbd of string * T.Sort.t option
| varbd_list of (string * T.Sort.t option) list

%nonassoc DOT
%nonassoc COLONCOLON
%right FORALL EXISTS
%right IFF BI_LOLLI
%right IMP LOLLI ORD_IMP1 ORD_IMP2
%left  LEFT_IMP LEFT_LOLLI
%right OR
%right AND OTIMES AMP
%right PLUS OPLUS
%left MINUS
%right TIMES
%nonassoc UNOP_PREC
%nonassoc LT GT LE GE EQ

%start start

%%

start
  : PARSE_VAR var  ( T.Parse.Var var )
  | PARSE_PARAM param  ( T.Parse.Param param )
  | PARSE_FUNC func  ( T.Parse.Func func )
  | PARSE_TERM term  ( T.Parse.Term term )
  | PARSE_PRED pred  ( T.Parse.Pred pred )
  | PARSE_REL rel  ( T.Parse.Rel rel )
  | PARSE_FORMULA form ( T.Parse.Form form )
  | PARSE_SUBST subst  ( T.Parse.Subst subst )
  | PARSE_SEQ seq  ( T.Parse.Seq seq )
  | PARSE_RSEQ rseq  ( T.Parse.RSeq rseq )
  | PARSE_RULE rule  ( T.Parse.Rule rule )

cons
  : DOT      ( NONE )
  | rel      ( SOME rel )

seq
  : rellist VDASH cons ( T.Seq.T { ctx = NONE, constr = NONE, ants = rellist, cons = cons } )
  | LBRACE form RBRACE rellist VDASH cons ( T.Seq.T { ctx = NONE, constr = SOME form, ants = rellist, cons = cons } )

rseq
  : seq subst              (seq, subst)

seqlist
  : seq                    ( [seq] )
  | seq seqlist            ( seq :: seqlist )

rule
  : seqlist LINE LBRACK paramlist RBRACK seq
         ( T.Rule.T { ctx = NONE, constr = NONE, fresh = paramlist
                    , hyps = seqlist, conc = seq } )

subst
  : LBRACE bindlist RBRACE           ( bindlist )
  | LBRACE RBRACE                    ( [] )

bind
  : var IMP term                     ( T.Subst.Var (var, term) )
  | param IMP param                  ( T.Subst.Param (param1, param2) )

bindlist
  : bind                             ( [bind] )
  | bind COMMA bindlist              ( bind :: bindlist )

form
  : const                            ( T.imogen.Formula.Const const )
  | FUNC_POS_PRED_ID COLONCOLON form ( T.imogen.Formula.Label (FUNC_POS_PRED_ID, form))
  | form AND form                    ( T.imogen.Formula.Binop (T.Binop.imogen.And, form1, form2) )
  | form AMP form                    ( T.imogen.Formula.Binop (T.Binop.With, form1, form2) )
  | form OTIMES form                 ( T.imogen.Formula.Binop (T.Binop.Tensor, form1, form2) )
  | form OR form                     ( T.imogen.Formula.Binop (T.Binop.Or, form1, form2) )
  | form IMP form                    ( T.imogen.Formula.Binop (T.Binop.imogen.Imp, form1, form2) )
  | form LOLLI form                  ( T.imogen.Formula.Binop (T.Binop.Lolli, form1, form2) )
  | form ORD_IMP1 form               ( T.imogen.Formula.Binop (T.Binop.OrdImp1, form1, form2) )
  | form ORD_IMP2 form               ( T.imogen.Formula.Binop (T.Binop.OrdImp2, form1, form2) )
  | form LEFT_IMP form               ( T.imogen.Formula.Binop (T.Binop.imogen.Imp, form2, form1) )
  | form LEFT_LOLLI form             ( T.imogen.Formula.Binop (T.Binop.Lolli, form2, form1) )
  | form IFF form                    ( T.imogen.Formula.Binop (T.Binop.Iff, form1, form2) )
  | form BI_LOLLI form               ( T.imogen.Formula.Binop (T.Binop.BiLolli, form1, form2) )
  | quant varbd_list DOT form        ( foldr (fn (bnd, f) => T.imogen.Formula.Quant (quant, bnd, f)) form varbd_list )
  | unop form %prec UNOP_PREC        ( T.imogen.Formula.Unop (unop, form) )
  | rel                              ( T.imogen.Formula.Rel rel )
  | LPAREN form RPAREN               ( form )

const
  : TRUE                             ( T.Const.True )
  | FALSE                            ( T.Const.False )
  | TOP                              ( T.Const.Top )
  | L_ONE                            ( T.Const.One )
  | L_ZERO                           ( T.Const.Zero )

quant
  : FORALL                           ( T.Quant.All )
  | EXISTS                           ( T.Quant.Ex )

unop
  : NOT                              ( T.Unop.Not )
  | UP_SHIFT                         ( T.Unop.Up )
  | DOWN_SHIFT                       ( T.Unop.Down )
  | BANG                             ( T.Unop.Bang )
  | UBANG                            ( T.Unop.UBang )
  | BOX                              ( T.Unop.Box )
  | DIA                              ( T.Unop.Dia )

pred
  : FUNC_POS_PRED_ID                 ( T.Pred.PosId FUNC_POS_PRED_ID )
  | VAR_NEG_PRED_ID                  ( T.Pred.NegId VAR_NEG_PRED_ID )

rel
  : pred                             ( T.Rel.R (pred, []) )
  | pred LPAREN RPAREN               ( T.Rel.R (pred, []) )
  | pred LPAREN termlist RPAREN      ( T.Rel.R (pred, termlist) )
  | rel EQ term                      ( T.Rel.R (T.Pred.PosId "=", [T.Rel.toTerm rel, term]) )

rellist
  : rel                              ( [rel] )
  | rel COMMA rellist                ( rel :: rellist )
  |                                  ( [] )

func
  : FUNC_POS_PRED_ID                 ( T.Func.Id FUNC_POS_PRED_ID )

term
  : var                              ( T.Term.Var var )
  | param                            ( T.Term.Param param )
  | func                             ( T.Term.App (func, []) )
  | func LPAREN termlist RPAREN      ( T.Term.App (func, termlist) )

termlist
  : term                             ( [term] )
  | term COMMA termlist              ( term :: termlist )

var
  : VAR_NEG_PRED_ID HASH             ( T.Var.V { id = VAR_NEG_PRED_ID, fixed = true } )
  | VAR_NEG_PRED_ID                  ( T.Var.V { id = VAR_NEG_PRED_ID, fixed = false} )

param
  : PARAM_ID HASH                    ( T.Param.P { id = PARAM_ID, fixed = true } )
  | PARAM_ID                         ( T.Param.P { id = PARAM_ID, fixed = false} )

paramlist
  : param                            ( [param] )
  | param COMMA paramlist            ( param :: paramlist )
  |                                  ( [] )

varbd
  : VAR_NEG_PRED_ID                  ( (VAR_NEG_PRED_ID, NONE) )
  | VAR_NEG_PRED_ID COLON sort       ( (VAR_NEG_PRED_ID, SOME sort) )

varbd_list
  : varbd                            ( [varbd] )
  | varbd varbd_list                 ( varbd :: varbd_list )

sort
  : SORT_INT                         ( T.Sort.Int )
