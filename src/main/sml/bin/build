#!/bin/bash
set -e -u -o pipefail

mode=fast
#mode=debug
# mode=profile

#profile_flag="time-field"
# profile_flag="count"
# profile_flag="-alloc"
# profile_flag="time" # too slow
# profile_flag="time-label" # too slow

verbose=0
default_int=64

# -----------------------  Do not edit below this line  ------------------------

ihome=$(dirname $0)/..
bin=$ihome/bin
du_file=$ihome/src/.imogen.du
exe=$bin/imogen
test_exe=$bin/imogen-test
profile=no
keep_exn=true
timing=on

# Make sure the bin directory exists
mkdir -p ${bin}

function usage {
    echo "Usage: build       # build the executable and run quick tests"
    echo "       build exe   # build the executable"
    echo "       build tc    # typecheck the source"
    echo "       build test  # run all tests"
    echo "       build doc   # make the documentation"
    echo "       build clean # remove all generated files"
    echo "       build text  # check the source code for formatting errors"
    echo "       build help  # this message"
}

function clean {
    find . -name '.cm' | xargs rm -rf
    rm -f ${exe}
    rm -f ${du_file}
    (cd $ihome/src/parse; rm -f *.grm.{sig,sml} *.desc *.lex.sml)
    (cd $ihome/doc; rm -f *.aux *.dvi *.fn *.info *.ky *.log *.pdf *.pg *.toc *.tp *.vr *.cp)
}

function mkdoc {
    cd $ihome/doc; makeinfo imogen.texi; texi2pdf imogen.texi
}

function mlt {
    mlb=${ihome}/src/top/sources.mlb
    mlton                                            \
        -verbose ${verbose}                          \
        -profile ${profile}                          \
        -const "Exn.keepHistory $keep_exn"           \
        -mlb-path-var "TIMING $timing"               \
        -default-ann "allowFFI false"                \
        -default-ann "nonexhaustiveMatch error"      \
        -default-ann "nonexhaustiveExnMatch default" \
        -default-ann "redundantMatch error"          \
        -default-ann "sequenceNonUnit error"         \
        -default-ann "warnUnused true"               \
        -default-type "int${default_int}"            \
        -default-type "word${default_int}"           \
        $@ \
        ${mlb}
}

function mklex {
    (cd $ihome/src/parse; mllex imogen.lex > /dev/null; mlyacc imogen.grm > /dev/null)
}

function mktc {
    mklex
    mlt -stop tc
}

function mkexe {
    case $mode in
        debug)
            echo "!!!Warning: compiling in debug mode!!!"
            exn=true
            ;;
        profile)
            echo "!!!Warning: profiling is on!!!"
            profile=${profile_flag}
            # MLton can't keep exn history and also profile
            keep_exn=false
            ;;
        fast)
            ;;
    esac
    mklex
    time mlt -output ${exe}
}

function check_text {
    cd ${ihome}
    long=$(bin/long-lines | wc -l | sed 's/[^0-9]//g')
    if (( "$long" != 0 )); then
        echo "There are $long lines over 80 chars (run bin/long-lines)"
    fi
    packed=$(bin/packed | wc -l | sed 's/[^0-9]//g')
    if (( "$packed" != 0 )); then
        echo "There are $packed lines with packed parens or commas (run bin/packed)"
    fi
}

function runtests {
    function self {
        imogen test
    }
    function prop {
        echo "[Prop]"
        cd ${ihome}/tests/prop
        if (( $# > 0 )); then
            ./runtests $@
        else
            ./runtests basic
            ./runtests iltp-quick
        fi
    }
    function fol {
        echo "[Fol]"
        cd ${ihome}/tests/fol; ./runtests $@
    }
    function modal {
        echo "[Modal]"
        cd ${ihome}/tests/modal; ./runtests $@
    }
    function linear {
        echo "[Linear]"
        cd ${ihome}/tests/linear; ./runtests $@
    }
    if (( $# > 0 )); then
        tests=$1; shift
        case $tests in
            prop)
                prop $@
                ;;
            fol)
                fol $@
                ;;
            modal)
                modal $@
                ;;
            linear)
                linear $@
                ;;
            *)
                echo "Usage: test [prop|fol|modal|linear]"
                ;;
        esac
    else
        # syntax errors messages are OK.  They are generated by the mlyacc code
        # when I try to parse things I know shouldn't parse.
        self | grep -v "syntax error"
        prop
        fol
        modal
        linear
    fi
}

if (( $# > 0 )); then
    sub=$1; shift
    case $sub in
        "help"|"-help")
            usage
            exit 0
            ;;
        "clean")
            clean
            exit 0
            ;;
        "exe")
            mkexe
            exit 0
            ;;
        "tc")
            mktc
            exit 0
            ;;
        "text")
            check_text
            ;;
        "test")
            runtests $@
            exit 0
            ;;
        "doc")
            mkdoc
            exit 0
            ;;
        *)
            echo "Unknown subcommand: $sub"
            usage
            exit 1
            ;;
    esac
else
    mkexe
    exit 0
fi
