% File     : MGT048+1 : ILTP v1.1.2
% Domain   : Management (Organisation Theory)
% Problem  : Capability decreases monotonically with its age
% Version  : [Han98] axioms.
% English  : An organization's capability decreases monotonically with its age.
% Refs     : [Kam00] Kamps (2000), Email to G. Sutcliffe
%            [CH00]  Carroll & Hannan (2000), The Demography of Corporation
%            [Han98] Hannan (1998), Rethinking Age Dependence in Organizati
% Source   : [Kam00]
% Names    : LEMMA 5 [Han98]
% Status   : Theorem
% Rating   : 0.18 v3.1.0, 0.11 v2.7.0, 0.17 v2.5.0, 0.00 v2.4.0
%
% Status (intuit.) : Theorem
% Rating (intuit.) : 0.75 v1.0.0
%
% Syntax   : Number of formulae    :   10 (   0 unit)
%            Number of atoms       :   34 (   7 equality)
%            Maximal formula depth :    9 (   6 average)
%            Number of connectives :   25 (   1 ~  ;   4  |;   9  &)
%                                         (   3 <=>;   8 =>;   0 <=)
%                                         (   0 <~>;   0 ~|;   0 ~&)
%            Number of predicates  :    6 (   0 propositional; 1-2 arity)
%            Number of functors    :    4 (   0 constant; 2-2 arity)
%            Number of variables   :   25 (   0 singleton;  25 !;   0 ?)
%            Maximal term depth    :    2 (   1 average)
% Comments : See MGT042+1.p for the mnemonic names.
%------------------------------------------------------------------------------

 

% reflexivity, axiom.
(( forall X. ( X = X ) ))

  =>

% symmetry, axiom.
(( forall X Y. ( ( X = Y ) => ( Y = X ) ) ))

  =>

% transitivity, axiom.
(( forall X Y Z. ( ( ( X = Y ) & ( Y = Z ) ) => ( X = Z ) ) ))

  =>

% age_substitution_1, axiom.
(( forall A B C. ( ( A = B ) => ( age(A, C) = age(B, C) ) ) ))

  =>

% age_substitution_2, axiom.
(( forall A B C. ( ( A = B ) => ( age(C, A) = age(C, B) ) ) ))

  =>

% capability_substitution_1, axiom.
(( forall A B C. ( ( A = B ) => ( capability(A, C) = capability(B, C) ) ) ))

  =>

% capability_substitution_2, axiom.
(( forall A B C. ( ( A = B ) => ( capability(C, A) = capability(C, B) ) ) ))

  =>

% internal_friction_substitution_1, axiom.
(( forall A B C. ( ( A = B ) => ( internal_friction(A, C) = internal_friction(B, C) ) ) ))

  =>

% internal_friction_substitution_2, axiom.
(( forall A B C. ( ( A = B ) => ( internal_friction(C, A) = internal_friction(C, B) ) ) ))

  =>

% stock_of_knowledge_substitution_1, axiom.
(( forall A B C. ( ( A = B ) => ( stock_of_knowledge(A, C) = stock_of_knowledge(B, C) ) ) ))

  =>

% stock_of_knowledge_substitution_2, axiom.
(( forall A B C. ( ( A = B ) => ( stock_of_knowledge(C, A) = stock_of_knowledge(C, B) ) ) ))

  =>

% greater_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & greater(A, C) ) => greater(B, C) ) ))

  =>

% greater_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & greater(C, A) ) => greater(C, B) ) ))

  =>

% greater_or_equal_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & greater_or_equal(A, C) ) => greater_or_equal(B, C) ) ))

  =>

% greater_or_equal_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & greater_or_equal(C, A) ) => greater_or_equal(C, B) ) ))

  =>

% organization_substitution_1, axiom.
(( forall A B. ( ( ( A = B ) & organization(A) ) => organization(B) ) ))

  =>

% smaller_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & smaller(A, C) ) => smaller(B, C) ) ))

  =>

% smaller_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & smaller(C, A) ) => smaller(C, B) ) ))

  =>

% smaller_or_equal_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & smaller_or_equal(A, C) ) => smaller_or_equal(B, C) ) ))

  =>

% smaller_or_equal_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & smaller_or_equal(C, A) ) => smaller_or_equal(C, B) ) ))

  =>

% definition_smaller_or_equal, axiom.
(( forall X Y. ( smaller_or_equal(X, Y) <=> ( smaller(X, Y) | ( X = Y ) ) ) ))

  =>

% definition_greater_or_equal, axiom.
(( forall X Y. ( greater_or_equal(X, Y) <=> ( greater(X, Y) | ( X = Y ) ) ) ))

  =>

% definition_smaller, axiom.
(( forall X Y. ( smaller(X, Y) <=> greater(Y, X) ) ))

  =>

% meaning_postulate_greater_strict, axiom.
(( forall X Y. ( ~ ( greater(X, Y) & greater(Y, X) ) ) ))

  =>

% meaning_postulate_greater_transitive, axiom.
(( forall X Y Z. ( ( greater(X, Y) & greater(Y, Z) ) => greater(X, Z) ) ))

  =>

% meaning_postulate_greater_comparable, axiom.
(( forall X Y. ( smaller(X, Y) | ( ( X = Y ) | greater(X, Y) ) ) ))

  =>

% assumption_5, axiom.
(( forall X T0 T. ( organization(X) => ( ( ( greater(stock_of_knowledge(X, T), stock_of_knowledge(X, T0)) & smaller_or_equal(internal_friction(X, T), internal_friction(X, T0)) ) => greater(capability(X, T), capability(X, T0)) ) & ( ( ( smaller_or_equal(stock_of_knowledge(X, T), stock_of_knowledge(X, T0)) & greater(internal_friction(X, T), internal_friction(X, T0)) ) => smaller(capability(X, T), capability(X, T0)) ) & ( ( ( stock_of_knowledge(X, T) = stock_of_knowledge(X, T0) ) & ( internal_friction(X, T) = internal_friction(X, T0) ) ) => ( capability(X, T) = capability(X, T0) ) ) ) ) ) ))

  =>

% assumption_10, axiom.
(( forall X T0 T. ( organization(X) => ( stock_of_knowledge(X, T) = stock_of_knowledge(X, T0) ) ) ))

  =>

% assumption_12, axiom.
(( forall X T0 T. ( ( organization(X) & greater(age(X, T), age(X, T0)) ) => greater(internal_friction(X, T), internal_friction(X, T0)) ) ))

  =>

% lemma_5, conjecture.
(( forall X T0 T. ( ( organization(X) & greater(age(X, T), age(X, T0)) ) => smaller(capability(X, T), capability(X, T0)) ) ))

 

%------------------------------------------------------------------------------
