% File     : GEO085+1 : ILTP v1.1.2
% Domain   : Geometry (Oriented curves)
% Problem  : Every open curve has at least two endpoints
% Version  : [EHK99] axioms.
% English  :
% Refs     : [KE99]  Kulik & Eschenbach (1999), A Geometry of Oriented Curv
%          : [EHK99] Eschenbach et al. (1999), Representing Simple Trajecto
% Source   : [KE99]
% Names    : Theorem 2.7 (1) [KE99]
% Status   : Theorem
% Rating   : 0.27 v3.1.0, 0.22 v2.7.0, 0.17 v2.5.0, 0.00 v2.4.0
%
% Status (intuit.) : Open
% Rating (intuit.) : 1.00 v1.0.0
%
% Syntax   : Number of formulae    :   17 (   1 unit)
%            Number of atoms       :   71 (  11 equality)
%            Maximal formula depth :   12 (   7 average)
%            Number of connectives :   59 (   5 ~  ;   9  |;  23  &)
%                                         (   9 <=>;  13 =>;   0 <=)
%                                         (   0 <~>;   0 ~|;   0 ~&)
%            Number of predicates  :    8 (   0 propositional; 1-3 arity)
%            Number of functors    :    1 (   0 constant; 2-2 arity)
%            Number of variables   :   56 (   0 singleton;  45 !;  11 ?)
%            Maximal term depth    :    2 (   1 average)
% Comments : 
%------------------------------------------------------------------------------

 

% reflexivity, axiom.
(( forall X. ( X = X ) ))

  =>

% symmetry, axiom.
(( forall X Y. ( ( X = Y ) => ( Y = X ) ) ))

  =>

% transitivity, axiom.
(( forall X Y Z. ( ( ( X = Y ) & ( Y = Z ) ) => ( X = Z ) ) ))

  =>

% sum_substitution_1, axiom.
(( forall A B C. ( ( A = B ) => ( sum(A, C) = sum(B, C) ) ) ))

  =>

% sum_substitution_2, axiom.
(( forall A B C. ( ( A = B ) => ( sum(C, A) = sum(C, B) ) ) ))

  =>

% closed_substitution_1, axiom.
(( forall A B. ( ( ( A = B ) & closed(A) ) => closed(B) ) ))

  =>

% end_point_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & end_point(A, C) ) => end_point(B, C) ) ))

  =>

% end_point_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & end_point(C, A) ) => end_point(C, B) ) ))

  =>

% incident_c_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & incident_c(A, C) ) => incident_c(B, C) ) ))

  =>

% incident_c_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & incident_c(C, A) ) => incident_c(C, B) ) ))

  =>

% inner_point_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & inner_point(A, C) ) => inner_point(B, C) ) ))

  =>

% inner_point_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & inner_point(C, A) ) => inner_point(C, B) ) ))

  =>

% meet_substitution_1, axiom.
(( forall A B C D. ( ( ( A = B ) & meet(A, C, D) ) => meet(B, C, D) ) ))

  =>

% meet_substitution_2, axiom.
(( forall A B C D. ( ( ( A = B ) & meet(C, A, D) ) => meet(C, B, D) ) ))

  =>

% meet_substitution_3, axiom.
(( forall A B C D. ( ( ( A = B ) & meet(C, D, A) ) => meet(C, D, B) ) ))

  =>

% open_substitution_1, axiom.
(( forall A B. ( ( ( A = B ) & open(A) ) => open(B) ) ))

  =>

% part_of_substitution_1, axiom.
(( forall A B C. ( ( ( A = B ) & part_of(A, C) ) => part_of(B, C) ) ))

  =>

% part_of_substitution_2, axiom.
(( forall A B C. ( ( ( A = B ) & part_of(C, A) ) => part_of(C, B) ) ))

  =>

% part_of_defn, axiom.
(( forall C C1. ( part_of(C1, C) <=> ( forall P. ( incident_c(P, C1) => incident_c(P, C) ) ) ) ))

  =>

% sum_defn, axiom.
(( forall C C1 C2. ( ( C = sum(C1, C2) ) <=> ( forall Q. ( incident_c(Q, C) <=> ( incident_c(Q, C1) | incident_c(Q, C2) ) ) ) ) ))

  =>

% end_point_defn, axiom.
(( forall P C. ( end_point(P, C) <=> ( incident_c(P, C) & ( forall C1 C2. ( ( part_of(C1, C) & ( part_of(C2, C) & ( incident_c(P, C1) & incident_c(P, C2) ) ) ) => ( part_of(C1, C2) | part_of(C2, C1) ) ) ) ) ) ))

  =>

% inner_point_defn, axiom.
(( forall P C. ( inner_point(P, C) <=> ( incident_c(P, C) & ( ~ end_point(P, C) ) ) ) ))

  =>

% meet_defn, axiom.
(( forall P C C1. ( meet(P, C, C1) <=> ( incident_c(P, C) & ( incident_c(P, C1) & ( forall Q. ( ( incident_c(Q, C) & incident_c(Q, C1) ) => ( end_point(Q, C) & end_point(Q, C1) ) ) ) ) ) ) ))

  =>

% closed_defn, axiom.
(( forall C. ( closed(C) <=> ( ~ ( exists P. end_point(P, C) ) ) ) ))

  =>

% open_defn, axiom.
(( forall C. ( open(C) <=> ( exists P. end_point(P, C) ) ) ))

  =>

% c1, axiom.
(( forall C C1. ( ( part_of(C1, C) & ( ~ ( C1 = C ) ) ) => open(C1) ) ))

  =>

% c2, axiom.
(( forall C C1 C2 C3. ( ( part_of(C1, C) & ( part_of(C2, C) & ( part_of(C3, C) & ( exists P. ( end_point(P, C1) & ( end_point(P, C2) & end_point(P, C3) ) ) ) ) ) ) => ( part_of(C2, C3) | ( part_of(C3, C2) | ( part_of(C1, C2) | ( part_of(C2, C1) | ( part_of(C1, C3) | part_of(C3, C1) ) ) ) ) ) ) ))

  =>

% c3, axiom.
(( forall C. ( exists P. inner_point(P, C) ) ))

  =>

% c4, axiom.
(( forall C P. ( inner_point(P, C) => ( exists C1 C2. ( meet(P, C1, C2) & ( C = sum(C1, C2) ) ) ) ) ))

  =>

% c5, axiom.
(( forall C P Q R. ( ( end_point(P, C) & ( end_point(Q, C) & end_point(R, C) ) ) => ( ( P = Q ) | ( ( P = R ) | ( Q = R ) ) ) ) ))

  =>

% c6, axiom.
(( forall C P. ( end_point(P, C) => ( exists Q. ( end_point(Q, C) & ( ~ ( P = Q ) ) ) ) ) ))

  =>

% c7, axiom.
(( forall C C1 C2 P. ( ( closed(C) & ( meet(P, C1, C2) & ( C = sum(C1, C2) ) ) ) => ( forall Q. ( end_point(Q, C1) => meet(Q, C1, C2) ) ) ) ))

  =>

% c8, axiom.
(( forall C1 C2. ( ( exists P. meet(P, C1, C2) ) => ( exists C. ( C = sum(C1, C2) ) ) ) ))

  =>

% c9, axiom.
(( forall C C1. ( ( forall P. ( incident_c(P, C) <=> incident_c(P, C1) ) ) => ( C = C1 ) ) ))

  =>

% theorem_2_7_1, conjecture.
(( forall C. ( open(C) => ( exists P Q. ( ( ~ ( P = Q ) ) & ( end_point(P, C) & end_point(Q, C) ) ) ) ) ))

 

%------------------------------------------------------------------------------
